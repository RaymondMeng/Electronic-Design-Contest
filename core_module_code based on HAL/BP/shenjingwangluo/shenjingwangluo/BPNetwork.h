#ifndef BPNETWORK_H
#define BPNETWORK_H
//BP神经网络头文件

#define ROW_X 2
#define COL_X 63
#define ROW_Y 1
#define COL_Y 63
#define LAYER 2

//神经元结构体
struct netnode
{
	double input,output,b,b_change,s1;//神经元的输入，输出，偏置
	double* w, *w_change;//神经元的权值
};


//数据预处理，转换到0-1或-1到1的区间
void minmax(float x[ROW_X][COL_X], float y[ROW_Y][COL_Y], float xminmax[ROW_X][2],float yminmax[ROW_Y][2], int mode1);

//输出恢复到原来的区间
float recoverOutput(float output,int j,int mode1);

//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//神经网络训练函数（总函数）
//输入参数：输入数据x，输出数据y，隐含层层数layer，每层节点数nodes，模式mode
void networkTrain(float x[ROW_X][COL_X], float y[ROW_Y][COL_Y], int layer, int nodes[], int mode1);


//神经网络建立结构节点函数
//输入参数，输入层节点个数num_x，隐含层层数layer，隐含层每层节点数nodes，以及输出层节点数num_y
int netSetup(int num_x,int layer,int nodes[],int num_y);


//神经网络初始化参数函数
//
int netInit(void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//神经网络求解函数模块
void netSolve(float x[ROW_X][COL_X], float y[ROW_Y][COL_Y],long epoch_max,float error_min,int mode1);

//清零累积更新
int clearChange(void);

//循环所有样本
float calAll(float x[ROW_X][COL_X], float y[ROW_Y][COL_Y], int mode1, long epoch);

//计算输入输出
int calInputAndOutPut(float x[ROW_X][COL_X], float y[ROW_Y][COL_Y],int k,int mode1);

//激励函数
double calInspirit(double input, double b, int mode1);

//计算误差
float calError(float y[ROW_Y][COL_Y], int k, int mode1, long epoch);

//保存参数
int savedata(int mode);

//计算反向更新
int bachward(float y[ROW_Y][COL_Y], int k,int mode1);

//计算更新
int updata(void);

//释放申请的内存
int freeNet(void);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//外部参数输出函数,(包括输入输出层参数)
int OutPut(void);
#endif