
MPU-6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c254  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028e8  0800c368  0800c368  0001c368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec50  0800ec50  000209f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec50  0800ec50  0001ec50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec58  0800ec58  000209f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ec58  0800ec58  0001ec58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec60  0800ec60  0001ec60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009f4  20000000  0800ec64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  200009f4  0800f658  000209f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010d4  0800f658  000210d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f73f  00000000  00000000  00020a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004247  00000000  00000000  0004015c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f46c  00000000  00000000  000443a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001150  00000000  00000000  00053810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001860  00000000  00000000  00054960  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001d1c8  00000000  00000000  000561c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001355b  00000000  00000000  00073388  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009683d  00000000  00000000  000868e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011d120  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d78  00000000  00000000  0011d19c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009f4 	.word	0x200009f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c34c 	.word	0x0800c34c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009f8 	.word	0x200009f8
 800014c:	0800c34c 	.word	0x0800c34c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <__aeabi_ldivmod>:
 800115c:	b97b      	cbnz	r3, 800117e <__aeabi_ldivmod+0x22>
 800115e:	b972      	cbnz	r2, 800117e <__aeabi_ldivmod+0x22>
 8001160:	2900      	cmp	r1, #0
 8001162:	bfbe      	ittt	lt
 8001164:	2000      	movlt	r0, #0
 8001166:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800116a:	e006      	blt.n	800117a <__aeabi_ldivmod+0x1e>
 800116c:	bf08      	it	eq
 800116e:	2800      	cmpeq	r0, #0
 8001170:	bf1c      	itt	ne
 8001172:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8001176:	f04f 30ff 	movne.w	r0, #4294967295
 800117a:	f000 b9bf 	b.w	80014fc <__aeabi_idiv0>
 800117e:	f1ad 0c08 	sub.w	ip, sp, #8
 8001182:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001186:	2900      	cmp	r1, #0
 8001188:	db09      	blt.n	800119e <__aeabi_ldivmod+0x42>
 800118a:	2b00      	cmp	r3, #0
 800118c:	db1a      	blt.n	80011c4 <__aeabi_ldivmod+0x68>
 800118e:	f000 f84d 	bl	800122c <__udivmoddi4>
 8001192:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800119a:	b004      	add	sp, #16
 800119c:	4770      	bx	lr
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db1b      	blt.n	80011e0 <__aeabi_ldivmod+0x84>
 80011a8:	f000 f840 	bl	800122c <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4240      	negs	r0, r0
 80011b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011bc:	4252      	negs	r2, r2
 80011be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011c2:	4770      	bx	lr
 80011c4:	4252      	negs	r2, r2
 80011c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ca:	f000 f82f 	bl	800122c <__udivmoddi4>
 80011ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011d6:	b004      	add	sp, #16
 80011d8:	4240      	negs	r0, r0
 80011da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011de:	4770      	bx	lr
 80011e0:	4252      	negs	r2, r2
 80011e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011e6:	f000 f821 	bl	800122c <__udivmoddi4>
 80011ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f2:	b004      	add	sp, #16
 80011f4:	4252      	negs	r2, r2
 80011f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011fa:	4770      	bx	lr

080011fc <__aeabi_uldivmod>:
 80011fc:	b953      	cbnz	r3, 8001214 <__aeabi_uldivmod+0x18>
 80011fe:	b94a      	cbnz	r2, 8001214 <__aeabi_uldivmod+0x18>
 8001200:	2900      	cmp	r1, #0
 8001202:	bf08      	it	eq
 8001204:	2800      	cmpeq	r0, #0
 8001206:	bf1c      	itt	ne
 8001208:	f04f 31ff 	movne.w	r1, #4294967295
 800120c:	f04f 30ff 	movne.w	r0, #4294967295
 8001210:	f000 b974 	b.w	80014fc <__aeabi_idiv0>
 8001214:	f1ad 0c08 	sub.w	ip, sp, #8
 8001218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800121c:	f000 f806 	bl	800122c <__udivmoddi4>
 8001220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001228:	b004      	add	sp, #16
 800122a:	4770      	bx	lr

0800122c <__udivmoddi4>:
 800122c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001230:	468c      	mov	ip, r1
 8001232:	4604      	mov	r4, r0
 8001234:	9e08      	ldr	r6, [sp, #32]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d14b      	bne.n	80012d2 <__udivmoddi4+0xa6>
 800123a:	428a      	cmp	r2, r1
 800123c:	4615      	mov	r5, r2
 800123e:	d967      	bls.n	8001310 <__udivmoddi4+0xe4>
 8001240:	fab2 f282 	clz	r2, r2
 8001244:	b14a      	cbz	r2, 800125a <__udivmoddi4+0x2e>
 8001246:	f1c2 0720 	rsb	r7, r2, #32
 800124a:	fa01 f302 	lsl.w	r3, r1, r2
 800124e:	fa20 f707 	lsr.w	r7, r0, r7
 8001252:	4095      	lsls	r5, r2
 8001254:	ea47 0c03 	orr.w	ip, r7, r3
 8001258:	4094      	lsls	r4, r2
 800125a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800125e:	fbbc f7fe 	udiv	r7, ip, lr
 8001262:	fa1f f885 	uxth.w	r8, r5
 8001266:	fb0e c317 	mls	r3, lr, r7, ip
 800126a:	fb07 f908 	mul.w	r9, r7, r8
 800126e:	0c21      	lsrs	r1, r4, #16
 8001270:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001274:	4599      	cmp	r9, r3
 8001276:	d909      	bls.n	800128c <__udivmoddi4+0x60>
 8001278:	18eb      	adds	r3, r5, r3
 800127a:	f107 31ff 	add.w	r1, r7, #4294967295
 800127e:	f080 811c 	bcs.w	80014ba <__udivmoddi4+0x28e>
 8001282:	4599      	cmp	r9, r3
 8001284:	f240 8119 	bls.w	80014ba <__udivmoddi4+0x28e>
 8001288:	3f02      	subs	r7, #2
 800128a:	442b      	add	r3, r5
 800128c:	eba3 0309 	sub.w	r3, r3, r9
 8001290:	fbb3 f0fe 	udiv	r0, r3, lr
 8001294:	fb0e 3310 	mls	r3, lr, r0, r3
 8001298:	fb00 f108 	mul.w	r1, r0, r8
 800129c:	b2a4      	uxth	r4, r4
 800129e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012a2:	42a1      	cmp	r1, r4
 80012a4:	d909      	bls.n	80012ba <__udivmoddi4+0x8e>
 80012a6:	192c      	adds	r4, r5, r4
 80012a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80012ac:	f080 8107 	bcs.w	80014be <__udivmoddi4+0x292>
 80012b0:	42a1      	cmp	r1, r4
 80012b2:	f240 8104 	bls.w	80014be <__udivmoddi4+0x292>
 80012b6:	3802      	subs	r0, #2
 80012b8:	442c      	add	r4, r5
 80012ba:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012be:	2700      	movs	r7, #0
 80012c0:	1a64      	subs	r4, r4, r1
 80012c2:	b11e      	cbz	r6, 80012cc <__udivmoddi4+0xa0>
 80012c4:	2300      	movs	r3, #0
 80012c6:	40d4      	lsrs	r4, r2
 80012c8:	e9c6 4300 	strd	r4, r3, [r6]
 80012cc:	4639      	mov	r1, r7
 80012ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d2:	428b      	cmp	r3, r1
 80012d4:	d909      	bls.n	80012ea <__udivmoddi4+0xbe>
 80012d6:	2e00      	cmp	r6, #0
 80012d8:	f000 80ec 	beq.w	80014b4 <__udivmoddi4+0x288>
 80012dc:	2700      	movs	r7, #0
 80012de:	e9c6 0100 	strd	r0, r1, [r6]
 80012e2:	4638      	mov	r0, r7
 80012e4:	4639      	mov	r1, r7
 80012e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ea:	fab3 f783 	clz	r7, r3
 80012ee:	2f00      	cmp	r7, #0
 80012f0:	d148      	bne.n	8001384 <__udivmoddi4+0x158>
 80012f2:	428b      	cmp	r3, r1
 80012f4:	d302      	bcc.n	80012fc <__udivmoddi4+0xd0>
 80012f6:	4282      	cmp	r2, r0
 80012f8:	f200 80fb 	bhi.w	80014f2 <__udivmoddi4+0x2c6>
 80012fc:	1a84      	subs	r4, r0, r2
 80012fe:	eb61 0303 	sbc.w	r3, r1, r3
 8001302:	2001      	movs	r0, #1
 8001304:	469c      	mov	ip, r3
 8001306:	2e00      	cmp	r6, #0
 8001308:	d0e0      	beq.n	80012cc <__udivmoddi4+0xa0>
 800130a:	e9c6 4c00 	strd	r4, ip, [r6]
 800130e:	e7dd      	b.n	80012cc <__udivmoddi4+0xa0>
 8001310:	b902      	cbnz	r2, 8001314 <__udivmoddi4+0xe8>
 8001312:	deff      	udf	#255	; 0xff
 8001314:	fab2 f282 	clz	r2, r2
 8001318:	2a00      	cmp	r2, #0
 800131a:	f040 808f 	bne.w	800143c <__udivmoddi4+0x210>
 800131e:	2701      	movs	r7, #1
 8001320:	1b49      	subs	r1, r1, r5
 8001322:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001326:	fa1f f985 	uxth.w	r9, r5
 800132a:	fbb1 fef8 	udiv	lr, r1, r8
 800132e:	fb08 111e 	mls	r1, r8, lr, r1
 8001332:	fb09 f00e 	mul.w	r0, r9, lr
 8001336:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800133a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 800133e:	4298      	cmp	r0, r3
 8001340:	d907      	bls.n	8001352 <__udivmoddi4+0x126>
 8001342:	18eb      	adds	r3, r5, r3
 8001344:	f10e 31ff 	add.w	r1, lr, #4294967295
 8001348:	d202      	bcs.n	8001350 <__udivmoddi4+0x124>
 800134a:	4298      	cmp	r0, r3
 800134c:	f200 80cd 	bhi.w	80014ea <__udivmoddi4+0x2be>
 8001350:	468e      	mov	lr, r1
 8001352:	1a1b      	subs	r3, r3, r0
 8001354:	fbb3 f0f8 	udiv	r0, r3, r8
 8001358:	fb08 3310 	mls	r3, r8, r0, r3
 800135c:	fb09 f900 	mul.w	r9, r9, r0
 8001360:	b2a4      	uxth	r4, r4
 8001362:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001366:	45a1      	cmp	r9, r4
 8001368:	d907      	bls.n	800137a <__udivmoddi4+0x14e>
 800136a:	192c      	adds	r4, r5, r4
 800136c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001370:	d202      	bcs.n	8001378 <__udivmoddi4+0x14c>
 8001372:	45a1      	cmp	r9, r4
 8001374:	f200 80b6 	bhi.w	80014e4 <__udivmoddi4+0x2b8>
 8001378:	4618      	mov	r0, r3
 800137a:	eba4 0409 	sub.w	r4, r4, r9
 800137e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001382:	e79e      	b.n	80012c2 <__udivmoddi4+0x96>
 8001384:	f1c7 0520 	rsb	r5, r7, #32
 8001388:	40bb      	lsls	r3, r7
 800138a:	fa22 fc05 	lsr.w	ip, r2, r5
 800138e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001392:	fa21 f405 	lsr.w	r4, r1, r5
 8001396:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800139a:	fbb4 f9fe 	udiv	r9, r4, lr
 800139e:	fa1f f88c 	uxth.w	r8, ip
 80013a2:	fb0e 4419 	mls	r4, lr, r9, r4
 80013a6:	fa20 f305 	lsr.w	r3, r0, r5
 80013aa:	40b9      	lsls	r1, r7
 80013ac:	fb09 fa08 	mul.w	sl, r9, r8
 80013b0:	4319      	orrs	r1, r3
 80013b2:	0c0b      	lsrs	r3, r1, #16
 80013b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013b8:	45a2      	cmp	sl, r4
 80013ba:	fa02 f207 	lsl.w	r2, r2, r7
 80013be:	fa00 f307 	lsl.w	r3, r0, r7
 80013c2:	d90b      	bls.n	80013dc <__udivmoddi4+0x1b0>
 80013c4:	eb1c 0404 	adds.w	r4, ip, r4
 80013c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80013cc:	f080 8088 	bcs.w	80014e0 <__udivmoddi4+0x2b4>
 80013d0:	45a2      	cmp	sl, r4
 80013d2:	f240 8085 	bls.w	80014e0 <__udivmoddi4+0x2b4>
 80013d6:	f1a9 0902 	sub.w	r9, r9, #2
 80013da:	4464      	add	r4, ip
 80013dc:	eba4 040a 	sub.w	r4, r4, sl
 80013e0:	fbb4 f0fe 	udiv	r0, r4, lr
 80013e4:	fb0e 4410 	mls	r4, lr, r0, r4
 80013e8:	fb00 fa08 	mul.w	sl, r0, r8
 80013ec:	b289      	uxth	r1, r1
 80013ee:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80013f2:	45a2      	cmp	sl, r4
 80013f4:	d908      	bls.n	8001408 <__udivmoddi4+0x1dc>
 80013f6:	eb1c 0404 	adds.w	r4, ip, r4
 80013fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80013fe:	d26b      	bcs.n	80014d8 <__udivmoddi4+0x2ac>
 8001400:	45a2      	cmp	sl, r4
 8001402:	d969      	bls.n	80014d8 <__udivmoddi4+0x2ac>
 8001404:	3802      	subs	r0, #2
 8001406:	4464      	add	r4, ip
 8001408:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800140c:	fba0 8902 	umull	r8, r9, r0, r2
 8001410:	eba4 040a 	sub.w	r4, r4, sl
 8001414:	454c      	cmp	r4, r9
 8001416:	4641      	mov	r1, r8
 8001418:	46ce      	mov	lr, r9
 800141a:	d354      	bcc.n	80014c6 <__udivmoddi4+0x29a>
 800141c:	d051      	beq.n	80014c2 <__udivmoddi4+0x296>
 800141e:	2e00      	cmp	r6, #0
 8001420:	d069      	beq.n	80014f6 <__udivmoddi4+0x2ca>
 8001422:	1a5a      	subs	r2, r3, r1
 8001424:	eb64 040e 	sbc.w	r4, r4, lr
 8001428:	fa04 f505 	lsl.w	r5, r4, r5
 800142c:	fa22 f307 	lsr.w	r3, r2, r7
 8001430:	40fc      	lsrs	r4, r7
 8001432:	431d      	orrs	r5, r3
 8001434:	e9c6 5400 	strd	r5, r4, [r6]
 8001438:	2700      	movs	r7, #0
 800143a:	e747      	b.n	80012cc <__udivmoddi4+0xa0>
 800143c:	4095      	lsls	r5, r2
 800143e:	f1c2 0320 	rsb	r3, r2, #32
 8001442:	fa21 f003 	lsr.w	r0, r1, r3
 8001446:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800144a:	fbb0 f7f8 	udiv	r7, r0, r8
 800144e:	fa1f f985 	uxth.w	r9, r5
 8001452:	fb08 0017 	mls	r0, r8, r7, r0
 8001456:	fa24 f303 	lsr.w	r3, r4, r3
 800145a:	4091      	lsls	r1, r2
 800145c:	fb07 fc09 	mul.w	ip, r7, r9
 8001460:	430b      	orrs	r3, r1
 8001462:	0c19      	lsrs	r1, r3, #16
 8001464:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001468:	458c      	cmp	ip, r1
 800146a:	fa04 f402 	lsl.w	r4, r4, r2
 800146e:	d907      	bls.n	8001480 <__udivmoddi4+0x254>
 8001470:	1869      	adds	r1, r5, r1
 8001472:	f107 30ff 	add.w	r0, r7, #4294967295
 8001476:	d231      	bcs.n	80014dc <__udivmoddi4+0x2b0>
 8001478:	458c      	cmp	ip, r1
 800147a:	d92f      	bls.n	80014dc <__udivmoddi4+0x2b0>
 800147c:	3f02      	subs	r7, #2
 800147e:	4429      	add	r1, r5
 8001480:	eba1 010c 	sub.w	r1, r1, ip
 8001484:	fbb1 f0f8 	udiv	r0, r1, r8
 8001488:	fb08 1c10 	mls	ip, r8, r0, r1
 800148c:	fb00 fe09 	mul.w	lr, r0, r9
 8001490:	b299      	uxth	r1, r3
 8001492:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001496:	458e      	cmp	lr, r1
 8001498:	d907      	bls.n	80014aa <__udivmoddi4+0x27e>
 800149a:	1869      	adds	r1, r5, r1
 800149c:	f100 33ff 	add.w	r3, r0, #4294967295
 80014a0:	d218      	bcs.n	80014d4 <__udivmoddi4+0x2a8>
 80014a2:	458e      	cmp	lr, r1
 80014a4:	d916      	bls.n	80014d4 <__udivmoddi4+0x2a8>
 80014a6:	3802      	subs	r0, #2
 80014a8:	4429      	add	r1, r5
 80014aa:	eba1 010e 	sub.w	r1, r1, lr
 80014ae:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80014b2:	e73a      	b.n	800132a <__udivmoddi4+0xfe>
 80014b4:	4637      	mov	r7, r6
 80014b6:	4630      	mov	r0, r6
 80014b8:	e708      	b.n	80012cc <__udivmoddi4+0xa0>
 80014ba:	460f      	mov	r7, r1
 80014bc:	e6e6      	b.n	800128c <__udivmoddi4+0x60>
 80014be:	4618      	mov	r0, r3
 80014c0:	e6fb      	b.n	80012ba <__udivmoddi4+0x8e>
 80014c2:	4543      	cmp	r3, r8
 80014c4:	d2ab      	bcs.n	800141e <__udivmoddi4+0x1f2>
 80014c6:	ebb8 0102 	subs.w	r1, r8, r2
 80014ca:	eb69 020c 	sbc.w	r2, r9, ip
 80014ce:	3801      	subs	r0, #1
 80014d0:	4696      	mov	lr, r2
 80014d2:	e7a4      	b.n	800141e <__udivmoddi4+0x1f2>
 80014d4:	4618      	mov	r0, r3
 80014d6:	e7e8      	b.n	80014aa <__udivmoddi4+0x27e>
 80014d8:	4608      	mov	r0, r1
 80014da:	e795      	b.n	8001408 <__udivmoddi4+0x1dc>
 80014dc:	4607      	mov	r7, r0
 80014de:	e7cf      	b.n	8001480 <__udivmoddi4+0x254>
 80014e0:	4681      	mov	r9, r0
 80014e2:	e77b      	b.n	80013dc <__udivmoddi4+0x1b0>
 80014e4:	3802      	subs	r0, #2
 80014e6:	442c      	add	r4, r5
 80014e8:	e747      	b.n	800137a <__udivmoddi4+0x14e>
 80014ea:	f1ae 0e02 	sub.w	lr, lr, #2
 80014ee:	442b      	add	r3, r5
 80014f0:	e72f      	b.n	8001352 <__udivmoddi4+0x126>
 80014f2:	4638      	mov	r0, r7
 80014f4:	e707      	b.n	8001306 <__udivmoddi4+0xda>
 80014f6:	4637      	mov	r7, r6
 80014f8:	e6e8      	b.n	80012cc <__udivmoddi4+0xa0>
 80014fa:	bf00      	nop

080014fc <__aeabi_idiv0>:
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 8001500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8001504:	f04f 0801 	mov.w	r8, #1
 8001508:	ad04      	add	r5, sp, #16
    data[1] = 0;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 800150a:	4cc6      	ldr	r4, [pc, #792]	; (8001824 <get_st_biases+0x324>)
    data[0] = 0x01;
 800150c:	f825 8d0c 	strh.w	r8, [r5, #-12]!
{
 8001510:	4607      	mov	r7, r0
 8001512:	460e      	mov	r6, r1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8001514:	e9d4 1000 	ldrd	r1, r0, [r4]
{
 8001518:	4691      	mov	r9, r2
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 800151a:	462b      	mov	r3, r5
 800151c:	2202      	movs	r2, #2
 800151e:	7c89      	ldrb	r1, [r1, #18]
 8001520:	7800      	ldrb	r0, [r0, #0]
 8001522:	f001 ff93 	bl	800344c <MPU_Write_Len>
 8001526:	4682      	mov	sl, r0
 8001528:	b120      	cbz	r0, 8001534 <get_st_biases+0x34>
        return -1;
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
    else
        accel[2] += 65536L;
#endif

    return 0;
}
 800152e:	b004      	add	sp, #16
 8001530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    delay_ms(200);
 8001534:	20c8      	movs	r0, #200	; 0xc8
 8001536:	f002 ffab 	bl	8004490 <HAL_Delay>
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800153a:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0;
 800153e:	f88d a004 	strb.w	sl, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8001542:	462b      	mov	r3, r5
 8001544:	4642      	mov	r2, r8
 8001546:	7bc9      	ldrb	r1, [r1, #15]
 8001548:	7800      	ldrb	r0, [r0, #0]
 800154a:	f001 ff7f 	bl	800344c <MPU_Write_Len>
 800154e:	2800      	cmp	r0, #0
 8001550:	d1eb      	bne.n	800152a <get_st_biases+0x2a>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8001552:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001556:	462b      	mov	r3, r5
 8001558:	4642      	mov	r2, r8
 800155a:	7949      	ldrb	r1, [r1, #5]
 800155c:	7800      	ldrb	r0, [r0, #0]
 800155e:	f001 ff75 	bl	800344c <MPU_Write_Len>
 8001562:	2800      	cmp	r0, #0
 8001564:	d1e1      	bne.n	800152a <get_st_biases+0x2a>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001566:	e9d4 1000 	ldrd	r1, r0, [r4]
 800156a:	462b      	mov	r3, r5
 800156c:	4642      	mov	r2, r8
 800156e:	7c89      	ldrb	r1, [r1, #18]
 8001570:	7800      	ldrb	r0, [r0, #0]
 8001572:	f001 ff6b 	bl	800344c <MPU_Write_Len>
 8001576:	2800      	cmp	r0, #0
 8001578:	d1d7      	bne.n	800152a <get_st_biases+0x2a>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 800157a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800157e:	462b      	mov	r3, r5
 8001580:	4642      	mov	r2, r8
 8001582:	7dc9      	ldrb	r1, [r1, #23]
 8001584:	7800      	ldrb	r0, [r0, #0]
 8001586:	f001 ff61 	bl	800344c <MPU_Write_Len>
 800158a:	2800      	cmp	r0, #0
 800158c:	d1cd      	bne.n	800152a <get_st_biases+0x2a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800158e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001592:	462b      	mov	r3, r5
 8001594:	4642      	mov	r2, r8
 8001596:	7909      	ldrb	r1, [r1, #4]
 8001598:	7800      	ldrb	r0, [r0, #0]
 800159a:	f001 ff57 	bl	800344c <MPU_Write_Len>
 800159e:	2800      	cmp	r0, #0
 80015a0:	d1c3      	bne.n	800152a <get_st_biases+0x2a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80015a2:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 80015a6:	230c      	movs	r3, #12
 80015a8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80015ac:	4642      	mov	r2, r8
 80015ae:	462b      	mov	r3, r5
 80015b0:	7909      	ldrb	r1, [r1, #4]
 80015b2:	7800      	ldrb	r0, [r0, #0]
 80015b4:	f001 ff4a 	bl	800344c <MPU_Write_Len>
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d1b6      	bne.n	800152a <get_st_biases+0x2a>
    delay_ms(15);
 80015bc:	200f      	movs	r0, #15
 80015be:	f002 ff67 	bl	8004490 <HAL_Delay>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 80015c2:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = st.test->reg_lpf;
 80015c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 80015c8:	4642      	mov	r2, r8
    data[0] = st.test->reg_lpf;
 80015ca:	7a5b      	ldrb	r3, [r3, #9]
 80015cc:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 80015d0:	7889      	ldrb	r1, [r1, #2]
 80015d2:	462b      	mov	r3, r5
 80015d4:	7800      	ldrb	r0, [r0, #0]
 80015d6:	f001 ff39 	bl	800344c <MPU_Write_Len>
 80015da:	2800      	cmp	r0, #0
 80015dc:	d1a5      	bne.n	800152a <get_st_biases+0x2a>
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 80015de:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = st.test->reg_rate_div;
 80015e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 80015e4:	4642      	mov	r2, r8
    data[0] = st.test->reg_rate_div;
 80015e6:	7a1b      	ldrb	r3, [r3, #8]
 80015e8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 80015ec:	7849      	ldrb	r1, [r1, #1]
 80015ee:	462b      	mov	r3, r5
 80015f0:	7800      	ldrb	r0, [r0, #0]
 80015f2:	f001 ff2b 	bl	800344c <MPU_Write_Len>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d197      	bne.n	800152a <get_st_biases+0x2a>
 80015fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015fc:	7a9b      	ldrb	r3, [r3, #10]
    if (hw_test)
 80015fe:	f1b9 0f00 	cmp.w	r9, #0
 8001602:	d001      	beq.n	8001608 <get_st_biases+0x108>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8001604:	f063 031f 	orn	r3, r3, #31
        data[0] = st.test->reg_gyro_fsr;
 8001608:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 800160c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001610:	462b      	mov	r3, r5
 8001612:	2201      	movs	r2, #1
 8001614:	7989      	ldrb	r1, [r1, #6]
 8001616:	7800      	ldrb	r0, [r0, #0]
 8001618:	f001 ff18 	bl	800344c <MPU_Write_Len>
 800161c:	2800      	cmp	r0, #0
 800161e:	d184      	bne.n	800152a <get_st_biases+0x2a>
    if (hw_test)
 8001620:	f1b9 0f00 	cmp.w	r9, #0
 8001624:	f000 80fc 	beq.w	8001820 <get_st_biases+0x320>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 8001628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800162a:	7adb      	ldrb	r3, [r3, #11]
 800162c:	f063 031f 	orn	r3, r3, #31
        data[0] = test.reg_accel_fsr;
 8001630:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 8001634:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001638:	462b      	mov	r3, r5
 800163a:	2201      	movs	r2, #1
 800163c:	79c9      	ldrb	r1, [r1, #7]
 800163e:	7800      	ldrb	r0, [r0, #0]
 8001640:	f001 ff04 	bl	800344c <MPU_Write_Len>
 8001644:	2800      	cmp	r0, #0
 8001646:	f47f af70 	bne.w	800152a <get_st_biases+0x2a>
    if (hw_test)
 800164a:	f1b9 0f00 	cmp.w	r9, #0
 800164e:	d002      	beq.n	8001656 <get_st_biases+0x156>
        delay_ms(200);
 8001650:	20c8      	movs	r0, #200	; 0xc8
 8001652:	f002 ff1d 	bl	8004490 <HAL_Delay>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8001656:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_FIFO_EN;
 800165a:	2340      	movs	r3, #64	; 0x40
 800165c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8001660:	2201      	movs	r2, #1
 8001662:	462b      	mov	r3, r5
 8001664:	7909      	ldrb	r1, [r1, #4]
 8001666:	7800      	ldrb	r0, [r0, #0]
 8001668:	f001 fef0 	bl	800344c <MPU_Write_Len>
 800166c:	2800      	cmp	r0, #0
 800166e:	f47f af5c 	bne.w	800152a <get_st_biases+0x2a>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8001672:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 8001676:	2378      	movs	r3, #120	; 0x78
 8001678:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800167c:	2201      	movs	r2, #1
 800167e:	462b      	mov	r3, r5
 8001680:	7949      	ldrb	r1, [r1, #5]
 8001682:	7800      	ldrb	r0, [r0, #0]
 8001684:	f001 fee2 	bl	800344c <MPU_Write_Len>
 8001688:	4680      	mov	r8, r0
 800168a:	2800      	cmp	r0, #0
 800168c:	f47f af4d 	bne.w	800152a <get_st_biases+0x2a>
    delay_ms(test.wait_ms);
 8001690:	2032      	movs	r0, #50	; 0x32
 8001692:	f002 fefd 	bl	8004490 <HAL_Delay>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8001696:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0;
 800169a:	f88d 8004 	strb.w	r8, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800169e:	462b      	mov	r3, r5
 80016a0:	2201      	movs	r2, #1
 80016a2:	7949      	ldrb	r1, [r1, #5]
 80016a4:	7800      	ldrb	r0, [r0, #0]
 80016a6:	f001 fed1 	bl	800344c <MPU_Write_Len>
 80016aa:	2800      	cmp	r0, #0
 80016ac:	f47f af3d 	bne.w	800152a <get_st_biases+0x2a>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 80016b0:	e9d4 1000 	ldrd	r1, r0, [r4]
 80016b4:	462b      	mov	r3, r5
 80016b6:	2202      	movs	r2, #2
 80016b8:	7a89      	ldrb	r1, [r1, #10]
 80016ba:	7800      	ldrb	r0, [r0, #0]
 80016bc:	f001 fed8 	bl	8003470 <MPU_Read_Len>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	f47f af32 	bne.w	800152a <get_st_biases+0x2a>
    fifo_count = (data[0] << 8) | data[1];
 80016c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80016ca:	f89d 9005 	ldrb.w	r9, [sp, #5]
    for (ii = 0; ii < packet_count; ii++) {
 80016ce:	4680      	mov	r8, r0
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 80016d0:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
 80016d4:	230c      	movs	r3, #12
 80016d6:	fbb9 f9f3 	udiv	r9, r9, r3
    gyro[0] = gyro[1] = gyro[2] = 0;
 80016da:	e9c7 0001 	strd	r0, r0, [r7, #4]
 80016de:	6038      	str	r0, [r7, #0]
    accel[0] = accel[1] = accel[2] = 0;
 80016e0:	e9c6 0001 	strd	r0, r0, [r6, #4]
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 80016e4:	fa5f f989 	uxtb.w	r9, r9
    accel[0] = accel[1] = accel[2] = 0;
 80016e8:	6030      	str	r0, [r6, #0]
    for (ii = 0; ii < packet_count; ii++) {
 80016ea:	fa5f f388 	uxtb.w	r3, r8
 80016ee:	454b      	cmp	r3, r9
 80016f0:	f0c0 809a 	bcc.w	8001828 <get_st_biases+0x328>
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 80016f4:	2500      	movs	r5, #0
 80016f6:	6839      	ldr	r1, [r7, #0]
 80016f8:	fa5f f489 	uxtb.w	r4, r9
 80016fc:	17cb      	asrs	r3, r1, #31
 80016fe:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8001702:	2283      	movs	r2, #131	; 0x83
 8001704:	2300      	movs	r3, #0
 8001706:	0408      	lsls	r0, r1, #16
 8001708:	ea4c 4111 	orr.w	r1, ip, r1, lsr #16
 800170c:	f7ff fd26 	bl	800115c <__aeabi_ldivmod>
 8001710:	4622      	mov	r2, r4
 8001712:	462b      	mov	r3, r5
 8001714:	f7ff fd22 	bl	800115c <__aeabi_ldivmod>
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 8001718:	6879      	ldr	r1, [r7, #4]
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 800171a:	6038      	str	r0, [r7, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 800171c:	17cb      	asrs	r3, r1, #31
 800171e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8001722:	2283      	movs	r2, #131	; 0x83
 8001724:	2300      	movs	r3, #0
 8001726:	0408      	lsls	r0, r1, #16
 8001728:	ea4c 4111 	orr.w	r1, ip, r1, lsr #16
 800172c:	f7ff fd16 	bl	800115c <__aeabi_ldivmod>
 8001730:	4622      	mov	r2, r4
 8001732:	462b      	mov	r3, r5
 8001734:	f7ff fd12 	bl	800115c <__aeabi_ldivmod>
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 8001738:	68b9      	ldr	r1, [r7, #8]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 800173a:	6078      	str	r0, [r7, #4]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 800173c:	17cb      	asrs	r3, r1, #31
 800173e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8001742:	2283      	movs	r2, #131	; 0x83
 8001744:	2300      	movs	r3, #0
 8001746:	0408      	lsls	r0, r1, #16
 8001748:	ea4c 4111 	orr.w	r1, ip, r1, lsr #16
 800174c:	f7ff fd06 	bl	800115c <__aeabi_ldivmod>
 8001750:	4622      	mov	r2, r4
 8001752:	462b      	mov	r3, r5
 8001754:	f7ff fd02 	bl	800115c <__aeabi_ldivmod>
 8001758:	60b8      	str	r0, [r7, #8]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 800175a:	6833      	ldr	r3, [r6, #0]
 800175c:	17d9      	asrs	r1, r3, #31
 800175e:	ea4f 4803 	mov.w	r8, r3, lsl #16
 8001762:	040a      	lsls	r2, r1, #16
 8001764:	ea42 4913 	orr.w	r9, r2, r3, lsr #16
 8001768:	f1b8 0f00 	cmp.w	r8, #0
 800176c:	f179 0300 	sbcs.w	r3, r9, #0
 8001770:	da06      	bge.n	8001780 <get_st_biases+0x280>
 8001772:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001776:	2300      	movs	r3, #0
 8001778:	eb18 0802 	adds.w	r8, r8, r2
 800177c:	eb49 0903 	adc.w	r9, r9, r3
 8001780:	ea4f 20d8 	mov.w	r0, r8, lsr #11
 8001784:	4622      	mov	r2, r4
 8001786:	462b      	mov	r3, r5
 8001788:	ea40 5049 	orr.w	r0, r0, r9, lsl #21
 800178c:	ea4f 21e9 	mov.w	r1, r9, asr #11
 8001790:	f7ff fce4 	bl	800115c <__aeabi_ldivmod>
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8001794:	6873      	ldr	r3, [r6, #4]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 8001796:	6030      	str	r0, [r6, #0]
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8001798:	17d9      	asrs	r1, r3, #31
 800179a:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800179e:	040a      	lsls	r2, r1, #16
 80017a0:	ea42 4913 	orr.w	r9, r2, r3, lsr #16
 80017a4:	f1b8 0f00 	cmp.w	r8, #0
 80017a8:	f179 0300 	sbcs.w	r3, r9, #0
 80017ac:	da06      	bge.n	80017bc <get_st_biases+0x2bc>
 80017ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80017b2:	2300      	movs	r3, #0
 80017b4:	eb18 0802 	adds.w	r8, r8, r2
 80017b8:	eb49 0903 	adc.w	r9, r9, r3
 80017bc:	ea4f 20d8 	mov.w	r0, r8, lsr #11
 80017c0:	4622      	mov	r2, r4
 80017c2:	462b      	mov	r3, r5
 80017c4:	ea40 5049 	orr.w	r0, r0, r9, lsl #21
 80017c8:	ea4f 21e9 	mov.w	r1, r9, asr #11
 80017cc:	f7ff fcc6 	bl	800115c <__aeabi_ldivmod>
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 80017d0:	68b3      	ldr	r3, [r6, #8]
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 80017d2:	6070      	str	r0, [r6, #4]
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 80017d4:	17d9      	asrs	r1, r3, #31
 80017d6:	ea4f 4803 	mov.w	r8, r3, lsl #16
 80017da:	040a      	lsls	r2, r1, #16
 80017dc:	ea42 4913 	orr.w	r9, r2, r3, lsr #16
 80017e0:	f1b8 0f00 	cmp.w	r8, #0
 80017e4:	f179 0300 	sbcs.w	r3, r9, #0
 80017e8:	da06      	bge.n	80017f8 <get_st_biases+0x2f8>
 80017ea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80017ee:	2300      	movs	r3, #0
 80017f0:	eb18 0802 	adds.w	r8, r8, r2
 80017f4:	eb49 0903 	adc.w	r9, r9, r3
 80017f8:	ea4f 20d8 	mov.w	r0, r8, lsr #11
 80017fc:	4622      	mov	r2, r4
 80017fe:	462b      	mov	r3, r5
 8001800:	ea40 5049 	orr.w	r0, r0, r9, lsl #21
 8001804:	ea4f 21e9 	mov.w	r1, r9, asr #11
 8001808:	f7ff fca8 	bl	800115c <__aeabi_ldivmod>
    if (accel[2] > 0L)
 800180c:	2800      	cmp	r0, #0
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 800180e:	60b0      	str	r0, [r6, #8]
        accel[2] -= 65536L;
 8001810:	bfcc      	ite	gt
 8001812:	f5a0 3080 	subgt.w	r0, r0, #65536	; 0x10000
        accel[2] += 65536L;
 8001816:	f500 3080 	addle.w	r0, r0, #65536	; 0x10000
 800181a:	60b0      	str	r0, [r6, #8]
    return 0;
 800181c:	2000      	movs	r0, #0
 800181e:	e686      	b.n	800152e <get_st_biases+0x2e>
        data[0] = test.reg_accel_fsr;
 8001820:	2318      	movs	r3, #24
 8001822:	e705      	b.n	8001630 <get_st_biases+0x130>
 8001824:	2000000c 	.word	0x2000000c
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8001828:	e9d4 1000 	ldrd	r1, r0, [r4]
 800182c:	462b      	mov	r3, r5
 800182e:	220c      	movs	r2, #12
 8001830:	7ac9      	ldrb	r1, [r1, #11]
 8001832:	7800      	ldrb	r0, [r0, #0]
 8001834:	f001 fe1c 	bl	8003470 <MPU_Read_Len>
 8001838:	f108 0801 	add.w	r8, r8, #1
 800183c:	2800      	cmp	r0, #0
 800183e:	f47f ae74 	bne.w	800152a <get_st_biases+0x2a>
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8001842:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001846:	f89d 2007 	ldrb.w	r2, [sp, #7]
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 800184a:	f89d 1008 	ldrb.w	r1, [sp, #8]
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 800184e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8001852:	f89d 3009 	ldrb.w	r3, [sp, #9]
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8001856:	f89d 0004 	ldrb.w	r0, [sp, #4]
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 800185a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 800185e:	f89d 1005 	ldrb.w	r1, [sp, #5]
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8001862:	b212      	sxth	r2, r2
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8001864:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        accel[0] += (long)accel_cur[0];
 8001868:	6830      	ldr	r0, [r6, #0]
 800186a:	b209      	sxth	r1, r1
 800186c:	4401      	add	r1, r0
 800186e:	6031      	str	r1, [r6, #0]
        accel[1] += (long)accel_cur[1];
 8001870:	6871      	ldr	r1, [r6, #4]
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8001872:	b21b      	sxth	r3, r3
        accel[1] += (long)accel_cur[1];
 8001874:	440a      	add	r2, r1
 8001876:	6072      	str	r2, [r6, #4]
        accel[2] += (long)accel_cur[2];
 8001878:	68b2      	ldr	r2, [r6, #8]
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 800187a:	f89d 100e 	ldrb.w	r1, [sp, #14]
        accel[2] += (long)accel_cur[2];
 800187e:	4413      	add	r3, r2
 8001880:	60b3      	str	r3, [r6, #8]
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8001882:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001886:	f89d 300c 	ldrb.w	r3, [sp, #12]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 800188a:	f89d 000a 	ldrb.w	r0, [sp, #10]
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 800188e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8001892:	f89d 300f 	ldrb.w	r3, [sp, #15]
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8001896:	b212      	sxth	r2, r2
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8001898:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 800189c:	f89d 100b 	ldrb.w	r1, [sp, #11]
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 80018a0:	b21b      	sxth	r3, r3
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 80018a2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        gyro[0] += (long)gyro_cur[0];
 80018a6:	6838      	ldr	r0, [r7, #0]
 80018a8:	b209      	sxth	r1, r1
 80018aa:	4401      	add	r1, r0
 80018ac:	6039      	str	r1, [r7, #0]
        gyro[1] += (long)gyro_cur[1];
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	440a      	add	r2, r1
 80018b2:	607a      	str	r2, [r7, #4]
        gyro[2] += (long)gyro_cur[2];
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	4413      	add	r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	e716      	b.n	80016ea <get_st_biases+0x1ea>

080018bc <set_int_enable>:
{
 80018bc:	b513      	push	{r0, r1, r4, lr}
    if (st.chip_cfg.dmp_on) {
 80018be:	4c13      	ldr	r4, [pc, #76]	; (800190c <set_int_enable+0x50>)
 80018c0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80018c4:	b193      	cbz	r3, 80018ec <set_int_enable+0x30>
        if (enable)
 80018c6:	b1c0      	cbz	r0, 80018fa <set_int_enable+0x3e>
            tmp = BIT_DMP_INT_EN;
 80018c8:	2302      	movs	r3, #2
            tmp = BIT_DATA_RDY_EN;
 80018ca:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80018ce:	e9d4 1000 	ldrd	r1, r0, [r4]
 80018d2:	f10d 0307 	add.w	r3, sp, #7
 80018d6:	2201      	movs	r2, #1
 80018d8:	7bc9      	ldrb	r1, [r1, #15]
 80018da:	7800      	ldrb	r0, [r0, #0]
 80018dc:	f001 fdb6 	bl	800344c <MPU_Write_Len>
 80018e0:	b970      	cbnz	r0, 8001900 <set_int_enable+0x44>
        st.chip_cfg.int_enable = tmp;
 80018e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80018e6:	7463      	strb	r3, [r4, #17]
}
 80018e8:	b002      	add	sp, #8
 80018ea:	bd10      	pop	{r4, pc}
        if (!st.chip_cfg.sensors)
 80018ec:	7aa2      	ldrb	r2, [r4, #10]
 80018ee:	b13a      	cbz	r2, 8001900 <set_int_enable+0x44>
        if (enable && st.chip_cfg.int_enable)
 80018f0:	b118      	cbz	r0, 80018fa <set_int_enable+0x3e>
 80018f2:	7c62      	ldrb	r2, [r4, #17]
 80018f4:	b93a      	cbnz	r2, 8001906 <set_int_enable+0x4a>
            tmp = BIT_DATA_RDY_EN;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e7e7      	b.n	80018ca <set_int_enable+0xe>
            tmp = 0x00;
 80018fa:	f88d 0007 	strb.w	r0, [sp, #7]
 80018fe:	e7e6      	b.n	80018ce <set_int_enable+0x12>
            return -1;
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	e7f0      	b.n	80018e8 <set_int_enable+0x2c>
            return 0;
 8001906:	4618      	mov	r0, r3
 8001908:	e7ee      	b.n	80018e8 <set_int_enable+0x2c>
 800190a:	bf00      	nop
 800190c:	2000000c 	.word	0x2000000c

08001910 <mpu_reset_fifo>:
{
 8001910:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!(st.chip_cfg.sensors))
 8001912:	4c51      	ldr	r4, [pc, #324]	; (8001a58 <mpu_reset_fifo+0x148>)
 8001914:	7aa3      	ldrb	r3, [r4, #10]
 8001916:	b91b      	cbnz	r3, 8001920 <mpu_reset_fifo+0x10>
        return -1;
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
}
 800191c:	b003      	add	sp, #12
 800191e:	bd30      	pop	{r4, r5, pc}
    data = 0;
 8001920:	2300      	movs	r3, #0
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001922:	e9d4 1000 	ldrd	r1, r0, [r4]
    data = 0;
 8001926:	ad02      	add	r5, sp, #8
 8001928:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800192c:	462b      	mov	r3, r5
 800192e:	2201      	movs	r2, #1
 8001930:	7bc9      	ldrb	r1, [r1, #15]
 8001932:	7800      	ldrb	r0, [r0, #0]
 8001934:	f001 fd8a 	bl	800344c <MPU_Write_Len>
 8001938:	2800      	cmp	r0, #0
 800193a:	d1ed      	bne.n	8001918 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800193c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001940:	462b      	mov	r3, r5
 8001942:	2201      	movs	r2, #1
 8001944:	7949      	ldrb	r1, [r1, #5]
 8001946:	7800      	ldrb	r0, [r0, #0]
 8001948:	f001 fd80 	bl	800344c <MPU_Write_Len>
 800194c:	2800      	cmp	r0, #0
 800194e:	d1e3      	bne.n	8001918 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001950:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001954:	462b      	mov	r3, r5
 8001956:	2201      	movs	r2, #1
 8001958:	7909      	ldrb	r1, [r1, #4]
 800195a:	7800      	ldrb	r0, [r0, #0]
 800195c:	f001 fd76 	bl	800344c <MPU_Write_Len>
 8001960:	2800      	cmp	r0, #0
 8001962:	d1d9      	bne.n	8001918 <mpu_reset_fifo+0x8>
 8001964:	6863      	ldr	r3, [r4, #4]
 8001966:	7818      	ldrb	r0, [r3, #0]
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	7919      	ldrb	r1, [r3, #4]
    if (st.chip_cfg.dmp_on) {
 800196c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001970:	2b00      	cmp	r3, #0
 8001972:	d03c      	beq.n	80019ee <mpu_reset_fifo+0xde>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001974:	230c      	movs	r3, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001976:	2201      	movs	r2, #1
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001978:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800197c:	462b      	mov	r3, r5
 800197e:	f001 fd65 	bl	800344c <MPU_Write_Len>
 8001982:	2800      	cmp	r0, #0
 8001984:	d1c8      	bne.n	8001918 <mpu_reset_fifo+0x8>
        delay_ms(50);
 8001986:	2032      	movs	r0, #50	; 0x32
 8001988:	f002 fd82 	bl	8004490 <HAL_Delay>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800198c:	e9d4 1000 	ldrd	r1, r0, [r4]
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8001990:	23c0      	movs	r3, #192	; 0xc0
 8001992:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001996:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001998:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800199a:	07da      	lsls	r2, r3, #31
            data |= BIT_AUX_IF_EN;
 800199c:	bf44      	itt	mi
 800199e:	23e0      	movmi	r3, #224	; 0xe0
 80019a0:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80019a4:	2201      	movs	r2, #1
 80019a6:	462b      	mov	r3, r5
 80019a8:	7800      	ldrb	r0, [r0, #0]
 80019aa:	f001 fd4f 	bl	800344c <MPU_Write_Len>
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d1b2      	bne.n	8001918 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 80019b2:	7c63      	ldrb	r3, [r4, #17]
 80019b4:	b103      	cbz	r3, 80019b8 <mpu_reset_fifo+0xa8>
            data = BIT_DMP_INT_EN;
 80019b6:	2302      	movs	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80019b8:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 80019bc:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80019c0:	2201      	movs	r2, #1
 80019c2:	462b      	mov	r3, r5
 80019c4:	7bc9      	ldrb	r1, [r1, #15]
 80019c6:	7800      	ldrb	r0, [r0, #0]
 80019c8:	f001 fd40 	bl	800344c <MPU_Write_Len>
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d1a3      	bne.n	8001918 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80019d0:	462b      	mov	r3, r5
        data = 0;
 80019d2:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80019d6:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 80019da:	2201      	movs	r2, #1
 80019dc:	7949      	ldrb	r1, [r1, #5]
 80019de:	7800      	ldrb	r0, [r0, #0]
 80019e0:	f001 fd34 	bl	800344c <MPU_Write_Len>
 80019e4:	3000      	adds	r0, #0
 80019e6:	bf18      	it	ne
 80019e8:	2001      	movne	r0, #1
 80019ea:	4240      	negs	r0, r0
 80019ec:	e796      	b.n	800191c <mpu_reset_fifo+0xc>
        data = BIT_FIFO_RST;
 80019ee:	2304      	movs	r3, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80019f0:	2201      	movs	r2, #1
        data = BIT_FIFO_RST;
 80019f2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80019f6:	462b      	mov	r3, r5
 80019f8:	f001 fd28 	bl	800344c <MPU_Write_Len>
 80019fc:	2800      	cmp	r0, #0
 80019fe:	d18b      	bne.n	8001918 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001a00:	7ca3      	ldrb	r3, [r4, #18]
 8001a02:	b913      	cbnz	r3, 8001a0a <mpu_reset_fifo+0xfa>
 8001a04:	7aa3      	ldrb	r3, [r4, #10]
 8001a06:	07db      	lsls	r3, r3, #31
 8001a08:	d424      	bmi.n	8001a54 <mpu_reset_fifo+0x144>
            data = BIT_FIFO_EN;
 8001a0a:	2340      	movs	r3, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001a0c:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8001a10:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001a14:	2201      	movs	r2, #1
 8001a16:	462b      	mov	r3, r5
 8001a18:	7909      	ldrb	r1, [r1, #4]
 8001a1a:	7800      	ldrb	r0, [r0, #0]
 8001a1c:	f001 fd16 	bl	800344c <MPU_Write_Len>
 8001a20:	2800      	cmp	r0, #0
 8001a22:	f47f af79 	bne.w	8001918 <mpu_reset_fifo+0x8>
        delay_ms(50);
 8001a26:	2032      	movs	r0, #50	; 0x32
 8001a28:	f002 fd32 	bl	8004490 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 8001a2c:	7c63      	ldrb	r3, [r4, #17]
 8001a2e:	b103      	cbz	r3, 8001a32 <mpu_reset_fifo+0x122>
            data = BIT_DATA_RDY_EN;
 8001a30:	2301      	movs	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001a32:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 8001a36:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	462b      	mov	r3, r5
 8001a3e:	7bc9      	ldrb	r1, [r1, #15]
 8001a40:	7800      	ldrb	r0, [r0, #0]
 8001a42:	f001 fd03 	bl	800344c <MPU_Write_Len>
 8001a46:	2800      	cmp	r0, #0
 8001a48:	f47f af66 	bne.w	8001918 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8001a4c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <mpu_reset_fifo+0x14c>)
 8001a52:	e7c2      	b.n	80019da <mpu_reset_fifo+0xca>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8001a54:	2360      	movs	r3, #96	; 0x60
 8001a56:	e7d9      	b.n	8001a0c <mpu_reset_fifo+0xfc>
 8001a58:	2000000c 	.word	0x2000000c
 8001a5c:	2000001c 	.word	0x2000001c

08001a60 <mpu_get_gyro_fsr>:
    switch (st.chip_cfg.gyro_fsr) {
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <mpu_get_gyro_fsr+0x30>)
 8001a62:	7a1b      	ldrb	r3, [r3, #8]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d810      	bhi.n	8001a8a <mpu_get_gyro_fsr+0x2a>
 8001a68:	e8df f003 	tbb	[pc, r3]
 8001a6c:	0c090602 	.word	0x0c090602
        fsr[0] = 250;
 8001a70:	23fa      	movs	r3, #250	; 0xfa
        fsr[0] = 0;
 8001a72:	8003      	strh	r3, [r0, #0]
}
 8001a74:	2000      	movs	r0, #0
 8001a76:	4770      	bx	lr
        fsr[0] = 500;
 8001a78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a7c:	e7f9      	b.n	8001a72 <mpu_get_gyro_fsr+0x12>
        fsr[0] = 1000;
 8001a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a82:	e7f6      	b.n	8001a72 <mpu_get_gyro_fsr+0x12>
        fsr[0] = 2000;
 8001a84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a88:	e7f3      	b.n	8001a72 <mpu_get_gyro_fsr+0x12>
        fsr[0] = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e7f1      	b.n	8001a72 <mpu_get_gyro_fsr+0x12>
 8001a8e:	bf00      	nop
 8001a90:	2000000c 	.word	0x2000000c

08001a94 <mpu_set_gyro_fsr>:
{
 8001a94:	b513      	push	{r0, r1, r4, lr}
    if (!(st.chip_cfg.sensors))
 8001a96:	4c1a      	ldr	r4, [pc, #104]	; (8001b00 <mpu_set_gyro_fsr+0x6c>)
 8001a98:	7aa3      	ldrb	r3, [r4, #10]
 8001a9a:	b913      	cbnz	r3, 8001aa2 <mpu_set_gyro_fsr+0xe>
        return -1;
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	e01d      	b.n	8001ade <mpu_set_gyro_fsr+0x4a>
    switch (fsr) {
 8001aa2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001aa6:	d024      	beq.n	8001af2 <mpu_set_gyro_fsr+0x5e>
 8001aa8:	d81b      	bhi.n	8001ae2 <mpu_set_gyro_fsr+0x4e>
 8001aaa:	28fa      	cmp	r0, #250	; 0xfa
 8001aac:	d1f6      	bne.n	8001a9c <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_250DPS << 3;
 8001aae:	2300      	movs	r3, #0
        data = INV_FSR_2000DPS << 3;
 8001ab0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8001ab4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001ab8:	7a23      	ldrb	r3, [r4, #8]
 8001aba:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8001abe:	d01c      	beq.n	8001afa <mpu_set_gyro_fsr+0x66>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8001ac0:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001ac4:	f10d 0307 	add.w	r3, sp, #7
 8001ac8:	2201      	movs	r2, #1
 8001aca:	7989      	ldrb	r1, [r1, #6]
 8001acc:	7800      	ldrb	r0, [r0, #0]
 8001ace:	f001 fcbd 	bl	800344c <MPU_Write_Len>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	d1e2      	bne.n	8001a9c <mpu_set_gyro_fsr+0x8>
    st.chip_cfg.gyro_fsr = data >> 3;
 8001ad6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ada:	08db      	lsrs	r3, r3, #3
 8001adc:	7223      	strb	r3, [r4, #8]
}
 8001ade:	b002      	add	sp, #8
 8001ae0:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8001ae2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ae6:	d006      	beq.n	8001af6 <mpu_set_gyro_fsr+0x62>
 8001ae8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001aec:	d1d6      	bne.n	8001a9c <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_2000DPS << 3;
 8001aee:	2318      	movs	r3, #24
 8001af0:	e7de      	b.n	8001ab0 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_500DPS << 3;
 8001af2:	2308      	movs	r3, #8
 8001af4:	e7dc      	b.n	8001ab0 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_1000DPS << 3;
 8001af6:	2310      	movs	r3, #16
 8001af8:	e7da      	b.n	8001ab0 <mpu_set_gyro_fsr+0x1c>
        return 0;
 8001afa:	2000      	movs	r0, #0
 8001afc:	e7ef      	b.n	8001ade <mpu_set_gyro_fsr+0x4a>
 8001afe:	bf00      	nop
 8001b00:	2000000c 	.word	0x2000000c

08001b04 <mpu_get_accel_fsr>:
    switch (st.chip_cfg.accel_fsr) {
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <mpu_get_accel_fsr+0x34>)
 8001b06:	7a5a      	ldrb	r2, [r3, #9]
 8001b08:	2a03      	cmp	r2, #3
 8001b0a:	d812      	bhi.n	8001b32 <mpu_get_accel_fsr+0x2e>
 8001b0c:	e8df f002 	tbb	[pc, r2]
 8001b10:	0f0d0b02 	.word	0x0f0d0b02
        fsr[0] = 2;
 8001b14:	2202      	movs	r2, #2
        fsr[0] = 16;
 8001b16:	7002      	strb	r2, [r0, #0]
    if (st.chip_cfg.accel_half)
 8001b18:	7cdb      	ldrb	r3, [r3, #19]
 8001b1a:	b113      	cbz	r3, 8001b22 <mpu_get_accel_fsr+0x1e>
        fsr[0] <<= 1;
 8001b1c:	7803      	ldrb	r3, [r0, #0]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	7003      	strb	r3, [r0, #0]
    return 0;
 8001b22:	2000      	movs	r0, #0
 8001b24:	4770      	bx	lr
        fsr[0] = 4;
 8001b26:	2204      	movs	r2, #4
 8001b28:	e7f5      	b.n	8001b16 <mpu_get_accel_fsr+0x12>
        fsr[0] = 8;
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	e7f3      	b.n	8001b16 <mpu_get_accel_fsr+0x12>
        fsr[0] = 16;
 8001b2e:	2210      	movs	r2, #16
 8001b30:	e7f1      	b.n	8001b16 <mpu_get_accel_fsr+0x12>
        return -1;
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295
 8001b36:	4770      	bx	lr
 8001b38:	2000000c 	.word	0x2000000c

08001b3c <mpu_set_accel_fsr>:
{
 8001b3c:	b513      	push	{r0, r1, r4, lr}
    if (!(st.chip_cfg.sensors))
 8001b3e:	4c18      	ldr	r4, [pc, #96]	; (8001ba0 <mpu_set_accel_fsr+0x64>)
 8001b40:	7aa3      	ldrb	r3, [r4, #10]
 8001b42:	b913      	cbnz	r3, 8001b4a <mpu_set_accel_fsr+0xe>
        return -1;
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	e01c      	b.n	8001b84 <mpu_set_accel_fsr+0x48>
    switch (fsr) {
 8001b4a:	2804      	cmp	r0, #4
 8001b4c:	d022      	beq.n	8001b94 <mpu_set_accel_fsr+0x58>
 8001b4e:	d81b      	bhi.n	8001b88 <mpu_set_accel_fsr+0x4c>
 8001b50:	2802      	cmp	r0, #2
 8001b52:	d1f7      	bne.n	8001b44 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_2G << 3;
 8001b54:	2300      	movs	r3, #0
        data = INV_FSR_16G << 3;
 8001b56:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.accel_fsr == (data >> 3))
 8001b5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001b5e:	7a63      	ldrb	r3, [r4, #9]
 8001b60:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8001b64:	d01a      	beq.n	8001b9c <mpu_set_accel_fsr+0x60>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8001b66:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001b6a:	f10d 0307 	add.w	r3, sp, #7
 8001b6e:	2201      	movs	r2, #1
 8001b70:	79c9      	ldrb	r1, [r1, #7]
 8001b72:	7800      	ldrb	r0, [r0, #0]
 8001b74:	f001 fc6a 	bl	800344c <MPU_Write_Len>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d1e3      	bne.n	8001b44 <mpu_set_accel_fsr+0x8>
    st.chip_cfg.accel_fsr = data >> 3;
 8001b7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b80:	08db      	lsrs	r3, r3, #3
 8001b82:	7263      	strb	r3, [r4, #9]
}
 8001b84:	b002      	add	sp, #8
 8001b86:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8001b88:	2808      	cmp	r0, #8
 8001b8a:	d005      	beq.n	8001b98 <mpu_set_accel_fsr+0x5c>
 8001b8c:	2810      	cmp	r0, #16
 8001b8e:	d1d9      	bne.n	8001b44 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_16G << 3;
 8001b90:	2318      	movs	r3, #24
 8001b92:	e7e0      	b.n	8001b56 <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_4G << 3;
 8001b94:	2308      	movs	r3, #8
 8001b96:	e7de      	b.n	8001b56 <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_8G << 3;
 8001b98:	2310      	movs	r3, #16
 8001b9a:	e7dc      	b.n	8001b56 <mpu_set_accel_fsr+0x1a>
        return 0;
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	e7f1      	b.n	8001b84 <mpu_set_accel_fsr+0x48>
 8001ba0:	2000000c 	.word	0x2000000c

08001ba4 <mpu_get_lpf>:
    switch (st.chip_cfg.lpf) {
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <mpu_get_lpf+0x34>)
 8001ba6:	7adb      	ldrb	r3, [r3, #11]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d812      	bhi.n	8001bd4 <mpu_get_lpf+0x30>
 8001bae:	e8df f003 	tbb	[pc, r3]
 8001bb2:	0703      	.short	0x0703
 8001bb4:	0f0d0b09 	.word	0x0f0d0b09
        lpf[0] = 188;
 8001bb8:	23bc      	movs	r3, #188	; 0xbc
        lpf[0] = 0;
 8001bba:	8003      	strh	r3, [r0, #0]
}
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	4770      	bx	lr
        lpf[0] = 98;
 8001bc0:	2362      	movs	r3, #98	; 0x62
 8001bc2:	e7fa      	b.n	8001bba <mpu_get_lpf+0x16>
        lpf[0] = 42;
 8001bc4:	232a      	movs	r3, #42	; 0x2a
 8001bc6:	e7f8      	b.n	8001bba <mpu_get_lpf+0x16>
        lpf[0] = 20;
 8001bc8:	2314      	movs	r3, #20
 8001bca:	e7f6      	b.n	8001bba <mpu_get_lpf+0x16>
        lpf[0] = 10;
 8001bcc:	230a      	movs	r3, #10
 8001bce:	e7f4      	b.n	8001bba <mpu_get_lpf+0x16>
        lpf[0] = 5;
 8001bd0:	2305      	movs	r3, #5
 8001bd2:	e7f2      	b.n	8001bba <mpu_get_lpf+0x16>
        lpf[0] = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e7f0      	b.n	8001bba <mpu_get_lpf+0x16>
 8001bd8:	2000000c 	.word	0x2000000c

08001bdc <mpu_set_lpf>:
{
 8001bdc:	b513      	push	{r0, r1, r4, lr}
    if (!(st.chip_cfg.sensors))
 8001bde:	4c19      	ldr	r4, [pc, #100]	; (8001c44 <mpu_set_lpf+0x68>)
 8001be0:	7aa3      	ldrb	r3, [r4, #10]
 8001be2:	b91b      	cbnz	r3, 8001bec <mpu_set_lpf+0x10>
        return -1;
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001be8:	b002      	add	sp, #8
 8001bea:	bd10      	pop	{r4, pc}
    if (lpf >= 188)
 8001bec:	28bb      	cmp	r0, #187	; 0xbb
 8001bee:	d916      	bls.n	8001c1e <mpu_set_lpf+0x42>
        data = INV_FILTER_188HZ;
 8001bf0:	2301      	movs	r3, #1
        data = INV_FILTER_5HZ;
 8001bf2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 8001bf6:	7ae2      	ldrb	r2, [r4, #11]
 8001bf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d01f      	beq.n	8001c40 <mpu_set_lpf+0x64>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001c00:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001c04:	f10d 0307 	add.w	r3, sp, #7
 8001c08:	2201      	movs	r2, #1
 8001c0a:	7889      	ldrb	r1, [r1, #2]
 8001c0c:	7800      	ldrb	r0, [r0, #0]
 8001c0e:	f001 fc1d 	bl	800344c <MPU_Write_Len>
 8001c12:	2800      	cmp	r0, #0
 8001c14:	d1e6      	bne.n	8001be4 <mpu_set_lpf+0x8>
    st.chip_cfg.lpf = data;
 8001c16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c1a:	72e3      	strb	r3, [r4, #11]
    return 0;
 8001c1c:	e7e4      	b.n	8001be8 <mpu_set_lpf+0xc>
    else if (lpf >= 98)
 8001c1e:	2861      	cmp	r0, #97	; 0x61
 8001c20:	d901      	bls.n	8001c26 <mpu_set_lpf+0x4a>
        data = INV_FILTER_98HZ;
 8001c22:	2302      	movs	r3, #2
 8001c24:	e7e5      	b.n	8001bf2 <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 8001c26:	2829      	cmp	r0, #41	; 0x29
 8001c28:	d901      	bls.n	8001c2e <mpu_set_lpf+0x52>
        data = INV_FILTER_42HZ;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e7e1      	b.n	8001bf2 <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 8001c2e:	2813      	cmp	r0, #19
 8001c30:	d901      	bls.n	8001c36 <mpu_set_lpf+0x5a>
        data = INV_FILTER_20HZ;
 8001c32:	2304      	movs	r3, #4
 8001c34:	e7dd      	b.n	8001bf2 <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8001c36:	2809      	cmp	r0, #9
        data = INV_FILTER_10HZ;
 8001c38:	bf8c      	ite	hi
 8001c3a:	2305      	movhi	r3, #5
        data = INV_FILTER_5HZ;
 8001c3c:	2306      	movls	r3, #6
 8001c3e:	e7d8      	b.n	8001bf2 <mpu_set_lpf+0x16>
        return 0;
 8001c40:	2000      	movs	r0, #0
 8001c42:	e7d1      	b.n	8001be8 <mpu_set_lpf+0xc>
 8001c44:	2000000c 	.word	0x2000000c

08001c48 <mpu_get_sample_rate>:
    if (st.chip_cfg.dmp_on)
 8001c48:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <mpu_get_sample_rate+0x18>)
 8001c4a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8001c4e:	b91b      	cbnz	r3, 8001c58 <mpu_get_sample_rate+0x10>
        rate[0] = st.chip_cfg.sample_rate;
 8001c50:	89d2      	ldrh	r2, [r2, #14]
 8001c52:	8002      	strh	r2, [r0, #0]
    return 0;
 8001c54:	4618      	mov	r0, r3
 8001c56:	4770      	bx	lr
        return -1;
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	2000000c 	.word	0x2000000c

08001c64 <mpu_get_gyro_sens>:
    switch (st.chip_cfg.gyro_fsr) {
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <mpu_get_gyro_sens+0x2c>)
 8001c66:	7a1b      	ldrb	r3, [r3, #8]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d80d      	bhi.n	8001c88 <mpu_get_gyro_sens+0x24>
 8001c6c:	e8df f003 	tbb	[pc, r3]
 8001c70:	0a080602 	.word	0x0a080602
        sens[0] = 131.f;
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <mpu_get_gyro_sens+0x30>)
        sens[0] = 65.5f;
 8001c76:	6003      	str	r3, [r0, #0]
    return 0;
 8001c78:	2000      	movs	r0, #0
        break;
 8001c7a:	4770      	bx	lr
        sens[0] = 65.5f;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <mpu_get_gyro_sens+0x34>)
 8001c7e:	e7fa      	b.n	8001c76 <mpu_get_gyro_sens+0x12>
        sens[0] = 32.8f;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <mpu_get_gyro_sens+0x38>)
 8001c82:	e7f8      	b.n	8001c76 <mpu_get_gyro_sens+0x12>
        sens[0] = 16.4f;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <mpu_get_gyro_sens+0x3c>)
 8001c86:	e7f6      	b.n	8001c76 <mpu_get_gyro_sens+0x12>
        return -1;
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	43030000 	.word	0x43030000
 8001c98:	42830000 	.word	0x42830000
 8001c9c:	42033333 	.word	0x42033333
 8001ca0:	41833333 	.word	0x41833333

08001ca4 <mpu_get_accel_sens>:
    switch (st.chip_cfg.accel_fsr) {
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <mpu_get_accel_sens+0x3c>)
 8001ca6:	7a5a      	ldrb	r2, [r3, #9]
 8001ca8:	2a03      	cmp	r2, #3
 8001caa:	d816      	bhi.n	8001cda <mpu_get_accel_sens+0x36>
 8001cac:	e8df f002 	tbb	[pc, r2]
 8001cb0:	120f0c02 	.word	0x120f0c02
        sens[0] = 16384;
 8001cb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        sens[0] = 2048;
 8001cb8:	8002      	strh	r2, [r0, #0]
    if (st.chip_cfg.accel_half)
 8001cba:	7cdb      	ldrb	r3, [r3, #19]
 8001cbc:	b113      	cbz	r3, 8001cc4 <mpu_get_accel_sens+0x20>
        sens[0] >>= 1;
 8001cbe:	8803      	ldrh	r3, [r0, #0]
 8001cc0:	085b      	lsrs	r3, r3, #1
 8001cc2:	8003      	strh	r3, [r0, #0]
    return 0;
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	4770      	bx	lr
        sens[0] = 8092;
 8001cc8:	f641 729c 	movw	r2, #8092	; 0x1f9c
 8001ccc:	e7f4      	b.n	8001cb8 <mpu_get_accel_sens+0x14>
        sens[0] = 4096;
 8001cce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cd2:	e7f1      	b.n	8001cb8 <mpu_get_accel_sens+0x14>
        sens[0] = 2048;
 8001cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cd8:	e7ee      	b.n	8001cb8 <mpu_get_accel_sens+0x14>
        return -1;
 8001cda:	f04f 30ff 	mov.w	r0, #4294967295
 8001cde:	4770      	bx	lr
 8001ce0:	2000000c 	.word	0x2000000c

08001ce4 <mpu_configure_fifo>:
{
 8001ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (st.chip_cfg.dmp_on)
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <mpu_configure_fifo+0x4c>)
 8001ce8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001cec:	461e      	mov	r6, r3
 8001cee:	b9e2      	cbnz	r2, 8001d2a <mpu_configure_fifo+0x46>
        if (!(st.chip_cfg.sensors))
 8001cf0:	7a9c      	ldrb	r4, [r3, #10]
 8001cf2:	b19c      	cbz	r4, 8001d1c <mpu_configure_fifo+0x38>
    sensors &= ~INV_XYZ_COMPASS;
 8001cf4:	f000 05fe 	and.w	r5, r0, #254	; 0xfe
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001cf8:	402c      	ands	r4, r5
        prev = st.chip_cfg.fifo_enable;
 8001cfa:	7c1f      	ldrb	r7, [r3, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001cfc:	741c      	strb	r4, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8001cfe:	1b64      	subs	r4, r4, r5
 8001d00:	bf18      	it	ne
 8001d02:	f04f 34ff 	movne.w	r4, #4294967295
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001d06:	b90d      	cbnz	r5, 8001d0c <mpu_configure_fifo+0x28>
 8001d08:	7d18      	ldrb	r0, [r3, #20]
 8001d0a:	b150      	cbz	r0, 8001d22 <mpu_configure_fifo+0x3e>
            set_int_enable(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff fdd5 	bl	80018bc <set_int_enable>
        if (sensors) {
 8001d12:	b145      	cbz	r5, 8001d26 <mpu_configure_fifo+0x42>
            if (mpu_reset_fifo()) {
 8001d14:	f7ff fdfc 	bl	8001910 <mpu_reset_fifo>
 8001d18:	b128      	cbz	r0, 8001d26 <mpu_configure_fifo+0x42>
                st.chip_cfg.fifo_enable = prev;
 8001d1a:	7437      	strb	r7, [r6, #16]
            return -1;
 8001d1c:	f04f 34ff 	mov.w	r4, #4294967295
 8001d20:	e001      	b.n	8001d26 <mpu_configure_fifo+0x42>
            set_int_enable(0);
 8001d22:	f7ff fdcb 	bl	80018bc <set_int_enable>
}
 8001d26:	4620      	mov	r0, r4
 8001d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8001d2a:	2400      	movs	r4, #0
 8001d2c:	e7fb      	b.n	8001d26 <mpu_configure_fifo+0x42>
 8001d2e:	bf00      	nop
 8001d30:	2000000c 	.word	0x2000000c

08001d34 <mpu_read_fifo_stream>:
{
 8001d34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (!st.chip_cfg.dmp_on)
 8001d38:	4d24      	ldr	r5, [pc, #144]	; (8001dcc <mpu_read_fifo_stream+0x98>)
{
 8001d3a:	4606      	mov	r6, r0
    if (!st.chip_cfg.dmp_on)
 8001d3c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
 8001d40:	4689      	mov	r9, r1
 8001d42:	4617      	mov	r7, r2
 8001d44:	46a8      	mov	r8, r5
    if (!st.chip_cfg.dmp_on)
 8001d46:	b923      	cbnz	r3, 8001d52 <mpu_read_fifo_stream+0x1e>
        return -1;
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001d4c:	b003      	add	sp, #12
 8001d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!st.chip_cfg.sensors)
 8001d52:	7aab      	ldrb	r3, [r5, #10]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f7      	beq.n	8001d48 <mpu_read_fifo_stream+0x14>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001d58:	e9d5 1000 	ldrd	r1, r0, [r5]
 8001d5c:	ab01      	add	r3, sp, #4
 8001d5e:	2202      	movs	r2, #2
 8001d60:	7a89      	ldrb	r1, [r1, #10]
 8001d62:	7800      	ldrb	r0, [r0, #0]
 8001d64:	f001 fb84 	bl	8003470 <MPU_Read_Len>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d1ed      	bne.n	8001d48 <mpu_read_fifo_stream+0x14>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001d6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d70:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001d74:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    if (fifo_count < length) {
 8001d78:	42b4      	cmp	r4, r6
 8001d7a:	d201      	bcs.n	8001d80 <mpu_read_fifo_stream+0x4c>
        more[0] = 0;
 8001d7c:	7038      	strb	r0, [r7, #0]
 8001d7e:	e7e3      	b.n	8001d48 <mpu_read_fifo_stream+0x14>
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001d80:	6868      	ldr	r0, [r5, #4]
 8001d82:	8843      	ldrh	r3, [r0, #2]
 8001d84:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8001d88:	d911      	bls.n	8001dae <mpu_read_fifo_stream+0x7a>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001d8a:	6829      	ldr	r1, [r5, #0]
 8001d8c:	ab01      	add	r3, sp, #4
 8001d8e:	2201      	movs	r2, #1
 8001d90:	7c49      	ldrb	r1, [r1, #17]
 8001d92:	7800      	ldrb	r0, [r0, #0]
 8001d94:	f001 fb6c 	bl	8003470 <MPU_Read_Len>
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	d1d5      	bne.n	8001d48 <mpu_read_fifo_stream+0x14>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8001d9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001da0:	06db      	lsls	r3, r3, #27
 8001da2:	d504      	bpl.n	8001dae <mpu_read_fifo_stream+0x7a>
            mpu_reset_fifo();
 8001da4:	f7ff fdb4 	bl	8001910 <mpu_reset_fifo>
            return -2;
 8001da8:	f06f 0001 	mvn.w	r0, #1
 8001dac:	e7ce      	b.n	8001d4c <mpu_read_fifo_stream+0x18>
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8001dae:	e9d8 1000 	ldrd	r1, r0, [r8]
 8001db2:	464b      	mov	r3, r9
 8001db4:	b2f2      	uxtb	r2, r6
 8001db6:	7ac9      	ldrb	r1, [r1, #11]
 8001db8:	7800      	ldrb	r0, [r0, #0]
 8001dba:	f001 fb59 	bl	8003470 <MPU_Read_Len>
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d1c2      	bne.n	8001d48 <mpu_read_fifo_stream+0x14>
    more[0] = fifo_count / length - 1;
 8001dc2:	fbb4 f4f6 	udiv	r4, r4, r6
 8001dc6:	3c01      	subs	r4, #1
 8001dc8:	703c      	strb	r4, [r7, #0]
    return 0;
 8001dca:	e7bf      	b.n	8001d4c <mpu_read_fifo_stream+0x18>
 8001dcc:	2000000c 	.word	0x2000000c

08001dd0 <mpu_set_bypass>:
{
 8001dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001dd2:	4c36      	ldr	r4, [pc, #216]	; (8001eac <mpu_set_bypass+0xdc>)
{
 8001dd4:	4605      	mov	r5, r0
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001dd6:	7ca3      	ldrb	r3, [r4, #18]
 8001dd8:	4283      	cmp	r3, r0
 8001dda:	d041      	beq.n	8001e60 <mpu_set_bypass+0x90>
 8001ddc:	6863      	ldr	r3, [r4, #4]
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001dde:	2201      	movs	r2, #1
 8001de0:	7818      	ldrb	r0, [r3, #0]
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	7919      	ldrb	r1, [r3, #4]
 8001de6:	f10d 0307 	add.w	r3, sp, #7
    if (bypass_on) {
 8001dea:	2d00      	cmp	r5, #0
 8001dec:	d03a      	beq.n	8001e64 <mpu_set_bypass+0x94>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001dee:	f001 fb3f 	bl	8003470 <MPU_Read_Len>
 8001df2:	b118      	cbz	r0, 8001dfc <mpu_set_bypass+0x2c>
            return -1;
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001df8:	b003      	add	sp, #12
 8001dfa:	bd30      	pop	{r4, r5, pc}
        tmp &= ~BIT_AUX_IF_EN;
 8001dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001e00:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp &= ~BIT_AUX_IF_EN;
 8001e04:	f023 0320 	bic.w	r3, r3, #32
 8001e08:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f10d 0307 	add.w	r3, sp, #7
 8001e12:	7909      	ldrb	r1, [r1, #4]
 8001e14:	7800      	ldrb	r0, [r0, #0]
 8001e16:	f001 fb19 	bl	800344c <MPU_Write_Len>
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d1ea      	bne.n	8001df4 <mpu_set_bypass+0x24>
        delay_ms(3);
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f002 fb36 	bl	8004490 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8001e24:	2302      	movs	r3, #2
 8001e26:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 8001e2a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001e2e:	b113      	cbz	r3, 8001e36 <mpu_set_bypass+0x66>
            tmp |= BIT_ACTL;
 8001e30:	2382      	movs	r3, #130	; 0x82
            tmp = 0;
 8001e32:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8001e36:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001e3a:	b12b      	cbz	r3, 8001e48 <mpu_set_bypass+0x78>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001e3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e40:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001e44:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001e48:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001e4c:	f10d 0307 	add.w	r3, sp, #7
 8001e50:	2201      	movs	r2, #1
 8001e52:	7d09      	ldrb	r1, [r1, #20]
 8001e54:	7800      	ldrb	r0, [r0, #0]
 8001e56:	f001 faf9 	bl	800344c <MPU_Write_Len>
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d1ca      	bne.n	8001df4 <mpu_set_bypass+0x24>
    st.chip_cfg.bypass_mode = bypass_on;
 8001e5e:	74a5      	strb	r5, [r4, #18]
        return 0;
 8001e60:	2000      	movs	r0, #0
 8001e62:	e7c9      	b.n	8001df8 <mpu_set_bypass+0x28>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001e64:	f001 fb04 	bl	8003470 <MPU_Read_Len>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d1c3      	bne.n	8001df4 <mpu_set_bypass+0x24>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001e6c:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001e70:	7aa2      	ldrb	r2, [r4, #10]
 8001e72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e76:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 8001e78:	bf4c      	ite	mi
 8001e7a:	f043 0320 	orrmi.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 8001e7e:	f023 0320 	bicpl.w	r3, r3, #32
 8001e82:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001e86:	2201      	movs	r2, #1
 8001e88:	f10d 0307 	add.w	r3, sp, #7
 8001e8c:	7909      	ldrb	r1, [r1, #4]
 8001e8e:	7800      	ldrb	r0, [r0, #0]
 8001e90:	f001 fadc 	bl	800344c <MPU_Write_Len>
 8001e94:	2800      	cmp	r0, #0
 8001e96:	d1ad      	bne.n	8001df4 <mpu_set_bypass+0x24>
        delay_ms(3);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f002 faf9 	bl	8004490 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8001e9e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0c5      	beq.n	8001e32 <mpu_set_bypass+0x62>
            tmp = BIT_ACTL;
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	e7c3      	b.n	8001e32 <mpu_set_bypass+0x62>
 8001eaa:	bf00      	nop
 8001eac:	2000000c 	.word	0x2000000c

08001eb0 <mpu_set_int_latched>:
{
 8001eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.latched_int == enable)
 8001eb2:	4c18      	ldr	r4, [pc, #96]	; (8001f14 <mpu_set_int_latched+0x64>)
{
 8001eb4:	4605      	mov	r5, r0
    if (st.chip_cfg.latched_int == enable)
 8001eb6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001eba:	4283      	cmp	r3, r0
 8001ebc:	d028      	beq.n	8001f10 <mpu_set_int_latched+0x60>
    if (enable)
 8001ebe:	b308      	cbz	r0, 8001f04 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001ec0:	2330      	movs	r3, #48	; 0x30
 8001ec2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.bypass_mode)
 8001ec6:	7ca3      	ldrb	r3, [r4, #18]
 8001ec8:	b12b      	cbz	r3, 8001ed6 <mpu_set_int_latched+0x26>
        tmp |= BIT_BYPASS_EN;
 8001eca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 8001ed6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001eda:	b12b      	cbz	r3, 8001ee8 <mpu_set_int_latched+0x38>
        tmp |= BIT_ACTL;
 8001edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ee0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ee4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001ee8:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001eec:	f10d 0307 	add.w	r3, sp, #7
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	7d09      	ldrb	r1, [r1, #20]
 8001ef4:	7800      	ldrb	r0, [r0, #0]
 8001ef6:	f001 faa9 	bl	800344c <MPU_Write_Len>
 8001efa:	b930      	cbnz	r0, 8001f0a <mpu_set_int_latched+0x5a>
    st.chip_cfg.latched_int = enable;
 8001efc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
}
 8001f00:	b003      	add	sp, #12
 8001f02:	bd30      	pop	{r4, r5, pc}
        tmp = 0;
 8001f04:	f88d 0007 	strb.w	r0, [sp, #7]
 8001f08:	e7dd      	b.n	8001ec6 <mpu_set_int_latched+0x16>
        return -1;
 8001f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0e:	e7f7      	b.n	8001f00 <mpu_set_int_latched+0x50>
        return 0;
 8001f10:	2000      	movs	r0, #0
 8001f12:	e7f5      	b.n	8001f00 <mpu_set_int_latched+0x50>
 8001f14:	2000000c 	.word	0x2000000c

08001f18 <mpu_lp_accel_mode>:
    if (rate > 40)
 8001f18:	2828      	cmp	r0, #40	; 0x28
{
 8001f1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f1c:	4604      	mov	r4, r0
    if (rate > 40)
 8001f1e:	d902      	bls.n	8001f26 <mpu_lp_accel_mode+0xe>
        return -1;
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	e012      	b.n	8001f4c <mpu_lp_accel_mode+0x34>
 8001f26:	4d27      	ldr	r5, [pc, #156]	; (8001fc4 <mpu_lp_accel_mode+0xac>)
    if (!rate) {
 8001f28:	b990      	cbnz	r0, 8001f50 <mpu_lp_accel_mode+0x38>
        mpu_set_int_latched(0);
 8001f2a:	f7ff ffc1 	bl	8001eb0 <mpu_set_int_latched>
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001f2e:	e9d5 1000 	ldrd	r1, r0, [r5]
        tmp[0] = 0;
 8001f32:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f36:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	ab01      	add	r3, sp, #4
 8001f3e:	7c89      	ldrb	r1, [r1, #18]
 8001f40:	7800      	ldrb	r0, [r0, #0]
 8001f42:	f001 fa83 	bl	800344c <MPU_Write_Len>
 8001f46:	2800      	cmp	r0, #0
 8001f48:	d1ea      	bne.n	8001f20 <mpu_lp_accel_mode+0x8>
        st.chip_cfg.lp_accel_mode = 0;
 8001f4a:	7528      	strb	r0, [r5, #20]
}
 8001f4c:	b003      	add	sp, #12
 8001f4e:	bd30      	pop	{r4, r5, pc}
    mpu_set_int_latched(1);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7ff ffad 	bl	8001eb0 <mpu_set_int_latched>
    tmp[0] = BIT_LPA_CYCLE;
 8001f56:	2320      	movs	r3, #32
    if (rate == 1) {
 8001f58:	2c01      	cmp	r4, #1
    tmp[0] = BIT_LPA_CYCLE;
 8001f5a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (rate == 1) {
 8001f5e:	d120      	bne.n	8001fa2 <mpu_lp_accel_mode+0x8a>
        tmp[1] = INV_LPA_1_25HZ;
 8001f60:	2300      	movs	r3, #0
        mpu_set_lpf(5);
 8001f62:	2005      	movs	r0, #5
        tmp[1] = INV_LPA_5HZ;
 8001f64:	f88d 3005 	strb.w	r3, [sp, #5]
        mpu_set_lpf(20);
 8001f68:	f7ff fe38 	bl	8001bdc <mpu_set_lpf>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001f6c:	e9d5 1000 	ldrd	r1, r0, [r5]
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8001f70:	f89d 3005 	ldrb.w	r3, [sp, #5]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001f74:	2202      	movs	r2, #2
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8001f76:	019b      	lsls	r3, r3, #6
 8001f78:	f043 0307 	orr.w	r3, r3, #7
 8001f7c:	f88d 3005 	strb.w	r3, [sp, #5]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001f80:	7c89      	ldrb	r1, [r1, #18]
 8001f82:	ab01      	add	r3, sp, #4
 8001f84:	7800      	ldrb	r0, [r0, #0]
 8001f86:	f001 fa61 	bl	800344c <MPU_Write_Len>
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d1c7      	bne.n	8001f20 <mpu_lp_accel_mode+0x8>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8001f90:	2308      	movs	r3, #8
 8001f92:	72ab      	strb	r3, [r5, #10]
    st.chip_cfg.lp_accel_mode = 1;
 8001f94:	2301      	movs	r3, #1
    st.chip_cfg.clk_src = 0;
 8001f96:	7328      	strb	r0, [r5, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8001f98:	752b      	strb	r3, [r5, #20]
    mpu_configure_fifo(0);
 8001f9a:	f7ff fea3 	bl	8001ce4 <mpu_configure_fifo>
    return 0;
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	e7d4      	b.n	8001f4c <mpu_lp_accel_mode+0x34>
    } else if (rate <= 5) {
 8001fa2:	2c05      	cmp	r4, #5
 8001fa4:	d801      	bhi.n	8001faa <mpu_lp_accel_mode+0x92>
        tmp[1] = INV_LPA_5HZ;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e7db      	b.n	8001f62 <mpu_lp_accel_mode+0x4a>
    } else if (rate <= 20) {
 8001faa:	2c14      	cmp	r4, #20
        tmp[1] = INV_LPA_20HZ;
 8001fac:	bf97      	itett	ls
 8001fae:	2302      	movls	r3, #2
        tmp[1] = INV_LPA_40HZ;
 8001fb0:	2303      	movhi	r3, #3
        tmp[1] = INV_LPA_20HZ;
 8001fb2:	f88d 3005 	strbls.w	r3, [sp, #5]
        mpu_set_lpf(10);
 8001fb6:	200a      	movls	r0, #10
        tmp[1] = INV_LPA_40HZ;
 8001fb8:	bf84      	itt	hi
 8001fba:	f88d 3005 	strbhi.w	r3, [sp, #5]
        mpu_set_lpf(20);
 8001fbe:	2014      	movhi	r0, #20
 8001fc0:	e7d2      	b.n	8001f68 <mpu_lp_accel_mode+0x50>
 8001fc2:	bf00      	nop
 8001fc4:	2000000c 	.word	0x2000000c

08001fc8 <mpu_set_sample_rate>:
{
 8001fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!(st.chip_cfg.sensors))
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <mpu_set_sample_rate+0x80>)
{
 8001fcc:	4604      	mov	r4, r0
    if (!(st.chip_cfg.sensors))
 8001fce:	7a9a      	ldrb	r2, [r3, #10]
 8001fd0:	461e      	mov	r6, r3
 8001fd2:	b91a      	cbnz	r2, 8001fdc <mpu_set_sample_rate+0x14>
        return -1;
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001fd8:	b003      	add	sp, #12
 8001fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (st.chip_cfg.dmp_on)
 8001fdc:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8001fe0:	2d00      	cmp	r5, #0
 8001fe2:	d1f7      	bne.n	8001fd4 <mpu_set_sample_rate+0xc>
        if (st.chip_cfg.lp_accel_mode) {
 8001fe4:	7d1b      	ldrb	r3, [r3, #20]
 8001fe6:	b153      	cbz	r3, 8001ffe <mpu_set_sample_rate+0x36>
            if (rate && (rate <= 40)) {
 8001fe8:	1e43      	subs	r3, r0, #1
 8001fea:	2b27      	cmp	r3, #39	; 0x27
 8001fec:	d804      	bhi.n	8001ff8 <mpu_set_sample_rate+0x30>
                mpu_lp_accel_mode(rate);
 8001fee:	b2c0      	uxtb	r0, r0
 8001ff0:	f7ff ff92 	bl	8001f18 <mpu_lp_accel_mode>
        return 0;
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	e7ef      	b.n	8001fd8 <mpu_set_sample_rate+0x10>
            mpu_lp_accel_mode(0);
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	f7ff ff8d 	bl	8001f18 <mpu_lp_accel_mode>
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8001ffe:	e9d6 1000 	ldrd	r1, r0, [r6]
 8002002:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002006:	bf28      	it	cs
 8002008:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
        data = 1000 / rate - 1;
 800200c:	2c04      	cmp	r4, #4
 800200e:	bf38      	it	cc
 8002010:	2404      	movcc	r4, #4
 8002012:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8002016:	fb97 f4f4 	sdiv	r4, r7, r4
 800201a:	ab02      	add	r3, sp, #8
 800201c:	3c01      	subs	r4, #1
 800201e:	f803 4d01 	strb.w	r4, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8002022:	2201      	movs	r2, #1
 8002024:	7849      	ldrb	r1, [r1, #1]
 8002026:	7800      	ldrb	r0, [r0, #0]
 8002028:	f001 fa10 	bl	800344c <MPU_Write_Len>
 800202c:	4605      	mov	r5, r0
 800202e:	2800      	cmp	r0, #0
 8002030:	d1d0      	bne.n	8001fd4 <mpu_set_sample_rate+0xc>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8002032:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002036:	3001      	adds	r0, #1
 8002038:	fb97 f0f0 	sdiv	r0, r7, r0
 800203c:	81f0      	strh	r0, [r6, #14]
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 800203e:	0840      	lsrs	r0, r0, #1
 8002040:	f7ff fdcc 	bl	8001bdc <mpu_set_lpf>
 8002044:	e7d6      	b.n	8001ff4 <mpu_set_sample_rate+0x2c>
 8002046:	bf00      	nop
 8002048:	2000000c 	.word	0x2000000c

0800204c <mpu_set_sensors>:
    if (sensors & INV_XYZ_GYRO)
 800204c:	f010 0370 	ands.w	r3, r0, #112	; 0x70
{
 8002050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002052:	4605      	mov	r5, r0
    if (sensors & INV_XYZ_GYRO)
 8002054:	d013      	beq.n	800207e <mpu_set_sensors+0x32>
        data = INV_CLK_PLL;
 8002056:	2301      	movs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8002058:	4c2b      	ldr	r4, [pc, #172]	; (8002108 <mpu_set_sensors+0xbc>)
        data = BIT_SLEEP;
 800205a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800205e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8002062:	f10d 0307 	add.w	r3, sp, #7
 8002066:	2201      	movs	r2, #1
 8002068:	7c89      	ldrb	r1, [r1, #18]
 800206a:	7800      	ldrb	r0, [r0, #0]
 800206c:	f001 f9ee 	bl	800344c <MPU_Write_Len>
 8002070:	b148      	cbz	r0, 8002086 <mpu_set_sensors+0x3a>
        st.chip_cfg.sensors = 0;
 8002072:	2300      	movs	r3, #0
        return -1;
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
        st.chip_cfg.sensors = 0;
 8002078:	72a3      	strb	r3, [r4, #10]
}
 800207a:	b003      	add	sp, #12
 800207c:	bd30      	pop	{r4, r5, pc}
    else if (sensors)
 800207e:	2800      	cmp	r0, #0
 8002080:	d1ea      	bne.n	8002058 <mpu_set_sensors+0xc>
        data = BIT_SLEEP;
 8002082:	2340      	movs	r3, #64	; 0x40
 8002084:	e7e8      	b.n	8002058 <mpu_set_sensors+0xc>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8002086:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800208a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800208e:	7323      	strb	r3, [r4, #12]
    if (!(sensors & INV_X_GYRO))
 8002090:	066b      	lsls	r3, r5, #25
        data |= BIT_STBY_XG;
 8002092:	bf56      	itet	pl
 8002094:	2304      	movpl	r3, #4
    data = 0;
 8002096:	f88d 0007 	strbmi.w	r0, [sp, #7]
        data |= BIT_STBY_XG;
 800209a:	f88d 3007 	strbpl.w	r3, [sp, #7]
    if (!(sensors & INV_Y_GYRO))
 800209e:	06a9      	lsls	r1, r5, #26
        data |= BIT_STBY_YG;
 80020a0:	bf58      	it	pl
 80020a2:	f89d 3007 	ldrbpl.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80020a6:	e9d4 1000 	ldrd	r1, r0, [r4]
        data |= BIT_STBY_YG;
 80020aa:	bf5c      	itt	pl
 80020ac:	f043 0302 	orrpl.w	r3, r3, #2
 80020b0:	f88d 3007 	strbpl.w	r3, [sp, #7]
    if (!(sensors & INV_Z_GYRO))
 80020b4:	06ea      	lsls	r2, r5, #27
        data |= BIT_STBY_ZG;
 80020b6:	bf58      	it	pl
 80020b8:	f89d 3007 	ldrbpl.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80020bc:	f04f 0201 	mov.w	r2, #1
        data |= BIT_STBY_ZG;
 80020c0:	bf5c      	itt	pl
 80020c2:	f043 0301 	orrpl.w	r3, r3, #1
 80020c6:	f88d 3007 	strbpl.w	r3, [sp, #7]
    if (!(sensors & INV_XYZ_ACCEL))
 80020ca:	072b      	lsls	r3, r5, #28
        data |= BIT_STBY_XYZA;
 80020cc:	bf58      	it	pl
 80020ce:	f89d 3007 	ldrbpl.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80020d2:	7cc9      	ldrb	r1, [r1, #19]
        data |= BIT_STBY_XYZA;
 80020d4:	bf5c      	itt	pl
 80020d6:	f043 0338 	orrpl.w	r3, r3, #56	; 0x38
 80020da:	f88d 3007 	strbpl.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80020de:	7800      	ldrb	r0, [r0, #0]
 80020e0:	f10d 0307 	add.w	r3, sp, #7
 80020e4:	f001 f9b2 	bl	800344c <MPU_Write_Len>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d1c2      	bne.n	8002072 <mpu_set_sensors+0x26>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 80020ec:	f015 0ff7 	tst.w	r5, #247	; 0xf7
 80020f0:	d001      	beq.n	80020f6 <mpu_set_sensors+0xaa>
        mpu_set_int_latched(0);
 80020f2:	f7ff fedd 	bl	8001eb0 <mpu_set_int_latched>
    st.chip_cfg.sensors = sensors;
 80020f6:	72a5      	strb	r5, [r4, #10]
    st.chip_cfg.lp_accel_mode = 0;
 80020f8:	2500      	movs	r5, #0
    delay_ms(50);
 80020fa:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.lp_accel_mode = 0;
 80020fc:	7525      	strb	r5, [r4, #20]
    delay_ms(50);
 80020fe:	f002 f9c7 	bl	8004490 <HAL_Delay>
    return 0;
 8002102:	4628      	mov	r0, r5
 8002104:	e7b9      	b.n	800207a <mpu_set_sensors+0x2e>
 8002106:	bf00      	nop
 8002108:	2000000c 	.word	0x2000000c

0800210c <mpu_init>:
    data[0] = BIT_RESET;
 800210c:	2380      	movs	r3, #128	; 0x80
{
 800210e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002110:	4e4c      	ldr	r6, [pc, #304]	; (8002244 <mpu_init+0x138>)
    data[0] = BIT_RESET;
 8002112:	ad02      	add	r5, sp, #8
 8002114:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002118:	e9d6 1000 	ldrd	r1, r0, [r6]
 800211c:	462b      	mov	r3, r5
 800211e:	2201      	movs	r2, #1
 8002120:	7c89      	ldrb	r1, [r1, #18]
 8002122:	7800      	ldrb	r0, [r0, #0]
 8002124:	f001 f992 	bl	800344c <MPU_Write_Len>
 8002128:	4634      	mov	r4, r6
 800212a:	4607      	mov	r7, r0
 800212c:	b120      	cbz	r0, 8002138 <mpu_init+0x2c>
            return -1;
 800212e:	f04f 34ff 	mov.w	r4, #4294967295
}
 8002132:	4620      	mov	r0, r4
 8002134:	b003      	add	sp, #12
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
    delay_ms(100);
 8002138:	2064      	movs	r0, #100	; 0x64
 800213a:	f002 f9a9 	bl	8004490 <HAL_Delay>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800213e:	e9d6 1000 	ldrd	r1, r0, [r6]
    data[0] = 0x00;
 8002142:	f88d 7000 	strb.w	r7, [sp]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002146:	462b      	mov	r3, r5
 8002148:	2201      	movs	r2, #1
 800214a:	7c89      	ldrb	r1, [r1, #18]
 800214c:	7800      	ldrb	r0, [r0, #0]
 800214e:	f001 f97d 	bl	800344c <MPU_Write_Len>
 8002152:	2800      	cmp	r0, #0
 8002154:	d1eb      	bne.n	800212e <mpu_init+0x22>
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 8002156:	e9d6 1000 	ldrd	r1, r0, [r6]
 800215a:	462b      	mov	r3, r5
 800215c:	2206      	movs	r2, #6
 800215e:	7d89      	ldrb	r1, [r1, #22]
 8002160:	7800      	ldrb	r0, [r0, #0]
 8002162:	f001 f985 	bl	8003470 <MPU_Read_Len>
 8002166:	2800      	cmp	r0, #0
 8002168:	d1e1      	bne.n	800212e <mpu_init+0x22>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 800216a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800216e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	0052      	lsls	r2, r2, #1
 8002176:	f002 0202 	and.w	r2, r2, #2
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	4313      	orrs	r3, r2
        (data[1] & 0x01);
 8002180:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002184:	f002 0201 	and.w	r2, r2, #1
    if (rev) {
 8002188:	4313      	orrs	r3, r2
 800218a:	d040      	beq.n	800220e <mpu_init+0x102>
        if (rev == 1)
 800218c:	2b01      	cmp	r3, #1
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 800218e:	b2d9      	uxtb	r1, r3
        if (rev == 1)
 8002190:	d135      	bne.n	80021fe <mpu_init+0xf2>
            st.chip_cfg.accel_half = 1;
 8002192:	74e3      	strb	r3, [r4, #19]
    st.chip_cfg.sample_rate = 0xFFFF;
 8002194:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002198:	81e3      	strh	r3, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800219a:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 800219c:	23ff      	movs	r3, #255	; 0xff
 800219e:	74a3      	strb	r3, [r4, #18]
    st.chip_cfg.gyro_fsr = 0xFF;
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
 80021a4:	60a3      	str	r3, [r4, #8]
    st.chip_cfg.lpf = 0xFF;
 80021a6:	2301      	movs	r3, #1
    st.chip_cfg.active_low_int = 1;
 80021a8:	8463      	strh	r3, [r4, #34]	; 0x22
    st.chip_cfg.lpf = 0xFF;
 80021aa:	7323      	strb	r3, [r4, #12]
    st.chip_cfg.lp_accel_mode = 0;
 80021ac:	2300      	movs	r3, #0
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80021ae:	4a26      	ldr	r2, [pc, #152]	; (8002248 <mpu_init+0x13c>)
 80021b0:	f8c4 3016 	str.w	r3, [r4, #22]
    st.chip_cfg.lp_accel_mode = 0;
 80021b4:	82a3      	strh	r3, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80021b6:	6053      	str	r3, [r2, #4]
 80021b8:	6093      	str	r3, [r2, #8]
    if (mpu_set_gyro_fsr(2000))
 80021ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    st.chip_cfg.dmp_on = 0;
 80021be:	6263      	str	r3, [r4, #36]	; 0x24
    if (mpu_set_gyro_fsr(2000))
 80021c0:	f7ff fc68 	bl	8001a94 <mpu_set_gyro_fsr>
 80021c4:	2800      	cmp	r0, #0
 80021c6:	d1b2      	bne.n	800212e <mpu_init+0x22>
    if (mpu_set_accel_fsr(2))
 80021c8:	2002      	movs	r0, #2
 80021ca:	f7ff fcb7 	bl	8001b3c <mpu_set_accel_fsr>
 80021ce:	2800      	cmp	r0, #0
 80021d0:	d1ad      	bne.n	800212e <mpu_init+0x22>
    if (mpu_set_lpf(42))
 80021d2:	202a      	movs	r0, #42	; 0x2a
 80021d4:	f7ff fd02 	bl	8001bdc <mpu_set_lpf>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d1a8      	bne.n	800212e <mpu_init+0x22>
    if (mpu_set_sample_rate(50))
 80021dc:	2032      	movs	r0, #50	; 0x32
 80021de:	f7ff fef3 	bl	8001fc8 <mpu_set_sample_rate>
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d1a3      	bne.n	800212e <mpu_init+0x22>
    if (mpu_configure_fifo(0))
 80021e6:	f7ff fd7d 	bl	8001ce4 <mpu_configure_fifo>
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d19f      	bne.n	800212e <mpu_init+0x22>
    if (mpu_set_bypass(0))
 80021ee:	f7ff fdef 	bl	8001dd0 <mpu_set_bypass>
 80021f2:	4604      	mov	r4, r0
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d19a      	bne.n	800212e <mpu_init+0x22>
    mpu_set_sensors(0);
 80021f8:	f7ff ff28 	bl	800204c <mpu_set_sensors>
    return 0;
 80021fc:	e799      	b.n	8002132 <mpu_init+0x26>
        else if (rev == 2)
 80021fe:	2902      	cmp	r1, #2
 8002200:	d101      	bne.n	8002206 <mpu_init+0xfa>
            st.chip_cfg.accel_half = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	e7c5      	b.n	8002192 <mpu_init+0x86>
            log_e("Unsupported software product rev %d.\n", rev);
 8002206:	4811      	ldr	r0, [pc, #68]	; (800224c <mpu_init+0x140>)
 8002208:	f004 f802 	bl	8006210 <printf>
 800220c:	e78f      	b.n	800212e <mpu_init+0x22>
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, data))
 800220e:	e9d6 1000 	ldrd	r1, r0, [r6]
 8002212:	462b      	mov	r3, r5
 8002214:	2201      	movs	r2, #1
 8002216:	78c9      	ldrb	r1, [r1, #3]
 8002218:	7800      	ldrb	r0, [r0, #0]
 800221a:	f001 f929 	bl	8003470 <MPU_Read_Len>
 800221e:	2800      	cmp	r0, #0
 8002220:	d185      	bne.n	800212e <mpu_init+0x22>
        rev = data[0] & 0x0F;
 8002222:	f89d 3000 	ldrb.w	r3, [sp]
        if (!rev) {
 8002226:	f013 030f 	ands.w	r3, r3, #15
 800222a:	d103      	bne.n	8002234 <mpu_init+0x128>
            log_e("Product ID read as 0 indicates device is either "
 800222c:	4808      	ldr	r0, [pc, #32]	; (8002250 <mpu_init+0x144>)
 800222e:	f004 f847 	bl	80062c0 <puts>
 8002232:	e77c      	b.n	800212e <mpu_init+0x22>
        } else if (rev == 4) {
 8002234:	2b04      	cmp	r3, #4
 8002236:	d1e4      	bne.n	8002202 <mpu_init+0xf6>
            log_i("Half sensitivity part found.\n");
 8002238:	4806      	ldr	r0, [pc, #24]	; (8002254 <mpu_init+0x148>)
 800223a:	f004 f841 	bl	80062c0 <puts>
            st.chip_cfg.accel_half = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	e7a7      	b.n	8002192 <mpu_init+0x86>
 8002242:	bf00      	nop
 8002244:	2000000c 	.word	0x2000000c
 8002248:	20000022 	.word	0x20000022
 800224c:	0800c49c 	.word	0x0800c49c
 8002250:	0800c4c2 	.word	0x0800c4c2
 8002254:	0800c50e 	.word	0x0800c50e

08002258 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8002258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800225a:	460d      	mov	r5, r1
    unsigned char tmp[2];

    if (!data)
 800225c:	4616      	mov	r6, r2
 800225e:	b91a      	cbnz	r2, 8002268 <mpu_write_mem+0x10>
        return -1;
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
 8002264:	b003      	add	sp, #12
 8002266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 8002268:	4c12      	ldr	r4, [pc, #72]	; (80022b4 <mpu_write_mem+0x5c>)
 800226a:	7aa3      	ldrb	r3, [r4, #10]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f7      	beq.n	8002260 <mpu_write_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 8002270:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8002272:	0a03      	lsrs	r3, r0, #8
 8002274:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8002278:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 800227a:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800227c:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 8002280:	4408      	add	r0, r1
 8002282:	4298      	cmp	r0, r3
 8002284:	dcec      	bgt.n	8002260 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8002286:	6821      	ldr	r1, [r4, #0]
 8002288:	ab01      	add	r3, sp, #4
 800228a:	2202      	movs	r2, #2
 800228c:	7e09      	ldrb	r1, [r1, #24]
 800228e:	7838      	ldrb	r0, [r7, #0]
 8002290:	f001 f8dc 	bl	800344c <MPU_Write_Len>
 8002294:	2800      	cmp	r0, #0
 8002296:	d1e3      	bne.n	8002260 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8002298:	e9d4 1000 	ldrd	r1, r0, [r4]
 800229c:	4633      	mov	r3, r6
 800229e:	b2ea      	uxtb	r2, r5
 80022a0:	7d49      	ldrb	r1, [r1, #21]
 80022a2:	7800      	ldrb	r0, [r0, #0]
 80022a4:	f001 f8d2 	bl	800344c <MPU_Write_Len>
 80022a8:	3000      	adds	r0, #0
 80022aa:	bf18      	it	ne
 80022ac:	2001      	movne	r0, #1
 80022ae:	4240      	negs	r0, r0
 80022b0:	e7d8      	b.n	8002264 <mpu_write_mem+0xc>
 80022b2:	bf00      	nop
 80022b4:	2000000c 	.word	0x2000000c

080022b8 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80022b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022ba:	460d      	mov	r5, r1
    unsigned char tmp[2];

    if (!data)
 80022bc:	4616      	mov	r6, r2
 80022be:	b91a      	cbnz	r2, 80022c8 <mpu_read_mem+0x10>
        return -1;
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
 80022c4:	b003      	add	sp, #12
 80022c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 80022c8:	4c12      	ldr	r4, [pc, #72]	; (8002314 <mpu_read_mem+0x5c>)
 80022ca:	7aa3      	ldrb	r3, [r4, #10]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f7      	beq.n	80022c0 <mpu_read_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 80022d0:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80022d2:	0a03      	lsrs	r3, r0, #8
 80022d4:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80022d8:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 80022da:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80022dc:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 80022e0:	4408      	add	r0, r1
 80022e2:	4298      	cmp	r0, r3
 80022e4:	dcec      	bgt.n	80022c0 <mpu_read_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80022e6:	6821      	ldr	r1, [r4, #0]
 80022e8:	ab01      	add	r3, sp, #4
 80022ea:	2202      	movs	r2, #2
 80022ec:	7e09      	ldrb	r1, [r1, #24]
 80022ee:	7838      	ldrb	r0, [r7, #0]
 80022f0:	f001 f8ac 	bl	800344c <MPU_Write_Len>
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d1e3      	bne.n	80022c0 <mpu_read_mem+0x8>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 80022f8:	e9d4 1000 	ldrd	r1, r0, [r4]
 80022fc:	4633      	mov	r3, r6
 80022fe:	b2ea      	uxtb	r2, r5
 8002300:	7d49      	ldrb	r1, [r1, #21]
 8002302:	7800      	ldrb	r0, [r0, #0]
 8002304:	f001 f8b4 	bl	8003470 <MPU_Read_Len>
 8002308:	3000      	adds	r0, #0
 800230a:	bf18      	it	ne
 800230c:	2001      	movne	r0, #1
 800230e:	4240      	negs	r0, r0
 8002310:	e7d8      	b.n	80022c4 <mpu_read_mem+0xc>
 8002312:	bf00      	nop
 8002314:	2000000c 	.word	0x2000000c

08002318 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8002318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 800231c:	4d25      	ldr	r5, [pc, #148]	; (80023b4 <mpu_load_firmware+0x9c>)
{
 800231e:	b089      	sub	sp, #36	; 0x24
    if (st.chip_cfg.dmp_loaded)
 8002320:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
{
 8002324:	4607      	mov	r7, r0
 8002326:	4689      	mov	r9, r1
 8002328:	4616      	mov	r6, r2
 800232a:	9301      	str	r3, [sp, #4]
    if (st.chip_cfg.dmp_loaded)
 800232c:	b124      	cbz	r4, 8002338 <mpu_load_firmware+0x20>
        /* DMP should only be loaded once. */
        return -1;
 800232e:	f04f 30ff 	mov.w	r0, #4294967295
        return -1;

    st.chip_cfg.dmp_loaded = 1;
    st.chip_cfg.dmp_sample_rate = sample_rate;
    return 0;
}
 8002332:	b009      	add	sp, #36	; 0x24
 8002334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!firmware)
 8002338:	2900      	cmp	r1, #0
 800233a:	d0f8      	beq.n	800232e <mpu_load_firmware+0x16>
    for (ii = 0; ii < length; ii += this_write) {
 800233c:	42bc      	cmp	r4, r7
 800233e:	d314      	bcc.n	800236a <mpu_load_firmware+0x52>
    tmp[0] = start_addr >> 8;
 8002340:	0a33      	lsrs	r3, r6, #8
 8002342:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[1] = start_addr & 0xFF;
 8002346:	f88d 600d 	strb.w	r6, [sp, #13]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 800234a:	e9d5 1000 	ldrd	r1, r0, [r5]
 800234e:	ab03      	add	r3, sp, #12
 8002350:	2202      	movs	r2, #2
 8002352:	7e89      	ldrb	r1, [r1, #26]
 8002354:	7800      	ldrb	r0, [r0, #0]
 8002356:	f001 f879 	bl	800344c <MPU_Write_Len>
 800235a:	2800      	cmp	r0, #0
 800235c:	d1e7      	bne.n	800232e <mpu_load_firmware+0x16>
    st.chip_cfg.dmp_loaded = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8002364:	9b01      	ldr	r3, [sp, #4]
 8002366:	84eb      	strh	r3, [r5, #38]	; 0x26
    return 0;
 8002368:	e7e3      	b.n	8002332 <mpu_load_firmware+0x1a>
        this_write = min(LOAD_CHUNK, length - ii);
 800236a:	eba7 0804 	sub.w	r8, r7, r4
 800236e:	f1b8 0f10 	cmp.w	r8, #16
 8002372:	bfa8      	it	ge
 8002374:	f04f 0810 	movge.w	r8, #16
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8002378:	eb09 0b04 	add.w	fp, r9, r4
        this_write = min(LOAD_CHUNK, length - ii);
 800237c:	fa1f fa88 	uxth.w	sl, r8
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8002380:	465a      	mov	r2, fp
 8002382:	4651      	mov	r1, sl
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff ff67 	bl	8002258 <mpu_write_mem>
 800238a:	2800      	cmp	r0, #0
 800238c:	d1cf      	bne.n	800232e <mpu_load_firmware+0x16>
        if (mpu_read_mem(ii, this_write, cur))
 800238e:	aa04      	add	r2, sp, #16
 8002390:	4651      	mov	r1, sl
 8002392:	4620      	mov	r0, r4
 8002394:	f7ff ff90 	bl	80022b8 <mpu_read_mem>
 8002398:	2800      	cmp	r0, #0
 800239a:	d1c8      	bne.n	800232e <mpu_load_firmware+0x16>
        if (memcmp(firmware+ii, cur, this_write))
 800239c:	4652      	mov	r2, sl
 800239e:	a904      	add	r1, sp, #16
 80023a0:	4658      	mov	r0, fp
 80023a2:	f003 ff1d 	bl	80061e0 <memcmp>
 80023a6:	b910      	cbnz	r0, 80023ae <mpu_load_firmware+0x96>
    for (ii = 0; ii < length; ii += this_write) {
 80023a8:	4454      	add	r4, sl
 80023aa:	b2a4      	uxth	r4, r4
 80023ac:	e7c6      	b.n	800233c <mpu_load_firmware+0x24>
            return -2;
 80023ae:	f06f 0001 	mvn.w	r0, #1
 80023b2:	e7be      	b.n	8002332 <mpu_load_firmware+0x1a>
 80023b4:	2000000c 	.word	0x2000000c

080023b8 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 80023b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 80023ba:	4d1c      	ldr	r5, [pc, #112]	; (800242c <mpu_set_dmp_state+0x74>)
{
 80023bc:	4604      	mov	r4, r0
    if (st.chip_cfg.dmp_on == enable)
 80023be:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80023c2:	4283      	cmp	r3, r0
 80023c4:	d01d      	beq.n	8002402 <mpu_set_dmp_state+0x4a>
        return 0;

    if (enable) {
 80023c6:	b1f8      	cbz	r0, 8002408 <mpu_set_dmp_state+0x50>
        if (!st.chip_cfg.dmp_loaded)
 80023c8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80023cc:	b35b      	cbz	r3, 8002426 <mpu_set_dmp_state+0x6e>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
        /* Remove FIFO elements. */
        tmp = 0;
 80023ce:	2400      	movs	r4, #0
        set_int_enable(0);
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7ff fa73 	bl	80018bc <set_int_enable>
        mpu_set_bypass(0);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7ff fcfa 	bl	8001dd0 <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 80023dc:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 80023de:	f7ff fdf3 	bl	8001fc8 <mpu_set_sample_rate>
        tmp = 0;
 80023e2:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80023e4:	6868      	ldr	r0, [r5, #4]
        tmp = 0;
 80023e6:	f803 4d01 	strb.w	r4, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80023ea:	2201      	movs	r2, #1
 80023ec:	2123      	movs	r1, #35	; 0x23
 80023ee:	7800      	ldrb	r0, [r0, #0]
 80023f0:	f001 f82c 	bl	800344c <MPU_Write_Len>
        st.chip_cfg.dmp_on = 1;
 80023f4:	2001      	movs	r0, #1
 80023f6:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 80023fa:	f7ff fa5f 	bl	80018bc <set_int_enable>
        set_int_enable(0);
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
 80023fe:	f7ff fa87 	bl	8001910 <mpu_reset_fifo>
        return 0;
 8002402:	2000      	movs	r0, #0
    }
    return 0;
}
 8002404:	b003      	add	sp, #12
 8002406:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 8002408:	f7ff fa58 	bl	80018bc <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
 800240c:	7c2a      	ldrb	r2, [r5, #16]
 800240e:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8002410:	6868      	ldr	r0, [r5, #4]
        tmp = st.chip_cfg.fifo_enable;
 8002412:	f803 2d01 	strb.w	r2, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8002416:	2123      	movs	r1, #35	; 0x23
 8002418:	2201      	movs	r2, #1
 800241a:	7800      	ldrb	r0, [r0, #0]
 800241c:	f001 f816 	bl	800344c <MPU_Write_Len>
        st.chip_cfg.dmp_on = 0;
 8002420:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8002424:	e7eb      	b.n	80023fe <mpu_set_dmp_state+0x46>
            return -1;
 8002426:	f04f 30ff 	mov.w	r0, #4294967295
 800242a:	e7eb      	b.n	8002404 <mpu_set_dmp_state+0x4c>
 800242c:	2000000c 	.word	0x2000000c

08002430 <mpu_run_self_test>:
{
 8002430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_on) {
 8002434:	4cb7      	ldr	r4, [pc, #732]	; (8002714 <mpu_run_self_test+0x2e4>)
{
 8002436:	b097      	sub	sp, #92	; 0x5c
    if (st.chip_cfg.dmp_on) {
 8002438:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
{
 800243c:	9002      	str	r0, [sp, #8]
 800243e:	4688      	mov	r8, r1
    if (st.chip_cfg.dmp_on) {
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	b123      	cbz	r3, 800244e <mpu_run_self_test+0x1e>
        mpu_set_dmp_state(0);
 8002444:	2000      	movs	r0, #0
 8002446:	f7ff ffb7 	bl	80023b8 <mpu_set_dmp_state>
        dmp_was_on = 1;
 800244a:	2301      	movs	r3, #1
 800244c:	9301      	str	r3, [sp, #4]
    mpu_get_gyro_fsr(&gyro_fsr);
 800244e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8002452:	f7ff fb05 	bl	8001a60 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8002456:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 800245a:	f7ff fb53 	bl	8001b04 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 800245e:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8002462:	f7ff fb9f 	bl	8001ba4 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8002466:	a80a      	add	r0, sp, #40	; 0x28
 8002468:	f7ff fbee 	bl	8001c48 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 800246c:	7aa3      	ldrb	r3, [r4, #10]
        if (!get_st_biases(gyro, accel, 0))
 800246e:	2200      	movs	r2, #0
    sensors_on = st.chip_cfg.sensors;
 8002470:	9303      	str	r3, [sp, #12]
    sensors[0] = st.chip_cfg.fifo_enable;
 8002472:	7c23      	ldrb	r3, [r4, #16]
        if (!get_st_biases(gyro, accel, 0))
 8002474:	4641      	mov	r1, r8
 8002476:	9802      	ldr	r0, [sp, #8]
    sensors[0] = st.chip_cfg.fifo_enable;
 8002478:	9305      	str	r3, [sp, #20]
        if (!get_st_biases(gyro, accel, 0))
 800247a:	f7ff f841 	bl	8001500 <get_st_biases>
 800247e:	2800      	cmp	r0, #0
 8002480:	f040 8088 	bne.w	8002594 <mpu_run_self_test+0x164>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8002484:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8002488:	2201      	movs	r2, #1
 800248a:	4649      	mov	r1, r9
 800248c:	a80d      	add	r0, sp, #52	; 0x34
 800248e:	f7ff f837 	bl	8001500 <get_st_biases>
 8002492:	2800      	cmp	r0, #0
 8002494:	f040 80af 	bne.w	80025f6 <mpu_run_self_test+0x1c6>
    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8002498:	6860      	ldr	r0, [r4, #4]
 800249a:	ab0c      	add	r3, sp, #48	; 0x30
 800249c:	2204      	movs	r2, #4
 800249e:	210d      	movs	r1, #13
 80024a0:	7800      	ldrb	r0, [r0, #0]
 80024a2:	f000 ffe5 	bl	8003470 <MPU_Read_Len>
 80024a6:	2800      	cmp	r0, #0
 80024a8:	f000 80ad 	beq.w	8002606 <mpu_run_self_test+0x1d6>
    int jj, result = 0;
 80024ac:	2600      	movs	r6, #0
            result |= 1 << jj;
 80024ae:	f04f 0a01 	mov.w	sl, #1
    for(jj = 0; jj < 3; jj++) {
 80024b2:	4635      	mov	r5, r6
        if (st_shift[jj]) {
 80024b4:	af13      	add	r7, sp, #76	; 0x4c
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 80024b6:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
 80024ba:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80024be:	1ac0      	subs	r0, r0, r3
 80024c0:	2800      	cmp	r0, #0
 80024c2:	bfb8      	it	lt
 80024c4:	4240      	neglt	r0, r0
 80024c6:	f7fe fbe9 	bl	8000c9c <__aeabi_i2f>
 80024ca:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80024ce:	f7fe fc39 	bl	8000d44 <__aeabi_fmul>
        if (st_shift[jj]) {
 80024d2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 80024d6:	4683      	mov	fp, r0
        if (st_shift[jj]) {
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	9304      	str	r3, [sp, #16]
 80024de:	f7fe fdc5 	bl	800106c <__aeabi_fcmpeq>
 80024e2:	2800      	cmp	r0, #0
 80024e4:	f040 80d4 	bne.w	8002690 <mpu_run_self_test+0x260>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 80024e8:	9b04      	ldr	r3, [sp, #16]
 80024ea:	4658      	mov	r0, fp
 80024ec:	4619      	mov	r1, r3
 80024ee:	f7fe fcdd 	bl	8000eac <__aeabi_fdiv>
 80024f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80024f6:	f7fe fb1b 	bl	8000b30 <__aeabi_fsub>
            if (fabs(st_shift_var) > test.max_accel_var)
 80024fa:	4987      	ldr	r1, [pc, #540]	; (8002718 <mpu_run_self_test+0x2e8>)
 80024fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
        } else if ((st_shift_cust < test.min_g) ||
 8002500:	f7fe fddc 	bl	80010bc <__aeabi_fcmpgt>
 8002504:	b110      	cbz	r0, 800250c <mpu_run_self_test+0xdc>
            result |= 1 << jj;
 8002506:	fa0a f305 	lsl.w	r3, sl, r5
 800250a:	431e      	orrs	r6, r3
    for(jj = 0; jj < 3; jj++) {
 800250c:	3501      	adds	r5, #1
 800250e:	2d03      	cmp	r5, #3
 8002510:	d1d1      	bne.n	80024b6 <mpu_run_self_test+0x86>
    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8002512:	6860      	ldr	r0, [r4, #4]
    accel_result = accel_self_test(accel, accel_st);
 8002514:	b2f3      	uxtb	r3, r6
 8002516:	9304      	str	r3, [sp, #16]
    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8002518:	462a      	mov	r2, r5
 800251a:	463b      	mov	r3, r7
 800251c:	210d      	movs	r1, #13
 800251e:	7800      	ldrb	r0, [r0, #0]
 8002520:	f000 ffa6 	bl	8003470 <MPU_Read_Len>
 8002524:	2800      	cmp	r0, #0
 8002526:	f040 80f3 	bne.w	8002710 <mpu_run_self_test+0x2e0>
    int jj, result = 0;
 800252a:	4605      	mov	r5, r0
    for (jj = 0; jj < 3; jj++) {
 800252c:	4680      	mov	r8, r0
            result |= 1 << jj;
 800252e:	2601      	movs	r6, #1
    tmp[0] &= 0x1F;
 8002530:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
            st_shift = 3275.f / test.gyro_sens;
 8002534:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8002730 <mpu_run_self_test+0x300>
    tmp[0] &= 0x1F;
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    tmp[1] &= 0x1F;
 8002540:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
                st_shift *= 1.046f;
 8002544:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8002734 <mpu_run_self_test+0x304>
    tmp[1] &= 0x1F;
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    tmp[2] &= 0x1F;
 8002550:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
            if (fabs(st_shift_var) > test.max_gyro_var)
 8002554:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8002718 <mpu_run_self_test+0x2e8>
    tmp[2] &= 0x1F;
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        if (tmp[jj]) {
 8002560:	9706      	str	r7, [sp, #24]
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8002562:	9b02      	ldr	r3, [sp, #8]
 8002564:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002568:	ab0d      	add	r3, sp, #52	; 0x34
 800256a:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 800256e:	1a80      	subs	r0, r0, r2
 8002570:	2800      	cmp	r0, #0
 8002572:	bfb8      	it	lt
 8002574:	4240      	neglt	r0, r0
 8002576:	f7fe fb91 	bl	8000c9c <__aeabi_i2f>
 800257a:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 800257e:	f7fe fbe1 	bl	8000d44 <__aeabi_fmul>
        if (tmp[jj]) {
 8002582:	9b06      	ldr	r3, [sp, #24]
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8002584:	4607      	mov	r7, r0
        if (tmp[jj]) {
 8002586:	f818 2003 	ldrb.w	r2, [r8, r3]
 800258a:	2a00      	cmp	r2, #0
 800258c:	f000 80b8 	beq.w	8002700 <mpu_run_self_test+0x2d0>
            st_shift = 3275.f / test.gyro_sens;
 8002590:	4658      	mov	r0, fp
 8002592:	e08c      	b.n	80026ae <mpu_run_self_test+0x27e>
        if (!get_st_biases(gyro, accel, 0))
 8002594:	2200      	movs	r2, #0
 8002596:	4641      	mov	r1, r8
 8002598:	9802      	ldr	r0, [sp, #8]
 800259a:	f7fe ffb1 	bl	8001500 <get_st_biases>
 800259e:	2800      	cmp	r0, #0
 80025a0:	f43f af70 	beq.w	8002484 <mpu_run_self_test+0x54>
        result = 0;
 80025a4:	2500      	movs	r5, #0
    st.chip_cfg.sample_rate = 0xFFFF;
 80025a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    st.chip_cfg.lpf = 0xFF;
 80025aa:	2601      	movs	r6, #1
    st.chip_cfg.sample_rate = 0xFFFF;
 80025ac:	81e3      	strh	r3, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80025ae:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.gyro_fsr = 0xFF;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
    mpu_set_gyro_fsr(gyro_fsr);
 80025b4:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
    st.chip_cfg.gyro_fsr = 0xFF;
 80025b8:	60a3      	str	r3, [r4, #8]
    st.chip_cfg.lpf = 0xFF;
 80025ba:	7326      	strb	r6, [r4, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 80025bc:	f7ff fa6a 	bl	8001a94 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 80025c0:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 80025c4:	f7ff faba 	bl	8001b3c <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 80025c8:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 80025cc:	f7ff fb06 	bl	8001bdc <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 80025d0:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 80025d4:	f7ff fcf8 	bl	8001fc8 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 80025d8:	9803      	ldr	r0, [sp, #12]
 80025da:	f7ff fd37 	bl	800204c <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 80025de:	9805      	ldr	r0, [sp, #20]
 80025e0:	f7ff fb80 	bl	8001ce4 <mpu_configure_fifo>
    if (dmp_was_on)
 80025e4:	9b01      	ldr	r3, [sp, #4]
 80025e6:	b113      	cbz	r3, 80025ee <mpu_run_self_test+0x1be>
        mpu_set_dmp_state(1);
 80025e8:	4630      	mov	r0, r6
 80025ea:	f7ff fee5 	bl	80023b8 <mpu_set_dmp_state>
}
 80025ee:	4628      	mov	r0, r5
 80025f0:	b017      	add	sp, #92	; 0x5c
 80025f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!get_st_biases(gyro_st, accel_st, 1))
 80025f6:	2201      	movs	r2, #1
 80025f8:	4649      	mov	r1, r9
 80025fa:	a80d      	add	r0, sp, #52	; 0x34
 80025fc:	f7fe ff80 	bl	8001500 <get_st_biases>
 8002600:	2800      	cmp	r0, #0
 8002602:	d1cf      	bne.n	80025a4 <mpu_run_self_test+0x174>
 8002604:	e748      	b.n	8002498 <mpu_run_self_test+0x68>
    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8002606:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800260a:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
 800260e:	10db      	asrs	r3, r3, #3
 8002610:	f3c1 1201 	ubfx	r2, r1, #4, #2
 8002614:	f003 031c 	and.w	r3, r3, #28
 8002618:	4313      	orrs	r3, r2
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 800261a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 800261e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8002622:	10d2      	asrs	r2, r2, #3
 8002624:	f3c1 0381 	ubfx	r3, r1, #2, #2
 8002628:	f002 021c 	and.w	r2, r2, #28
 800262c:	431a      	orrs	r2, r3
 800262e:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8002632:	4605      	mov	r5, r0
            st_shift[ii] = 0.f;
 8002634:	2200      	movs	r2, #0
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8002636:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800263a:	f001 0103 	and.w	r1, r1, #3
 800263e:	10db      	asrs	r3, r3, #3
 8002640:	f003 031c 	and.w	r3, r3, #28
 8002644:	430b      	orrs	r3, r1
 8002646:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
        st_shift[ii] = 0.34f;
 800264a:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8002738 <mpu_run_self_test+0x308>
            st_shift[ii] *= 1.034f;
 800264e:	4b33      	ldr	r3, [pc, #204]	; (800271c <mpu_run_self_test+0x2ec>)
 8002650:	af13      	add	r7, sp, #76	; 0x4c
        if (!shift_code[ii]) {
 8002652:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 8002656:	f815 600a 	ldrb.w	r6, [r5, sl]
 800265a:	b936      	cbnz	r6, 800266a <mpu_run_self_test+0x23a>
            st_shift[ii] = 0.f;
 800265c:	603a      	str	r2, [r7, #0]
 800265e:	3501      	adds	r5, #1
    for (ii = 0; ii < 3; ii++) {
 8002660:	2d03      	cmp	r5, #3
 8002662:	f107 0704 	add.w	r7, r7, #4
 8002666:	d1f6      	bne.n	8002656 <mpu_run_self_test+0x226>
 8002668:	e720      	b.n	80024ac <mpu_run_self_test+0x7c>
        st_shift[ii] = 0.34f;
 800266a:	f8c7 b000 	str.w	fp, [r7]
        while (--shift_code[ii])
 800266e:	3e01      	subs	r6, #1
 8002670:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8002674:	d102      	bne.n	800267c <mpu_run_self_test+0x24c>
 8002676:	f80a 6005 	strb.w	r6, [sl, r5]
 800267a:	e7f0      	b.n	800265e <mpu_run_self_test+0x22e>
            st_shift[ii] *= 1.034f;
 800267c:	4619      	mov	r1, r3
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	9206      	str	r2, [sp, #24]
 8002682:	9304      	str	r3, [sp, #16]
 8002684:	f7fe fb5e 	bl	8000d44 <__aeabi_fmul>
 8002688:	9a06      	ldr	r2, [sp, #24]
 800268a:	6038      	str	r0, [r7, #0]
 800268c:	9b04      	ldr	r3, [sp, #16]
 800268e:	e7ee      	b.n	800266e <mpu_run_self_test+0x23e>
        } else if ((st_shift_cust < test.min_g) ||
 8002690:	4923      	ldr	r1, [pc, #140]	; (8002720 <mpu_run_self_test+0x2f0>)
 8002692:	4658      	mov	r0, fp
 8002694:	f7fe fcf4 	bl	8001080 <__aeabi_fcmplt>
 8002698:	2800      	cmp	r0, #0
 800269a:	f47f af34 	bne.w	8002506 <mpu_run_self_test+0xd6>
 800269e:	4921      	ldr	r1, [pc, #132]	; (8002724 <mpu_run_self_test+0x2f4>)
 80026a0:	4658      	mov	r0, fp
 80026a2:	e72d      	b.n	8002500 <mpu_run_self_test+0xd0>
                st_shift *= 1.046f;
 80026a4:	4651      	mov	r1, sl
 80026a6:	9207      	str	r2, [sp, #28]
 80026a8:	f7fe fb4c 	bl	8000d44 <__aeabi_fmul>
 80026ac:	9a07      	ldr	r2, [sp, #28]
            while (--tmp[jj])
 80026ae:	3a01      	subs	r2, #1
 80026b0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80026b4:	d1f6      	bne.n	80026a4 <mpu_run_self_test+0x274>
 80026b6:	ab13      	add	r3, sp, #76	; 0x4c
            st_shift_var = st_shift_cust / st_shift - 1.f;
 80026b8:	4601      	mov	r1, r0
 80026ba:	f803 2008 	strb.w	r2, [r3, r8]
 80026be:	4638      	mov	r0, r7
 80026c0:	f7fe fbf4 	bl	8000eac <__aeabi_fdiv>
 80026c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80026c8:	f7fe fa32 	bl	8000b30 <__aeabi_fsub>
            if (fabs(st_shift_var) > test.max_gyro_var)
 80026cc:	4649      	mov	r1, r9
 80026ce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
        } else if ((st_shift_cust < test.min_dps) ||
 80026d2:	f7fe fcf3 	bl	80010bc <__aeabi_fcmpgt>
 80026d6:	b110      	cbz	r0, 80026de <mpu_run_self_test+0x2ae>
            result |= 1 << jj;
 80026d8:	fa06 f208 	lsl.w	r2, r6, r8
 80026dc:	4315      	orrs	r5, r2
    for (jj = 0; jj < 3; jj++) {
 80026de:	f108 0801 	add.w	r8, r8, #1
 80026e2:	f1b8 0f03 	cmp.w	r8, #3
 80026e6:	f47f af3c 	bne.w	8002562 <mpu_run_self_test+0x132>
    if (!gyro_result)
 80026ea:	b2ed      	uxtb	r5, r5
 80026ec:	fab5 f585 	clz	r5, r5
    if (!accel_result)
 80026f0:	9b04      	ldr	r3, [sp, #16]
    if (!gyro_result)
 80026f2:	096d      	lsrs	r5, r5, #5
    if (!accel_result)
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f47f af56 	bne.w	80025a6 <mpu_run_self_test+0x176>
        result |= 0x02;
 80026fa:	f045 0502 	orr.w	r5, r5, #2
 80026fe:	e752      	b.n	80025a6 <mpu_run_self_test+0x176>
        } else if ((st_shift_cust < test.min_dps) ||
 8002700:	4909      	ldr	r1, [pc, #36]	; (8002728 <mpu_run_self_test+0x2f8>)
 8002702:	f7fe fcbd 	bl	8001080 <__aeabi_fcmplt>
 8002706:	2800      	cmp	r0, #0
 8002708:	d1e6      	bne.n	80026d8 <mpu_run_self_test+0x2a8>
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <mpu_run_self_test+0x2fc>)
 800270c:	4638      	mov	r0, r7
 800270e:	e7e0      	b.n	80026d2 <mpu_run_self_test+0x2a2>
        return 0x07;
 8002710:	2507      	movs	r5, #7
 8002712:	e7ea      	b.n	80026ea <mpu_run_self_test+0x2ba>
 8002714:	2000000c 	.word	0x2000000c
 8002718:	3e0f5c29 	.word	0x3e0f5c29
 800271c:	3f845a1d 	.word	0x3f845a1d
 8002720:	3e99999a 	.word	0x3e99999a
 8002724:	3f733333 	.word	0x3f733333
 8002728:	41200000 	.word	0x41200000
 800272c:	42d20000 	.word	0x42d20000
 8002730:	41c80000 	.word	0x41c80000
 8002734:	3f85e354 	.word	0x3f85e354
 8002738:	3eae147b 	.word	0x3eae147b

0800273c <run_self_test>:
                                           0, 0, 1};
//MPU6050�Բ���
//����ֵ:0,����
//    ����,ʧ��
uint8_t run_self_test(void)
{
 800273c:	b510      	push	{r4, lr}
 800273e:	b088      	sub	sp, #32
	int result;
	//char test_packet[4] = {0};
	long gyro[3], accel[3]; 
	result = mpu_run_self_test(gyro, accel);
 8002740:	a905      	add	r1, sp, #20
 8002742:	a802      	add	r0, sp, #8
 8002744:	f7ff fe74 	bl	8002430 <mpu_run_self_test>
	if (result == 0x3) 
 8002748:	2803      	cmp	r0, #3
 800274a:	d136      	bne.n	80027ba <run_self_test+0x7e>
		/* Test passed. We can trust the gyro data here, so let's push it down
		* to the DMP.
		*/
		float sens;
		unsigned short accel_sens;
		mpu_get_gyro_sens(&sens);
 800274c:	a801      	add	r0, sp, #4
 800274e:	f7ff fa89 	bl	8001c64 <mpu_get_gyro_sens>
		gyro[0] = (long)(gyro[0] * sens);
 8002752:	9c01      	ldr	r4, [sp, #4]
 8002754:	9802      	ldr	r0, [sp, #8]
 8002756:	f7fe faa1 	bl	8000c9c <__aeabi_i2f>
 800275a:	4621      	mov	r1, r4
 800275c:	f7fe faf2 	bl	8000d44 <__aeabi_fmul>
 8002760:	f7fe fcb6 	bl	80010d0 <__aeabi_f2iz>
 8002764:	9002      	str	r0, [sp, #8]
		gyro[1] = (long)(gyro[1] * sens);
 8002766:	9803      	ldr	r0, [sp, #12]
 8002768:	f7fe fa98 	bl	8000c9c <__aeabi_i2f>
 800276c:	4621      	mov	r1, r4
 800276e:	f7fe fae9 	bl	8000d44 <__aeabi_fmul>
 8002772:	f7fe fcad 	bl	80010d0 <__aeabi_f2iz>
 8002776:	9003      	str	r0, [sp, #12]
		gyro[2] = (long)(gyro[2] * sens);
 8002778:	9804      	ldr	r0, [sp, #16]
 800277a:	f7fe fa8f 	bl	8000c9c <__aeabi_i2f>
 800277e:	4621      	mov	r1, r4
 8002780:	f7fe fae0 	bl	8000d44 <__aeabi_fmul>
 8002784:	f7fe fca4 	bl	80010d0 <__aeabi_f2iz>
 8002788:	9004      	str	r0, [sp, #16]
		dmp_set_gyro_bias(gyro);
 800278a:	a802      	add	r0, sp, #8
 800278c:	f000 fa52 	bl	8002c34 <dmp_set_gyro_bias>
		mpu_get_accel_sens(&accel_sens);
 8002790:	f10d 0002 	add.w	r0, sp, #2
 8002794:	f7ff fa86 	bl	8001ca4 <mpu_get_accel_sens>
		accel[0] *= accel_sens;
 8002798:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800279c:	9a05      	ldr	r2, [sp, #20]
		accel[1] *= accel_sens;
		accel[2] *= accel_sens;
		dmp_set_accel_bias(accel);
 800279e:	a805      	add	r0, sp, #20
		accel[0] *= accel_sens;
 80027a0:	435a      	muls	r2, r3
 80027a2:	9205      	str	r2, [sp, #20]
		accel[1] *= accel_sens;
 80027a4:	9a06      	ldr	r2, [sp, #24]
 80027a6:	435a      	muls	r2, r3
 80027a8:	9206      	str	r2, [sp, #24]
		accel[2] *= accel_sens;
 80027aa:	9a07      	ldr	r2, [sp, #28]
 80027ac:	4353      	muls	r3, r2
 80027ae:	9307      	str	r3, [sp, #28]
		dmp_set_accel_bias(accel);
 80027b0:	f000 faa8 	bl	8002d04 <dmp_set_accel_bias>
		return 0;
 80027b4:	2000      	movs	r0, #0
	}else return 1;
}
 80027b6:	b008      	add	sp, #32
 80027b8:	bd10      	pop	{r4, pc}
	}else return 1;
 80027ba:	2001      	movs	r0, #1
 80027bc:	e7fb      	b.n	80027b6 <run_self_test+0x7a>

080027be <inv_row_2_scale>:
//����ת��
unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
 80027be:	f990 3000 	ldrsb.w	r3, [r0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	dc0c      	bgt.n	80027e0 <inv_row_2_scale+0x22>
        b = 0;
    else if (row[0] < 0)
 80027c6:	d10d      	bne.n	80027e4 <inv_row_2_scale+0x26>
        b = 4;
    else if (row[1] > 0)
 80027c8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	dc0b      	bgt.n	80027e8 <inv_row_2_scale+0x2a>
        b = 1;
    else if (row[1] < 0)
 80027d0:	d10c      	bne.n	80027ec <inv_row_2_scale+0x2e>
        b = 5;
    else if (row[2] > 0)
 80027d2:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	dc0a      	bgt.n	80027f0 <inv_row_2_scale+0x32>
        b = 2;
    else if (row[2] < 0)
 80027da:	d10b      	bne.n	80027f4 <inv_row_2_scale+0x36>
        b = 6;
    else
        b = 7;      // error
 80027dc:	2007      	movs	r0, #7
 80027de:	4770      	bx	lr
        b = 0;
 80027e0:	2000      	movs	r0, #0
 80027e2:	4770      	bx	lr
        b = 4;
 80027e4:	2004      	movs	r0, #4
 80027e6:	4770      	bx	lr
        b = 1;
 80027e8:	2001      	movs	r0, #1
 80027ea:	4770      	bx	lr
        b = 5;
 80027ec:	2005      	movs	r0, #5
 80027ee:	4770      	bx	lr
        b = 2;
 80027f0:	2002      	movs	r0, #2
 80027f2:	4770      	bx	lr
        b = 6;
 80027f4:	2006      	movs	r0, #6
    return b;
}
 80027f6:	4770      	bx	lr

080027f8 <inv_orientation_matrix_to_scalar>:
{
 80027f8:	b510      	push	{r4, lr}
 80027fa:	4602      	mov	r2, r0
    scalar = inv_row_2_scale(mtx);
 80027fc:	f7ff ffdf 	bl	80027be <inv_row_2_scale>
 8002800:	4601      	mov	r1, r0
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8002802:	1cd0      	adds	r0, r2, #3
 8002804:	f7ff ffdb 	bl	80027be <inv_row_2_scale>
 8002808:	4604      	mov	r4, r0
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 800280a:	1d90      	adds	r0, r2, #6
 800280c:	f7ff ffd7 	bl	80027be <inv_row_2_scale>
 8002810:	0180      	lsls	r0, r0, #6
 8002812:	ea40 00c4 	orr.w	r0, r0, r4, lsl #3
 8002816:	4308      	orrs	r0, r1
}
 8002818:	b280      	uxth	r0, r0
 800281a:	bd10      	pop	{r4, pc}

0800281c <mget_ms>:
//�պ���,δ�õ�.
void mget_ms(unsigned long *time)
{

}
 800281c:	4770      	bx	lr
	...

08002820 <mpu_dmp_init>:
//mpu6050,dmp��ʼ��
//����ֵ:0,����
//    ����,ʧ��
uint8_t mpu_dmp_init(void)
{
 8002820:	b510      	push	{r4, lr}
	uint8_t res=0;
	printf("start mpu_init\r\n");
 8002822:	4836      	ldr	r0, [pc, #216]	; (80028fc <mpu_dmp_init+0xdc>)
 8002824:	f003 fd4c 	bl	80062c0 <puts>
	if(mpu_init()==0)	//��ʼ��MPU6050
 8002828:	f7ff fc70 	bl	800210c <mpu_init>
 800282c:	2800      	cmp	r0, #0
 800282e:	d150      	bne.n	80028d2 <mpu_dmp_init+0xb2>
	{	 
		res=mpu_set_sensors(INV_XYZ_GYRO|INV_XYZ_ACCEL);//��������Ҫ�Ĵ�����
 8002830:	2078      	movs	r0, #120	; 0x78
 8002832:	f7ff fc0b 	bl	800204c <mpu_set_sensors>
		if(res)return 1; 
 8002836:	f010 0fff 	tst.w	r0, #255	; 0xff
 800283a:	d14c      	bne.n	80028d6 <mpu_dmp_init+0xb6>
		printf("mpu_set_sensors OK\r\n");
 800283c:	4830      	ldr	r0, [pc, #192]	; (8002900 <mpu_dmp_init+0xe0>)
 800283e:	f003 fd3f 	bl	80062c0 <puts>
		res=mpu_configure_fifo(INV_XYZ_GYRO|INV_XYZ_ACCEL);//����FIFO
 8002842:	2078      	movs	r0, #120	; 0x78
 8002844:	f7ff fa4e 	bl	8001ce4 <mpu_configure_fifo>
		if(res)return 2; 
 8002848:	f010 0fff 	tst.w	r0, #255	; 0xff
 800284c:	d145      	bne.n	80028da <mpu_dmp_init+0xba>
		printf("mpu_configure_fifo OK\r\n");
 800284e:	482d      	ldr	r0, [pc, #180]	; (8002904 <mpu_dmp_init+0xe4>)
 8002850:	f003 fd36 	bl	80062c0 <puts>
		res=mpu_set_sample_rate(DEFAULT_MPU_HZ);	//���ò�����
 8002854:	2064      	movs	r0, #100	; 0x64
 8002856:	f7ff fbb7 	bl	8001fc8 <mpu_set_sample_rate>
		if(res)return 3; 
 800285a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800285e:	d13e      	bne.n	80028de <mpu_dmp_init+0xbe>
		printf("mpu_set_sample_rate OK\r\n");
 8002860:	4829      	ldr	r0, [pc, #164]	; (8002908 <mpu_dmp_init+0xe8>)
 8002862:	f003 fd2d 	bl	80062c0 <puts>
		res=dmp_load_motion_driver_firmware();		//����dmp�̼�
 8002866:	f000 f957 	bl	8002b18 <dmp_load_motion_driver_firmware>
		if(res)return 4;
 800286a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800286e:	d138      	bne.n	80028e2 <mpu_dmp_init+0xc2>
		printf("dmp_load_motion_driver_firmware OK\r\n");
 8002870:	4826      	ldr	r0, [pc, #152]	; (800290c <mpu_dmp_init+0xec>)
 8002872:	f003 fd25 	bl	80062c0 <puts>
		res=dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));//���������Ƿ���
 8002876:	4826      	ldr	r0, [pc, #152]	; (8002910 <mpu_dmp_init+0xf0>)
 8002878:	f7ff ffbe 	bl	80027f8 <inv_orientation_matrix_to_scalar>
 800287c:	f000 f956 	bl	8002b2c <dmp_set_orientation>
		if(res)return 5; 
 8002880:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002884:	d12f      	bne.n	80028e6 <mpu_dmp_init+0xc6>
		printf("dmp_set_orientation OK\r\n");
 8002886:	4823      	ldr	r0, [pc, #140]	; (8002914 <mpu_dmp_init+0xf4>)
 8002888:	f003 fd1a 	bl	80062c0 <puts>
		res=dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT|DMP_FEATURE_TAP|	//����dmp����
 800288c:	f240 1073 	movw	r0, #371	; 0x173
 8002890:	f000 fc5c 	bl	800314c <dmp_enable_feature>
		    DMP_FEATURE_ANDROID_ORIENT|DMP_FEATURE_SEND_RAW_ACCEL|DMP_FEATURE_SEND_CAL_GYRO|
		    DMP_FEATURE_GYRO_CAL);
		if(res)return 6; 
 8002894:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002898:	d127      	bne.n	80028ea <mpu_dmp_init+0xca>
		printf("dmp_enable_feature OK\r\n");
 800289a:	481f      	ldr	r0, [pc, #124]	; (8002918 <mpu_dmp_init+0xf8>)
 800289c:	f003 fd10 	bl	80062c0 <puts>
		res=dmp_set_fifo_rate(DEFAULT_MPU_HZ);	//����DMP�������(��󲻳���200Hz)
 80028a0:	2064      	movs	r0, #100	; 0x64
 80028a2:	f000 faa5 	bl	8002df0 <dmp_set_fifo_rate>
		if(res)return 7;
 80028a6:	f010 0fff 	tst.w	r0, #255	; 0xff
 80028aa:	d120      	bne.n	80028ee <mpu_dmp_init+0xce>
		printf("dmp_set_fifo_rate OK\r\n");
 80028ac:	481b      	ldr	r0, [pc, #108]	; (800291c <mpu_dmp_init+0xfc>)
 80028ae:	f003 fd07 	bl	80062c0 <puts>
		res=run_self_test();		//�Լ�
 80028b2:	f7ff ff43 	bl	800273c <run_self_test>
		if(res)return 8;
 80028b6:	b9e0      	cbnz	r0, 80028f2 <mpu_dmp_init+0xd2>
		printf("run_self_test OK\r\n");
 80028b8:	4819      	ldr	r0, [pc, #100]	; (8002920 <mpu_dmp_init+0x100>)
 80028ba:	f003 fd01 	bl	80062c0 <puts>
		res=mpu_set_dmp_state(1);	//ʹ��DMP
 80028be:	2001      	movs	r0, #1
 80028c0:	f7ff fd7a 	bl	80023b8 <mpu_set_dmp_state>
 80028c4:	b2c4      	uxtb	r4, r0
		if(res)return 9;
 80028c6:	b9b4      	cbnz	r4, 80028f6 <mpu_dmp_init+0xd6>
		printf("mpu_set_dmp_state OK\r\n");
 80028c8:	4816      	ldr	r0, [pc, #88]	; (8002924 <mpu_dmp_init+0x104>)
 80028ca:	f003 fcf9 	bl	80062c0 <puts>
	}else return 10;
	return 0;
}
 80028ce:	4620      	mov	r0, r4
 80028d0:	bd10      	pop	{r4, pc}
	}else return 10;
 80028d2:	240a      	movs	r4, #10
 80028d4:	e7fb      	b.n	80028ce <mpu_dmp_init+0xae>
		if(res)return 1; 
 80028d6:	2401      	movs	r4, #1
 80028d8:	e7f9      	b.n	80028ce <mpu_dmp_init+0xae>
		if(res)return 2; 
 80028da:	2402      	movs	r4, #2
 80028dc:	e7f7      	b.n	80028ce <mpu_dmp_init+0xae>
		if(res)return 3; 
 80028de:	2403      	movs	r4, #3
 80028e0:	e7f5      	b.n	80028ce <mpu_dmp_init+0xae>
		if(res)return 4;
 80028e2:	2404      	movs	r4, #4
 80028e4:	e7f3      	b.n	80028ce <mpu_dmp_init+0xae>
		if(res)return 5; 
 80028e6:	2405      	movs	r4, #5
 80028e8:	e7f1      	b.n	80028ce <mpu_dmp_init+0xae>
		if(res)return 6; 
 80028ea:	2406      	movs	r4, #6
 80028ec:	e7ef      	b.n	80028ce <mpu_dmp_init+0xae>
		if(res)return 7;
 80028ee:	2407      	movs	r4, #7
 80028f0:	e7ed      	b.n	80028ce <mpu_dmp_init+0xae>
		if(res)return 8;
 80028f2:	2408      	movs	r4, #8
 80028f4:	e7eb      	b.n	80028ce <mpu_dmp_init+0xae>
		if(res)return 9;
 80028f6:	2409      	movs	r4, #9
 80028f8:	e7e9      	b.n	80028ce <mpu_dmp_init+0xae>
 80028fa:	bf00      	nop
 80028fc:	0800c3b8 	.word	0x0800c3b8
 8002900:	0800c3c8 	.word	0x0800c3c8
 8002904:	0800c3dc 	.word	0x0800c3dc
 8002908:	0800c3f3 	.word	0x0800c3f3
 800290c:	0800c40b 	.word	0x0800c40b
 8002910:	20000000 	.word	0x20000000
 8002914:	0800c42f 	.word	0x0800c42f
 8002918:	0800c447 	.word	0x0800c447
 800291c:	0800c45e 	.word	0x0800c45e
 8002920:	0800c474 	.word	0x0800c474
 8002924:	0800c486 	.word	0x0800c486

08002928 <mpu_dmp_get_data>:
//roll:�����  ����:0.1��   ��Χ:-180.0��<---> +180.0��
//yaw:�����   ����:0.1��   ��Χ:-180.0��<---> +180.0��
//����ֵ:0,����
//    ����,ʧ��
uint8_t mpu_dmp_get_data(float *pitch,float *roll,float *yaw)
{
 8002928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800292c:	b091      	sub	sp, #68	; 0x44
	float q0=1.0f,q1=0.0f,q2=0.0f,q3=0.0f;
	unsigned long sensor_timestamp;
	short gyro[3], accel[3], sensors;
	unsigned char more;
	long quat[4]; 
	if(dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more))return 1;	 
 800292e:	f10d 0319 	add.w	r3, sp, #25
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	f10d 031a 	add.w	r3, sp, #26
{
 8002938:	e9cd 1204 	strd	r1, r2, [sp, #16]
	if(dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more))return 1;	 
 800293c:	9300      	str	r3, [sp, #0]
{
 800293e:	4681      	mov	r9, r0
	if(dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more))return 1;	 
 8002940:	ab07      	add	r3, sp, #28
 8002942:	aa0c      	add	r2, sp, #48	; 0x30
 8002944:	a90a      	add	r1, sp, #40	; 0x28
 8002946:	a808      	add	r0, sp, #32
 8002948:	f000 fcd2 	bl	80032f0 <dmp_read_fifo>
 800294c:	9003      	str	r0, [sp, #12]
 800294e:	2800      	cmp	r0, #0
 8002950:	f040 80c6 	bne.w	8002ae0 <mpu_dmp_get_data+0x1b8>
	if (sensors & INV_XYZ_ACCEL)
	send_packet(PACKET_TYPE_ACCEL, accel); */
	/* Unlike gyro and accel, quaternions are written to the FIFO in the body frame, q30.
	 * The orientation is set by the scalar passed to dmp_set_orientation during initialization. 
	**/
	if(sensors&INV_WXYZ_QUAT) 
 8002954:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8002958:	05db      	lsls	r3, r3, #23
 800295a:	f140 80c3 	bpl.w	8002ae4 <mpu_dmp_get_data+0x1bc>
	{
		q0 = quat[0] / q30;	//q30��ʽת��Ϊ������
 800295e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002960:	f7fe f99c 	bl	8000c9c <__aeabi_i2f>
 8002964:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002968:	f7fe f9ec 	bl	8000d44 <__aeabi_fmul>
 800296c:	4606      	mov	r6, r0
		q1 = quat[1] / q30;
 800296e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002970:	f7fe f994 	bl	8000c9c <__aeabi_i2f>
 8002974:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002978:	f7fe f9e4 	bl	8000d44 <__aeabi_fmul>
 800297c:	4605      	mov	r5, r0
		q2 = quat[2] / q30;
 800297e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002980:	f7fe f98c 	bl	8000c9c <__aeabi_i2f>
 8002984:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002988:	f7fe f9dc 	bl	8000d44 <__aeabi_fmul>
 800298c:	4604      	mov	r4, r0
		q3 = quat[3] / q30; 
 800298e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002990:	f7fe f984 	bl	8000c9c <__aeabi_i2f>
 8002994:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002998:	f7fe f9d4 	bl	8000d44 <__aeabi_fmul>
		//����õ�������/�����/�����
		*pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
 800299c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
		q3 = quat[3] / q30; 
 80029a0:	4607      	mov	r7, r0
		*pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
 80029a2:	4628      	mov	r0, r5
 80029a4:	f7fe f9ce 	bl	8000d44 <__aeabi_fmul>
 80029a8:	4631      	mov	r1, r6
 80029aa:	4680      	mov	r8, r0
 80029ac:	4630      	mov	r0, r6
 80029ae:	f7fe f8c1 	bl	8000b34 <__addsf3>
 80029b2:	4639      	mov	r1, r7
 80029b4:	4682      	mov	sl, r0
 80029b6:	4640      	mov	r0, r8
 80029b8:	f7fe f9c4 	bl	8000d44 <__aeabi_fmul>
 80029bc:	4621      	mov	r1, r4
 80029be:	4683      	mov	fp, r0
 80029c0:	4650      	mov	r0, sl
 80029c2:	f7fe f9bf 	bl	8000d44 <__aeabi_fmul>
 80029c6:	4601      	mov	r1, r0
 80029c8:	4658      	mov	r0, fp
 80029ca:	f7fe f8b3 	bl	8000b34 <__addsf3>
 80029ce:	f7fd fd2b 	bl	8000428 <__aeabi_f2d>
 80029d2:	f008 ff45 	bl	800b860 <asin>
 80029d6:	a344      	add	r3, pc, #272	; (adr r3, 8002ae8 <mpu_dmp_get_data+0x1c0>)
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	f7fd fd7c 	bl	80004d8 <__aeabi_dmul>
 80029e0:	f7fe f852 	bl	8000a88 <__aeabi_d2f>
		*roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
 80029e4:	4621      	mov	r1, r4
		*pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
 80029e6:	f8c9 0000 	str.w	r0, [r9]
		*roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
 80029ea:	4620      	mov	r0, r4
 80029ec:	f7fe f8a2 	bl	8000b34 <__addsf3>
 80029f0:	4629      	mov	r1, r5
 80029f2:	4683      	mov	fp, r0
 80029f4:	4640      	mov	r0, r8
 80029f6:	f7fe f9a5 	bl	8000d44 <__aeabi_fmul>
 80029fa:	4621      	mov	r1, r4
 80029fc:	4680      	mov	r8, r0
 80029fe:	4658      	mov	r0, fp
 8002a00:	f7fe f9a0 	bl	8000d44 <__aeabi_fmul>
 8002a04:	4601      	mov	r1, r0
 8002a06:	4640      	mov	r0, r8
 8002a08:	f7fe f892 	bl	8000b30 <__aeabi_fsub>
 8002a0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a10:	f7fe f890 	bl	8000b34 <__addsf3>
 8002a14:	f7fd fd08 	bl	8000428 <__aeabi_f2d>
 8002a18:	4680      	mov	r8, r0
 8002a1a:	4689      	mov	r9, r1
 8002a1c:	4658      	mov	r0, fp
 8002a1e:	4639      	mov	r1, r7
 8002a20:	f7fe f990 	bl	8000d44 <__aeabi_fmul>
 8002a24:	4629      	mov	r1, r5
 8002a26:	4683      	mov	fp, r0
 8002a28:	4650      	mov	r0, sl
 8002a2a:	f7fe f98b 	bl	8000d44 <__aeabi_fmul>
 8002a2e:	4601      	mov	r1, r0
 8002a30:	4658      	mov	r0, fp
 8002a32:	f7fe f87f 	bl	8000b34 <__addsf3>
 8002a36:	f7fd fcf7 	bl	8000428 <__aeabi_f2d>
 8002a3a:	4642      	mov	r2, r8
 8002a3c:	464b      	mov	r3, r9
 8002a3e:	f008 ff63 	bl	800b908 <atan2>
 8002a42:	a329      	add	r3, pc, #164	; (adr r3, 8002ae8 <mpu_dmp_get_data+0x1c0>)
 8002a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a48:	f7fd fd46 	bl	80004d8 <__aeabi_dmul>
 8002a4c:	f7fe f81c 	bl	8000a88 <__aeabi_d2f>
 8002a50:	9b04      	ldr	r3, [sp, #16]
		*yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
 8002a52:	4631      	mov	r1, r6
		*roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
 8002a54:	6018      	str	r0, [r3, #0]
		*yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
 8002a56:	4630      	mov	r0, r6
 8002a58:	f7fe f974 	bl	8000d44 <__aeabi_fmul>
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	4680      	mov	r8, r0
 8002a60:	4628      	mov	r0, r5
 8002a62:	f7fe f96f 	bl	8000d44 <__aeabi_fmul>
 8002a66:	4601      	mov	r1, r0
 8002a68:	4640      	mov	r0, r8
 8002a6a:	f7fe f863 	bl	8000b34 <__addsf3>
 8002a6e:	4621      	mov	r1, r4
 8002a70:	4680      	mov	r8, r0
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7fe f966 	bl	8000d44 <__aeabi_fmul>
 8002a78:	4601      	mov	r1, r0
 8002a7a:	4640      	mov	r0, r8
 8002a7c:	f7fe f858 	bl	8000b30 <__aeabi_fsub>
 8002a80:	4639      	mov	r1, r7
 8002a82:	4680      	mov	r8, r0
 8002a84:	4638      	mov	r0, r7
 8002a86:	f7fe f95d 	bl	8000d44 <__aeabi_fmul>
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	f7fe f84f 	bl	8000b30 <__aeabi_fsub>
 8002a92:	f7fd fcc9 	bl	8000428 <__aeabi_f2d>
 8002a96:	4680      	mov	r8, r0
 8002a98:	4689      	mov	r9, r1
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	f7fe f951 	bl	8000d44 <__aeabi_fmul>
 8002aa2:	4639      	mov	r1, r7
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	f7fe f94c 	bl	8000d44 <__aeabi_fmul>
 8002aac:	4601      	mov	r1, r0
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7fe f840 	bl	8000b34 <__addsf3>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	f7fe f83d 	bl	8000b34 <__addsf3>
 8002aba:	f7fd fcb5 	bl	8000428 <__aeabi_f2d>
 8002abe:	4642      	mov	r2, r8
 8002ac0:	464b      	mov	r3, r9
 8002ac2:	f008 ff21 	bl	800b908 <atan2>
 8002ac6:	a308      	add	r3, pc, #32	; (adr r3, 8002ae8 <mpu_dmp_get_data+0x1c0>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f7fd fd04 	bl	80004d8 <__aeabi_dmul>
 8002ad0:	f7fd ffda 	bl	8000a88 <__aeabi_d2f>
 8002ad4:	9b05      	ldr	r3, [sp, #20]
 8002ad6:	6018      	str	r0, [r3, #0]
	}else return 2;
	return 0;
 8002ad8:	9803      	ldr	r0, [sp, #12]
}
 8002ada:	b011      	add	sp, #68	; 0x44
 8002adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more))return 1;	 
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	e7fa      	b.n	8002ada <mpu_dmp_get_data+0x1b2>
	}else return 2;
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	e7f8      	b.n	8002ada <mpu_dmp_get_data+0x1b2>
 8002ae8:	66666666 	.word	0x66666666
 8002aec:	404ca666 	.word	0x404ca666

08002af0 <dmp_enable_gyro_cal.part.0>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
 8002af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8002af2:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <dmp_enable_gyro_cal.part.0+0x24>)
 8002af4:	ab01      	add	r3, sp, #4
 8002af6:	6810      	ldr	r0, [r2, #0]
 8002af8:	6851      	ldr	r1, [r2, #4]
 8002afa:	7a12      	ldrb	r2, [r2, #8]
 8002afc:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8002afe:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8002b00:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8002b02:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8002b06:	aa01      	add	r2, sp, #4
 8002b08:	f7ff fba6 	bl	8002258 <mpu_write_mem>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
 8002b0c:	b005      	add	sp, #20
 8002b0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b12:	bf00      	nop
 8002b14:	0800c368 	.word	0x0800c368

08002b18 <dmp_load_motion_driver_firmware>:
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8002b18:	23c8      	movs	r3, #200	; 0xc8
 8002b1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b1e:	4902      	ldr	r1, [pc, #8]	; (8002b28 <dmp_load_motion_driver_firmware+0x10>)
 8002b20:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8002b24:	f7ff bbf8 	b.w	8002318 <mpu_load_firmware>
 8002b28:	0800c570 	.word	0x0800c570

08002b2c <dmp_set_orientation>:
{
 8002b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8002b2e:	f64c 534c 	movw	r3, #52556	; 0xcd4c
 8002b32:	f8ad 3008 	strh.w	r3, [sp, #8]
 8002b36:	236c      	movs	r3, #108	; 0x6c
 8002b38:	f88d 300a 	strb.w	r3, [sp, #10]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8002b3c:	f64c 130c 	movw	r3, #51468	; 0xc90c
 8002b40:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002b44:	232c      	movs	r3, #44	; 0x2c
    gyro_regs[0] = gyro_axes[orient & 3];
 8002b46:	f000 0103 	and.w	r1, r0, #3
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8002b4a:	f88d 300e 	strb.w	r3, [sp, #14]
    gyro_regs[0] = gyro_axes[orient & 3];
 8002b4e:	ab04      	add	r3, sp, #16
 8002b50:	4419      	add	r1, r3
 8002b52:	f811 3c08 	ldrb.w	r3, [r1, #-8]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8002b56:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    gyro_regs[0] = gyro_axes[orient & 3];
 8002b5a:	f88d 3000 	strb.w	r3, [sp]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8002b5e:	ab04      	add	r3, sp, #16
 8002b60:	441a      	add	r2, r3
 8002b62:	f812 3c08 	ldrb.w	r3, [r2, #-8]
{
 8002b66:	4604      	mov	r4, r0
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8002b68:	f88d 3001 	strb.w	r3, [sp, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8002b6c:	f3c0 1381 	ubfx	r3, r0, #6, #2
 8002b70:	a804      	add	r0, sp, #16
 8002b72:	4403      	add	r3, r0
 8002b74:	f813 0c08 	ldrb.w	r0, [r3, #-8]
    accel_regs[0] = accel_axes[orient & 3];
 8002b78:	f811 1c04 	ldrb.w	r1, [r1, #-4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8002b7c:	f812 2c04 	ldrb.w	r2, [r2, #-4]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8002b80:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8002b84:	f88d 0002 	strb.w	r0, [sp, #2]
    accel_regs[0] = accel_axes[orient & 3];
 8002b88:	f88d 1004 	strb.w	r1, [sp, #4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8002b8c:	f88d 2005 	strb.w	r2, [sp, #5]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8002b90:	2103      	movs	r1, #3
 8002b92:	466a      	mov	r2, sp
 8002b94:	f240 4026 	movw	r0, #1062	; 0x426
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8002b98:	f88d 3006 	strb.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8002b9c:	f7ff fb5c 	bl	8002258 <mpu_write_mem>
 8002ba0:	b118      	cbz	r0, 8002baa <dmp_set_orientation+0x7e>
        return -1;
 8002ba2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002ba6:	b004      	add	sp, #16
 8002ba8:	bd10      	pop	{r4, pc}
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8002baa:	aa01      	add	r2, sp, #4
 8002bac:	2103      	movs	r1, #3
 8002bae:	f240 402a 	movw	r0, #1066	; 0x42a
 8002bb2:	f7ff fb51 	bl	8002258 <mpu_write_mem>
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d1f3      	bne.n	8002ba2 <dmp_set_orientation+0x76>
    memcpy(gyro_regs, gyro_sign, 3);
 8002bba:	f245 6336 	movw	r3, #22070	; 0x5636
 8002bbe:	f8ad 3000 	strh.w	r3, [sp]
 8002bc2:	2376      	movs	r3, #118	; 0x76
 8002bc4:	f88d 3002 	strb.w	r3, [sp, #2]
    memcpy(accel_regs, accel_sign, 3);
 8002bc8:	f244 6326 	movw	r3, #17958	; 0x4626
 8002bcc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002bd0:	2366      	movs	r3, #102	; 0x66
    if (orient & 4) {
 8002bd2:	0761      	lsls	r1, r4, #29
    memcpy(accel_regs, accel_sign, 3);
 8002bd4:	f88d 3006 	strb.w	r3, [sp, #6]
        gyro_regs[0] |= 1;
 8002bd8:	bf41      	itttt	mi
 8002bda:	2337      	movmi	r3, #55	; 0x37
 8002bdc:	f88d 3000 	strbmi.w	r3, [sp]
        accel_regs[0] |= 1;
 8002be0:	2327      	movmi	r3, #39	; 0x27
 8002be2:	f88d 3004 	strbmi.w	r3, [sp, #4]
    if (orient & 0x20) {
 8002be6:	06a2      	lsls	r2, r4, #26
        gyro_regs[1] |= 1;
 8002be8:	bf41      	itttt	mi
 8002bea:	2357      	movmi	r3, #87	; 0x57
 8002bec:	f88d 3001 	strbmi.w	r3, [sp, #1]
        accel_regs[1] |= 1;
 8002bf0:	2347      	movmi	r3, #71	; 0x47
 8002bf2:	f88d 3005 	strbmi.w	r3, [sp, #5]
    if (orient & 0x100) {
 8002bf6:	05e3      	lsls	r3, r4, #23
        gyro_regs[2] |= 1;
 8002bf8:	bf42      	ittt	mi
 8002bfa:	2377      	movmi	r3, #119	; 0x77
 8002bfc:	f88d 3002 	strbmi.w	r3, [sp, #2]
        accel_regs[2] |= 1;
 8002c00:	2367      	movmi	r3, #103	; 0x67
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8002c02:	466a      	mov	r2, sp
 8002c04:	f04f 0103 	mov.w	r1, #3
 8002c08:	f44f 6088 	mov.w	r0, #1088	; 0x440
        accel_regs[2] |= 1;
 8002c0c:	bf48      	it	mi
 8002c0e:	f88d 3006 	strbmi.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8002c12:	f7ff fb21 	bl	8002258 <mpu_write_mem>
 8002c16:	2800      	cmp	r0, #0
 8002c18:	d1c3      	bne.n	8002ba2 <dmp_set_orientation+0x76>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8002c1a:	aa01      	add	r2, sp, #4
 8002c1c:	2103      	movs	r1, #3
 8002c1e:	f240 4031 	movw	r0, #1073	; 0x431
 8002c22:	f7ff fb19 	bl	8002258 <mpu_write_mem>
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d1bb      	bne.n	8002ba2 <dmp_set_orientation+0x76>
    dmp.orient = orient;
 8002c2a:	4b01      	ldr	r3, [pc, #4]	; (8002c30 <dmp_set_orientation+0x104>)
 8002c2c:	811c      	strh	r4, [r3, #8]
    return 0;
 8002c2e:	e7ba      	b.n	8002ba6 <dmp_set_orientation+0x7a>
 8002c30:	20000a10 	.word	0x20000a10

08002c34 <dmp_set_gyro_bias>:
    gyro_bias_body[0] = bias[dmp.orient & 3];
 8002c34:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <dmp_set_gyro_bias+0xc8>)
{
 8002c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    gyro_bias_body[0] = bias[dmp.orient & 3];
 8002c38:	891b      	ldrh	r3, [r3, #8]
 8002c3a:	f003 0203 	and.w	r2, r3, #3
 8002c3e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    if (dmp.orient & 4)
 8002c42:	0759      	lsls	r1, r3, #29
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8002c44:	f3c3 02c1 	ubfx	r2, r3, #3, #2
 8002c48:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
        gyro_bias_body[0] *= -1;
 8002c4c:	bf48      	it	mi
 8002c4e:	4264      	negmi	r4, r4
    if (dmp.orient & 0x20)
 8002c50:	069a      	lsls	r2, r3, #26
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8002c52:	f3c3 1281 	ubfx	r2, r3, #6, #2
 8002c56:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8002c5a:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <dmp_set_gyro_bias+0xcc>)
        gyro_bias_body[1] *= -1;
 8002c5c:	bf48      	it	mi
 8002c5e:	4276      	negmi	r6, r6
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8002c60:	fb84 4502 	smull	r4, r5, r4, r2
    if (dmp.orient & 0x100)
 8002c64:	05db      	lsls	r3, r3, #23
        gyro_bias_body[2] *= -1;
 8002c66:	bf48      	it	mi
 8002c68:	4240      	negmi	r0, r0
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8002c6a:	fb80 0102 	smull	r0, r1, r0, r2
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8002c6e:	0fa3      	lsrs	r3, r4, #30
 8002c70:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8002c74:	fb86 6702 	smull	r6, r7, r6, r2
    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8002c78:	161a      	asrs	r2, r3, #24
 8002c7a:	f88d 2004 	strb.w	r2, [sp, #4]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 8002c7e:	141a      	asrs	r2, r3, #16
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8002c80:	0f84      	lsrs	r4, r0, #30
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 8002c82:	f88d 2005 	strb.w	r2, [sp, #5]
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8002c86:	121a      	asrs	r2, r3, #8
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8002c88:	0fb5      	lsrs	r5, r6, #30
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8002c8a:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8002c8e:	f88d 2006 	strb.w	r2, [sp, #6]
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 8002c92:	2104      	movs	r1, #4
 8002c94:	aa01      	add	r2, sp, #4
 8002c96:	f44f 7074 	mov.w	r0, #976	; 0x3d0
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8002c9a:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8002c9e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 8002ca2:	f7ff fad9 	bl	8002258 <mpu_write_mem>
 8002ca6:	b118      	cbz	r0, 8002cb0 <dmp_set_gyro_bias+0x7c>
        return -1;
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002cac:	b003      	add	sp, #12
 8002cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 8002cb0:	162b      	asrs	r3, r5, #24
 8002cb2:	f88d 3004 	strb.w	r3, [sp, #4]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 8002cb6:	142b      	asrs	r3, r5, #16
 8002cb8:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8002cbc:	aa01      	add	r2, sp, #4
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 8002cbe:	122b      	asrs	r3, r5, #8
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8002cc0:	2104      	movs	r1, #4
 8002cc2:	f44f 7075 	mov.w	r0, #980	; 0x3d4
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 8002cc6:	f88d 3006 	strb.w	r3, [sp, #6]
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 8002cca:	f88d 5007 	strb.w	r5, [sp, #7]
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 8002cce:	f7ff fac3 	bl	8002258 <mpu_write_mem>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d1e8      	bne.n	8002ca8 <dmp_set_gyro_bias+0x74>
    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 8002cd6:	1623      	asrs	r3, r4, #24
 8002cd8:	f88d 3004 	strb.w	r3, [sp, #4]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8002cdc:	1423      	asrs	r3, r4, #16
 8002cde:	f88d 3005 	strb.w	r3, [sp, #5]
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8002ce2:	aa01      	add	r2, sp, #4
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 8002ce4:	1223      	asrs	r3, r4, #8
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8002ce6:	2104      	movs	r1, #4
 8002ce8:	f44f 7076 	mov.w	r0, #984	; 0x3d8
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 8002cec:	f88d 3006 	strb.w	r3, [sp, #6]
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8002cf0:	f88d 4007 	strb.w	r4, [sp, #7]
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 8002cf4:	f7ff fab0 	bl	8002258 <mpu_write_mem>
 8002cf8:	e7d8      	b.n	8002cac <dmp_set_gyro_bias+0x78>
 8002cfa:	bf00      	nop
 8002cfc:	20000a10 	.word	0x20000a10
 8002d00:	02cae309 	.word	0x02cae309

08002d04 <dmp_set_accel_bias>:
{
 8002d04:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
 8002d08:	4605      	mov	r5, r0
    mpu_get_accel_sens(&accel_sens);
 8002d0a:	f10d 0002 	add.w	r0, sp, #2
 8002d0e:	f7fe ffc9 	bl	8001ca4 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8002d12:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8002d16:	03d3      	lsls	r3, r2, #15
 8002d18:	0c56      	lsrs	r6, r2, #17
    accel_bias_body[0] = bias[dmp.orient & 3];
 8002d1a:	4a34      	ldr	r2, [pc, #208]	; (8002dec <dmp_set_accel_bias+0xe8>)
 8002d1c:	8911      	ldrh	r1, [r2, #8]
 8002d1e:	f001 0203 	and.w	r2, r1, #3
 8002d22:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8002d26:	f3c1 02c1 	ubfx	r2, r1, #3, #2
    if (dmp.orient & 4)
 8002d2a:	0748      	lsls	r0, r1, #29
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8002d2c:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
        accel_bias_body[0] *= -1;
 8002d30:	bf48      	it	mi
 8002d32:	4264      	negmi	r4, r4
    if (dmp.orient & 0x20)
 8002d34:	068a      	lsls	r2, r1, #26
        accel_bias_body[1] *= -1;
 8002d36:	bf48      	it	mi
 8002d38:	4240      	negmi	r0, r0
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8002d3a:	f3c1 1281 	ubfx	r2, r1, #6, #2
    if (dmp.orient & 0x100)
 8002d3e:	05c9      	lsls	r1, r1, #23
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 8002d40:	fb04 f106 	mul.w	r1, r4, r6
 8002d44:	ea4f 79e4 	mov.w	r9, r4, asr #31
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8002d48:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 8002d4c:	fb03 1109 	mla	r1, r3, r9, r1
 8002d50:	fba4 4503 	umull	r4, r5, r4, r3
 8002d54:	440d      	add	r5, r1
 8002d56:	ea4f 7c94 	mov.w	ip, r4, lsr #30
 8002d5a:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
        accel_bias_body[2] *= -1;
 8002d5e:	bf48      	it	mi
 8002d60:	4252      	negmi	r2, r2
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8002d62:	fb00 f506 	mul.w	r5, r0, r6
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8002d66:	4356      	muls	r6, r2
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8002d68:	ea4f 79e0 	mov.w	r9, r0, asr #31
 8002d6c:	fb03 5509 	mla	r5, r3, r9, r5
 8002d70:	fba0 0103 	umull	r0, r1, r0, r3
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8002d74:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8002d78:	fb03 6609 	mla	r6, r3, r9, r6
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8002d80:	4429      	add	r1, r5
 8002d82:	0f84      	lsrs	r4, r0, #30
 8002d84:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8002d88:	4433      	add	r3, r6
 8002d8a:	0f91      	lsrs	r1, r2, #30
 8002d8c:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 8002d90:	ea4f 632c 	mov.w	r3, ip, asr #24
 8002d94:	f88d 3004 	strb.w	r3, [sp, #4]
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 8002d98:	ea4f 432c 	mov.w	r3, ip, asr #16
 8002d9c:	f88d 3005 	strb.w	r3, [sp, #5]
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 8002da0:	ea4f 232c 	mov.w	r3, ip, asr #8
 8002da4:	f88d 3006 	strb.w	r3, [sp, #6]
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 8002da8:	1623      	asrs	r3, r4, #24
 8002daa:	f88d 3008 	strb.w	r3, [sp, #8]
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 8002dae:	1423      	asrs	r3, r4, #16
 8002db0:	f88d 3009 	strb.w	r3, [sp, #9]
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 8002db4:	1223      	asrs	r3, r4, #8
 8002db6:	f88d 300a 	strb.w	r3, [sp, #10]
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8002dba:	160b      	asrs	r3, r1, #24
 8002dbc:	f88d 300c 	strb.w	r3, [sp, #12]
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8002dc0:	140b      	asrs	r3, r1, #16
 8002dc2:	f88d 300d 	strb.w	r3, [sp, #13]
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8002dc6:	f88d 100f 	strb.w	r1, [sp, #15]
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 8002dca:	120b      	asrs	r3, r1, #8
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8002dcc:	aa01      	add	r2, sp, #4
 8002dce:	210c      	movs	r1, #12
 8002dd0:	f44f 7025 	mov.w	r0, #660	; 0x294
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 8002dd4:	f88d c007 	strb.w	ip, [sp, #7]
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 8002dd8:	f88d 400b 	strb.w	r4, [sp, #11]
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 8002ddc:	f88d 300e 	strb.w	r3, [sp, #14]
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8002de0:	f7ff fa3a 	bl	8002258 <mpu_write_mem>
}
 8002de4:	b004      	add	sp, #16
 8002de6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8002dea:	bf00      	nop
 8002dec:	20000a10 	.word	0x20000a10

08002df0 <dmp_set_fifo_rate>:
{
 8002df0:	b510      	push	{r4, lr}
 8002df2:	4604      	mov	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <dmp_set_fifo_rate+0x58>)
{
 8002df6:	b086      	sub	sp, #24
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8002df8:	6810      	ldr	r0, [r2, #0]
 8002dfa:	6851      	ldr	r1, [r2, #4]
 8002dfc:	ab03      	add	r3, sp, #12
 8002dfe:	c303      	stmia	r3!, {r0, r1}
 8002e00:	6890      	ldr	r0, [r2, #8]
    if (rate > DMP_SAMPLE_RATE)
 8002e02:	2cc8      	cmp	r4, #200	; 0xc8
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8002e04:	6018      	str	r0, [r3, #0]
    if (rate > DMP_SAMPLE_RATE)
 8002e06:	d903      	bls.n	8002e10 <dmp_set_fifo_rate+0x20>
        return -1;
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002e0c:	b006      	add	sp, #24
 8002e0e:	bd10      	pop	{r4, pc}
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8002e10:	2300      	movs	r3, #0
 8002e12:	f88d 3004 	strb.w	r3, [sp, #4]
    div = DMP_SAMPLE_RATE / rate - 1;
 8002e16:	23c8      	movs	r3, #200	; 0xc8
 8002e18:	fb93 f3f4 	sdiv	r3, r3, r4
    if (mpu_write_mem(D_0_22, 2, tmp))
 8002e1c:	aa01      	add	r2, sp, #4
    div = DMP_SAMPLE_RATE / rate - 1;
 8002e1e:	3b01      	subs	r3, #1
    if (mpu_write_mem(D_0_22, 2, tmp))
 8002e20:	2102      	movs	r1, #2
 8002e22:	f240 2016 	movw	r0, #534	; 0x216
    tmp[1] = (unsigned char)(div & 0xFF);
 8002e26:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8002e2a:	f7ff fa15 	bl	8002258 <mpu_write_mem>
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	d1ea      	bne.n	8002e08 <dmp_set_fifo_rate+0x18>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8002e32:	aa03      	add	r2, sp, #12
 8002e34:	210c      	movs	r1, #12
 8002e36:	f640 20c1 	movw	r0, #2753	; 0xac1
 8002e3a:	f7ff fa0d 	bl	8002258 <mpu_write_mem>
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d1e2      	bne.n	8002e08 <dmp_set_fifo_rate+0x18>
    dmp.fifo_rate = rate;
 8002e42:	4b02      	ldr	r3, [pc, #8]	; (8002e4c <dmp_set_fifo_rate+0x5c>)
 8002e44:	819c      	strh	r4, [r3, #12]
    return 0;
 8002e46:	e7e1      	b.n	8002e0c <dmp_set_fifo_rate+0x1c>
 8002e48:	0800c371 	.word	0x0800c371
 8002e4c:	20000a10 	.word	0x20000a10

08002e50 <dmp_set_tap_thresh>:
{
 8002e50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e52:	4604      	mov	r4, r0
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8002e54:	0760      	lsls	r0, r4, #29
 8002e56:	d102      	bne.n	8002e5e <dmp_set_tap_thresh+0xe>
        return -1;
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	e046      	b.n	8002eec <dmp_set_tap_thresh+0x9c>
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8002e5e:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8002e62:	d8f9      	bhi.n	8002e58 <dmp_set_tap_thresh+0x8>
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8002e64:	4608      	mov	r0, r1
 8002e66:	f7fd ff15 	bl	8000c94 <__aeabi_ui2f>
 8002e6a:	4946      	ldr	r1, [pc, #280]	; (8002f84 <dmp_set_tap_thresh+0x134>)
 8002e6c:	f7fe f81e 	bl	8000eac <__aeabi_fdiv>
 8002e70:	4605      	mov	r5, r0
    mpu_get_accel_fsr(&accel_fsr);
 8002e72:	f10d 0003 	add.w	r0, sp, #3
 8002e76:	f7fe fe45 	bl	8001b04 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8002e7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d044      	beq.n	8002f0c <dmp_set_tap_thresh+0xbc>
 8002e82:	d835      	bhi.n	8002ef0 <dmp_set_tap_thresh+0xa0>
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d1e7      	bne.n	8002e58 <dmp_set_tap_thresh+0x8>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8002e88:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	f7fd ff59 	bl	8000d44 <__aeabi_fmul>
 8002e92:	f7fe f943 	bl	800111c <__aeabi_f2uiz>
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8002e96:	493c      	ldr	r1, [pc, #240]	; (8002f88 <dmp_set_tap_thresh+0x138>)
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8002e98:	b286      	uxth	r6, r0
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f7fd ff52 	bl	8000d44 <__aeabi_fmul>
 8002ea0:	f7fe f93c 	bl	800111c <__aeabi_f2uiz>
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8002ea4:	0a33      	lsrs	r3, r6, #8
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8002ea6:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8002ea8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (axis & TAP_X) {
 8002eac:	07e2      	lsls	r2, r4, #31
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8002eae:	ea4f 2310 	mov.w	r3, r0, lsr #8
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8002eb2:	f88d 6005 	strb.w	r6, [sp, #5]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8002eb6:	f88d 3006 	strb.w	r3, [sp, #6]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8002eba:	f88d 0007 	strb.w	r0, [sp, #7]
    if (axis & TAP_X) {
 8002ebe:	d439      	bmi.n	8002f34 <dmp_set_tap_thresh+0xe4>
    if (axis & TAP_Y) {
 8002ec0:	07a3      	lsls	r3, r4, #30
 8002ec2:	d510      	bpl.n	8002ee6 <dmp_set_tap_thresh+0x96>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8002ec4:	aa01      	add	r2, sp, #4
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8002ecc:	f7ff f9c4 	bl	8002258 <mpu_write_mem>
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d1c1      	bne.n	8002e58 <dmp_set_tap_thresh+0x8>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8002ed4:	f10d 0206 	add.w	r2, sp, #6
 8002ed8:	2102      	movs	r1, #2
 8002eda:	f44f 7094 	mov.w	r0, #296	; 0x128
 8002ede:	f7ff f9bb 	bl	8002258 <mpu_write_mem>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d1b8      	bne.n	8002e58 <dmp_set_tap_thresh+0x8>
    if (axis & TAP_Z) {
 8002ee6:	f014 0004 	ands.w	r0, r4, #4
 8002eea:	d135      	bne.n	8002f58 <dmp_set_tap_thresh+0x108>
}
 8002eec:	b002      	add	sp, #8
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
    switch (accel_fsr) {
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d015      	beq.n	8002f20 <dmp_set_tap_thresh+0xd0>
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d1af      	bne.n	8002e58 <dmp_set_tap_thresh+0x8>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8002ef8:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8002efc:	4628      	mov	r0, r5
 8002efe:	f7fd ff21 	bl	8000d44 <__aeabi_fmul>
 8002f02:	f7fe f90b 	bl	800111c <__aeabi_f2uiz>
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8002f06:	4921      	ldr	r1, [pc, #132]	; (8002f8c <dmp_set_tap_thresh+0x13c>)
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8002f08:	b286      	uxth	r6, r0
 8002f0a:	e7c6      	b.n	8002e9a <dmp_set_tap_thresh+0x4a>
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8002f0c:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8002f10:	4628      	mov	r0, r5
 8002f12:	f7fd ff17 	bl	8000d44 <__aeabi_fmul>
 8002f16:	f7fe f901 	bl	800111c <__aeabi_f2uiz>
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8002f1a:	491d      	ldr	r1, [pc, #116]	; (8002f90 <dmp_set_tap_thresh+0x140>)
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8002f1c:	b286      	uxth	r6, r0
 8002f1e:	e7bc      	b.n	8002e9a <dmp_set_tap_thresh+0x4a>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8002f20:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002f24:	4628      	mov	r0, r5
 8002f26:	f7fd ff0d 	bl	8000d44 <__aeabi_fmul>
 8002f2a:	f7fe f8f7 	bl	800111c <__aeabi_f2uiz>
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8002f2e:	4919      	ldr	r1, [pc, #100]	; (8002f94 <dmp_set_tap_thresh+0x144>)
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8002f30:	b286      	uxth	r6, r0
 8002f32:	e7b2      	b.n	8002e9a <dmp_set_tap_thresh+0x4a>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8002f34:	aa01      	add	r2, sp, #4
 8002f36:	2102      	movs	r1, #2
 8002f38:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8002f3c:	f7ff f98c 	bl	8002258 <mpu_write_mem>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d189      	bne.n	8002e58 <dmp_set_tap_thresh+0x8>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8002f44:	f10d 0206 	add.w	r2, sp, #6
 8002f48:	2102      	movs	r1, #2
 8002f4a:	f44f 7092 	mov.w	r0, #292	; 0x124
 8002f4e:	f7ff f983 	bl	8002258 <mpu_write_mem>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d0b4      	beq.n	8002ec0 <dmp_set_tap_thresh+0x70>
 8002f56:	e77f      	b.n	8002e58 <dmp_set_tap_thresh+0x8>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8002f58:	aa01      	add	r2, sp, #4
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002f60:	f7ff f97a 	bl	8002258 <mpu_write_mem>
 8002f64:	2800      	cmp	r0, #0
 8002f66:	f47f af77 	bne.w	8002e58 <dmp_set_tap_thresh+0x8>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8002f6a:	f10d 0206 	add.w	r2, sp, #6
 8002f6e:	2102      	movs	r1, #2
 8002f70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f74:	f7ff f970 	bl	8002258 <mpu_write_mem>
 8002f78:	3000      	adds	r0, #0
 8002f7a:	bf18      	it	ne
 8002f7c:	2001      	movne	r0, #1
 8002f7e:	4240      	negs	r0, r0
 8002f80:	e7b4      	b.n	8002eec <dmp_set_tap_thresh+0x9c>
 8002f82:	bf00      	nop
 8002f84:	43480000 	.word	0x43480000
 8002f88:	46400000 	.word	0x46400000
 8002f8c:	44c00000 	.word	0x44c00000
 8002f90:	45c00000 	.word	0x45c00000
 8002f94:	45400000 	.word	0x45400000

08002f98 <dmp_set_tap_axes>:
    if (axis & TAP_X)
 8002f98:	f010 0301 	ands.w	r3, r0, #1
        tmp |= 0x30;
 8002f9c:	bf18      	it	ne
 8002f9e:	2330      	movne	r3, #48	; 0x30
{
 8002fa0:	b507      	push	{r0, r1, r2, lr}
    if (axis & TAP_Y)
 8002fa2:	0782      	lsls	r2, r0, #30
        tmp |= 0x30;
 8002fa4:	f88d 3007 	strb.w	r3, [sp, #7]
        tmp |= 0x0C;
 8002fa8:	bf48      	it	mi
 8002faa:	f89d 3007 	ldrbmi.w	r3, [sp, #7]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8002fae:	f10d 0207 	add.w	r2, sp, #7
        tmp |= 0x0C;
 8002fb2:	bf44      	itt	mi
 8002fb4:	f043 030c 	orrmi.w	r3, r3, #12
 8002fb8:	f88d 3007 	strbmi.w	r3, [sp, #7]
    if (axis & TAP_Z)
 8002fbc:	0743      	lsls	r3, r0, #29
        tmp |= 0x03;
 8002fbe:	bf48      	it	mi
 8002fc0:	f89d 3007 	ldrbmi.w	r3, [sp, #7]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8002fc4:	f04f 0101 	mov.w	r1, #1
        tmp |= 0x03;
 8002fc8:	bf48      	it	mi
 8002fca:	f043 0303 	orrmi.w	r3, r3, #3
    return mpu_write_mem(D_1_72, 1, &tmp);
 8002fce:	f44f 70a4 	mov.w	r0, #328	; 0x148
        tmp |= 0x03;
 8002fd2:	bf48      	it	mi
 8002fd4:	f88d 3007 	strbmi.w	r3, [sp, #7]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8002fd8:	f7ff f93e 	bl	8002258 <mpu_write_mem>
}
 8002fdc:	b003      	add	sp, #12
 8002fde:	f85d fb04 	ldr.w	pc, [sp], #4

08002fe2 <dmp_set_tap_count>:
{
 8002fe2:	b507      	push	{r0, r1, r2, lr}
    if (min_taps < 1)
 8002fe4:	b170      	cbz	r0, 8003004 <dmp_set_tap_count+0x22>
 8002fe6:	2804      	cmp	r0, #4
 8002fe8:	bf28      	it	cs
 8002fea:	2004      	movcs	r0, #4
    tmp = min_taps - 1;
 8002fec:	aa02      	add	r2, sp, #8
 8002fee:	3801      	subs	r0, #1
 8002ff0:	f802 0d01 	strb.w	r0, [r2, #-1]!
    return mpu_write_mem(D_1_79, 1, &tmp);
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	f240 104f 	movw	r0, #335	; 0x14f
 8002ffa:	f7ff f92d 	bl	8002258 <mpu_write_mem>
}
 8002ffe:	b003      	add	sp, #12
 8003000:	f85d fb04 	ldr.w	pc, [sp], #4
        min_taps = 1;
 8003004:	2001      	movs	r0, #1
 8003006:	e7f1      	b.n	8002fec <dmp_set_tap_count+0xa>

08003008 <dmp_set_tap_time>:
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003008:	2305      	movs	r3, #5
{
 800300a:	b507      	push	{r0, r1, r2, lr}
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800300c:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8003010:	aa01      	add	r2, sp, #4
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003012:	0a03      	lsrs	r3, r0, #8
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003014:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8003018:	2102      	movs	r1, #2
 800301a:	f44f 70ef 	mov.w	r0, #478	; 0x1de
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800301e:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8003022:	f7ff f919 	bl	8002258 <mpu_write_mem>
}
 8003026:	b003      	add	sp, #12
 8003028:	f85d fb04 	ldr.w	pc, [sp], #4

0800302c <dmp_set_tap_time_multi>:
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800302c:	2305      	movs	r3, #5
{
 800302e:	b507      	push	{r0, r1, r2, lr}
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003030:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(D_1_218, 2, tmp);
 8003034:	aa01      	add	r2, sp, #4
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003036:	0a03      	lsrs	r3, r0, #8
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003038:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_218, 2, tmp);
 800303c:	2102      	movs	r1, #2
 800303e:	f44f 70ed 	mov.w	r0, #474	; 0x1da
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003042:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(D_1_218, 2, tmp);
 8003046:	f7ff f907 	bl	8002258 <mpu_write_mem>
}
 800304a:	b003      	add	sp, #12
 800304c:	f85d fb04 	ldr.w	pc, [sp], #4

08003050 <dmp_set_shake_reject_thresh>:
    long thresh_scaled = sf / 1000 * thresh;
 8003050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8003054:	b507      	push	{r0, r1, r2, lr}
    long thresh_scaled = sf / 1000 * thresh;
 8003056:	fb90 f0f3 	sdiv	r0, r0, r3
 800305a:	4341      	muls	r1, r0
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800305c:	160b      	asrs	r3, r1, #24
 800305e:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8003062:	140b      	asrs	r3, r1, #16
 8003064:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8003068:	f88d 1007 	strb.w	r1, [sp, #7]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800306c:	120b      	asrs	r3, r1, #8
    return mpu_write_mem(D_1_92, 4, tmp);
 800306e:	aa01      	add	r2, sp, #4
 8003070:	2104      	movs	r1, #4
 8003072:	f44f 70ae 	mov.w	r0, #348	; 0x15c
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8003076:	f88d 3006 	strb.w	r3, [sp, #6]
    return mpu_write_mem(D_1_92, 4, tmp);
 800307a:	f7ff f8ed 	bl	8002258 <mpu_write_mem>
}
 800307e:	b003      	add	sp, #12
 8003080:	f85d fb04 	ldr.w	pc, [sp], #4

08003084 <dmp_set_shake_reject_time>:
    time /= (1000 / DMP_SAMPLE_RATE);
 8003084:	2305      	movs	r3, #5
{
 8003086:	b507      	push	{r0, r1, r2, lr}
    time /= (1000 / DMP_SAMPLE_RATE);
 8003088:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(D_1_90,2,tmp);
 800308c:	aa01      	add	r2, sp, #4
    tmp[0] = time >> 8;
 800308e:	0a03      	lsrs	r3, r0, #8
    tmp[1] = time & 0xFF;
 8003090:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_90,2,tmp);
 8003094:	2102      	movs	r1, #2
 8003096:	f44f 70ad 	mov.w	r0, #346	; 0x15a
    tmp[0] = time >> 8;
 800309a:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(D_1_90,2,tmp);
 800309e:	f7ff f8db 	bl	8002258 <mpu_write_mem>
}
 80030a2:	b003      	add	sp, #12
 80030a4:	f85d fb04 	ldr.w	pc, [sp], #4

080030a8 <dmp_set_shake_reject_timeout>:
    time /= (1000 / DMP_SAMPLE_RATE);
 80030a8:	2305      	movs	r3, #5
{
 80030aa:	b507      	push	{r0, r1, r2, lr}
    time /= (1000 / DMP_SAMPLE_RATE);
 80030ac:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(D_1_88,2,tmp);
 80030b0:	aa01      	add	r2, sp, #4
    tmp[0] = time >> 8;
 80030b2:	0a03      	lsrs	r3, r0, #8
    tmp[1] = time & 0xFF;
 80030b4:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_88,2,tmp);
 80030b8:	2102      	movs	r1, #2
 80030ba:	f44f 70ac 	mov.w	r0, #344	; 0x158
    tmp[0] = time >> 8;
 80030be:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(D_1_88,2,tmp);
 80030c2:	f7ff f8c9 	bl	8002258 <mpu_write_mem>
}
 80030c6:	b003      	add	sp, #12
 80030c8:	f85d fb04 	ldr.w	pc, [sp], #4

080030cc <dmp_enable_gyro_cal>:
{
 80030cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (enable) {
 80030ce:	b120      	cbz	r0, 80030da <dmp_enable_gyro_cal+0xe>
 80030d0:	f7ff fd0e 	bl	8002af0 <dmp_enable_gyro_cal.part.0>
}
 80030d4:	b005      	add	sp, #20
 80030d6:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80030da:	4a07      	ldr	r2, [pc, #28]	; (80030f8 <dmp_enable_gyro_cal+0x2c>)
 80030dc:	ab01      	add	r3, sp, #4
 80030de:	6810      	ldr	r0, [r2, #0]
 80030e0:	6851      	ldr	r1, [r2, #4]
 80030e2:	7a12      	ldrb	r2, [r2, #8]
 80030e4:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80030e6:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80030e8:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80030ea:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 80030ee:	aa01      	add	r2, sp, #4
 80030f0:	f7ff f8b2 	bl	8002258 <mpu_write_mem>
 80030f4:	e7ee      	b.n	80030d4 <dmp_enable_gyro_cal+0x8>
 80030f6:	bf00      	nop
 80030f8:	0800c37d 	.word	0x0800c37d

080030fc <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 80030fc:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 80030fe:	b160      	cbz	r0, 800311a <dmp_enable_lp_quat+0x1e>
        regs[0] = DINBC0;
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <dmp_enable_lp_quat+0x24>)
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8003102:	aa01      	add	r2, sp, #4
 8003104:	2104      	movs	r1, #4
 8003106:	f640 2098 	movw	r0, #2712	; 0xa98
        memset(regs, 0x8B, 4);
 800310a:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800310c:	f7ff f8a4 	bl	8002258 <mpu_write_mem>

    return mpu_reset_fifo();
 8003110:	f7fe fbfe 	bl	8001910 <mpu_reset_fifo>
}
 8003114:	b003      	add	sp, #12
 8003116:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0x8B, 4);
 800311a:	f04f 338b 	mov.w	r3, #2341178251	; 0x8b8b8b8b
 800311e:	e7f0      	b.n	8003102 <dmp_enable_lp_quat+0x6>
 8003120:	c6c4c2c0 	.word	0xc6c4c2c0

08003124 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8003124:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8003126:	b160      	cbz	r0, 8003142 <dmp_enable_6x_lp_quat+0x1e>
        regs[0] = DINA20;
 8003128:	4b07      	ldr	r3, [pc, #28]	; (8003148 <dmp_enable_6x_lp_quat+0x24>)
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
 800312a:	aa01      	add	r2, sp, #4
 800312c:	2104      	movs	r1, #4
 800312e:	f640 209e 	movw	r0, #2718	; 0xa9e
        memset(regs, 0xA3, 4);
 8003132:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_8, 4, regs);
 8003134:	f7ff f890 	bl	8002258 <mpu_write_mem>

    return mpu_reset_fifo();
 8003138:	f7fe fbea 	bl	8001910 <mpu_reset_fifo>
}
 800313c:	b003      	add	sp, #12
 800313e:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0xA3, 4);
 8003142:	f04f 33a3 	mov.w	r3, #2745410467	; 0xa3a3a3a3
 8003146:	e7f0      	b.n	800312a <dmp_enable_6x_lp_quat+0x6>
 8003148:	38302820 	.word	0x38302820

0800314c <dmp_enable_feature>:
{
 800314c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8003150:	4b62      	ldr	r3, [pc, #392]	; (80032dc <dmp_enable_feature+0x190>)
 8003152:	ad04      	add	r5, sp, #16
 8003154:	f845 3d0c 	str.w	r3, [r5, #-12]!
{
 8003158:	4604      	mov	r4, r0
    mpu_write_mem(D_0_104, 4, tmp);
 800315a:	462a      	mov	r2, r5
 800315c:	2104      	movs	r1, #4
 800315e:	2068      	movs	r0, #104	; 0x68
 8003160:	f7ff f87a 	bl	8002258 <mpu_write_mem>
    tmp[0] = 0xA3;
 8003164:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8003166:	f014 0740 	ands.w	r7, r4, #64	; 0x40
    tmp[0] = 0xA3;
 800316a:	f88d 3004 	strb.w	r3, [sp, #4]
        tmp[1] = 0xC0;
 800316e:	bf1f      	itttt	ne
 8003170:	23c0      	movne	r3, #192	; 0xc0
 8003172:	f88d 3005 	strbne.w	r3, [sp, #5]
        tmp[2] = 0xC8;
 8003176:	23c8      	movne	r3, #200	; 0xc8
 8003178:	f88d 3006 	strbne.w	r3, [sp, #6]
        tmp[3] = 0xC2;
 800317c:	bf12      	itee	ne
 800317e:	23c2      	movne	r3, #194	; 0xc2
        tmp[1] = 0xA3;
 8003180:	f88d 3005 	strbeq.w	r3, [sp, #5]
        tmp[2] = 0xA3;
 8003184:	f88d 3006 	strbeq.w	r3, [sp, #6]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003188:	f414 78c0 	ands.w	r8, r4, #384	; 0x180
        tmp[3] = 0xA3;
 800318c:	f88d 3007 	strb.w	r3, [sp, #7]
        tmp[4] = 0xC4;
 8003190:	bf15      	itete	ne
 8003192:	f64c 43c4 	movwne	r3, #52420	; 0xccc4
        tmp[4] = 0xA3;
 8003196:	f24a 33a3 	movweq	r3, #41891	; 0xa3a3
        tmp[4] = 0xC4;
 800319a:	f8ad 3008 	strhne.w	r3, [sp, #8]
        tmp[4] = 0xA3;
 800319e:	f8ad 3008 	strheq.w	r3, [sp, #8]
        tmp[5] = 0xCC;
 80031a2:	bf14      	ite	ne
 80031a4:	23c6      	movne	r3, #198	; 0xc6
        tmp[5] = 0xA3;
 80031a6:	23a3      	moveq	r3, #163	; 0xa3
 80031a8:	f88d 300a 	strb.w	r3, [sp, #10]
    tmp[7] = 0xA3;
 80031ac:	23a3      	movs	r3, #163	; 0xa3
    mpu_write_mem(CFG_15,10,tmp);
 80031ae:	462a      	mov	r2, r5
 80031b0:	210a      	movs	r1, #10
 80031b2:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 80031b6:	f88d 300b 	strb.w	r3, [sp, #11]
    tmp[8] = 0xA3;
 80031ba:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[9] = 0xA3;
 80031be:	f88d 300d 	strb.w	r3, [sp, #13]
    mpu_write_mem(CFG_15,10,tmp);
 80031c2:	f7ff f849 	bl	8002258 <mpu_write_mem>
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80031c6:	f014 0603 	ands.w	r6, r4, #3
        tmp[0] = DINA20;
 80031ca:	bf14      	ite	ne
 80031cc:	2320      	movne	r3, #32
        tmp[0] = 0xD8;
 80031ce:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 80031d0:	462a      	mov	r2, r5
 80031d2:	2101      	movs	r1, #1
 80031d4:	f640 20b6 	movw	r0, #2742	; 0xab6
        tmp[0] = 0xD8;
 80031d8:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_27,1,tmp);
 80031dc:	f7ff f83c 	bl	8002258 <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
 80031e0:	f014 0020 	ands.w	r0, r4, #32
 80031e4:	d06a      	beq.n	80032bc <dmp_enable_feature+0x170>
 80031e6:	f7ff fc83 	bl	8002af0 <dmp_enable_gyro_cal.part.0>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80031ea:	f1b8 0f00 	cmp.w	r8, #0
 80031ee:	d00a      	beq.n	8003206 <dmp_enable_feature+0xba>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 80031f0:	05e1      	lsls	r1, r4, #23
            tmp[0] = 0xB2;
 80031f2:	bf4c      	ite	mi
 80031f4:	4b3a      	ldrmi	r3, [pc, #232]	; (80032e0 <dmp_enable_feature+0x194>)
            tmp[0] = DINAC0;
 80031f6:	4b3b      	ldrpl	r3, [pc, #236]	; (80032e4 <dmp_enable_feature+0x198>)
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 80031f8:	462a      	mov	r2, r5
 80031fa:	2104      	movs	r1, #4
 80031fc:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[0] = DINAC0;
 8003200:	9301      	str	r3, [sp, #4]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8003202:	f7ff f829 	bl	8002258 <mpu_write_mem>
    if (mask & DMP_FEATURE_TAP) {
 8003206:	07e2      	lsls	r2, r4, #31
 8003208:	d55b      	bpl.n	80032c2 <dmp_enable_feature+0x176>
        tmp[0] = 0xF8;
 800320a:	23f8      	movs	r3, #248	; 0xf8
        mpu_write_mem(CFG_20, 1, tmp);
 800320c:	462a      	mov	r2, r5
 800320e:	2101      	movs	r1, #1
 8003210:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
        tmp[0] = 0xF8;
 8003214:	f88d 3004 	strb.w	r3, [sp, #4]
        mpu_write_mem(CFG_20, 1, tmp);
 8003218:	f7ff f81e 	bl	8002258 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800321c:	21fa      	movs	r1, #250	; 0xfa
 800321e:	2007      	movs	r0, #7
 8003220:	f7ff fe16 	bl	8002e50 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8003224:	2007      	movs	r0, #7
 8003226:	f7ff feb7 	bl	8002f98 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800322a:	2001      	movs	r0, #1
 800322c:	f7ff fed9 	bl	8002fe2 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8003230:	2064      	movs	r0, #100	; 0x64
 8003232:	f7ff fee9 	bl	8003008 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8003236:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800323a:	f7ff fef7 	bl	800302c <dmp_set_tap_time_multi>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800323e:	21c8      	movs	r1, #200	; 0xc8
 8003240:	4829      	ldr	r0, [pc, #164]	; (80032e8 <dmp_enable_feature+0x19c>)
 8003242:	f7ff ff05 	bl	8003050 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8003246:	2028      	movs	r0, #40	; 0x28
 8003248:	f7ff ff1c 	bl	8003084 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800324c:	200a      	movs	r0, #10
 800324e:	f7ff ff2b 	bl	80030a8 <dmp_set_shake_reject_timeout>
    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8003252:	07a3      	lsls	r3, r4, #30
        tmp[0] = 0xD9;
 8003254:	bf4c      	ite	mi
 8003256:	23d9      	movmi	r3, #217	; 0xd9
        tmp[0] = 0xD8;
 8003258:	23d8      	movpl	r3, #216	; 0xd8
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 800325a:	462a      	mov	r2, r5
 800325c:	2101      	movs	r1, #1
 800325e:	f240 703d 	movw	r0, #1853	; 0x73d
        tmp[0] = 0xD8;
 8003262:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8003266:	f7fe fff7 	bl	8002258 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 800326a:	f014 0004 	ands.w	r0, r4, #4
        dmp_enable_lp_quat(1);
 800326e:	bf18      	it	ne
 8003270:	2001      	movne	r0, #1
        dmp_enable_lp_quat(0);
 8003272:	f7ff ff43 	bl	80030fc <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8003276:	f014 0010 	ands.w	r0, r4, #16
        dmp_enable_6x_lp_quat(1);
 800327a:	bf18      	it	ne
 800327c:	2001      	movne	r0, #1
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800327e:	4d1b      	ldr	r5, [pc, #108]	; (80032ec <dmp_enable_feature+0x1a0>)
        dmp_enable_6x_lp_quat(0);
 8003280:	f7ff ff50 	bl	8003124 <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8003284:	f044 0308 	orr.w	r3, r4, #8
 8003288:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 800328a:	f7fe fb41 	bl	8001910 <mpu_reset_fifo>
 800328e:	462b      	mov	r3, r5
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8003290:	bb0f      	cbnz	r7, 80032d6 <dmp_enable_feature+0x18a>
    dmp.packet_length = 0;
 8003292:	73af      	strb	r7, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8003294:	f1b8 0f00 	cmp.w	r8, #0
 8003298:	d002      	beq.n	80032a0 <dmp_enable_feature+0x154>
        dmp.packet_length += 6;
 800329a:	7b9a      	ldrb	r2, [r3, #14]
 800329c:	3206      	adds	r2, #6
 800329e:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 80032a0:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 80032a4:	bf1e      	ittt	ne
 80032a6:	7b9a      	ldrbne	r2, [r3, #14]
 80032a8:	3210      	addne	r2, #16
 80032aa:	739a      	strbne	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80032ac:	b116      	cbz	r6, 80032b4 <dmp_enable_feature+0x168>
        dmp.packet_length += 4;
 80032ae:	7b9a      	ldrb	r2, [r3, #14]
 80032b0:	3204      	adds	r2, #4
 80032b2:	739a      	strb	r2, [r3, #14]
}
 80032b4:	2000      	movs	r0, #0
 80032b6:	b004      	add	sp, #16
 80032b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dmp_enable_gyro_cal(0);
 80032bc:	f7ff ff06 	bl	80030cc <dmp_enable_gyro_cal>
 80032c0:	e793      	b.n	80031ea <dmp_enable_feature+0x9e>
        tmp[0] = 0xD8;
 80032c2:	23d8      	movs	r3, #216	; 0xd8
        mpu_write_mem(CFG_20, 1, tmp);
 80032c4:	462a      	mov	r2, r5
 80032c6:	2101      	movs	r1, #1
 80032c8:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
        tmp[0] = 0xD8;
 80032cc:	f88d 3004 	strb.w	r3, [sp, #4]
        mpu_write_mem(CFG_20, 1, tmp);
 80032d0:	f7fe ffc2 	bl	8002258 <mpu_write_mem>
 80032d4:	e7bd      	b.n	8003252 <dmp_enable_feature+0x106>
        dmp.packet_length += 6;
 80032d6:	2206      	movs	r2, #6
 80032d8:	73aa      	strb	r2, [r5, #14]
 80032da:	e7db      	b.n	8003294 <dmp_enable_feature+0x148>
 80032dc:	09e3ca02 	.word	0x09e3ca02
 80032e0:	9bb68bb2 	.word	0x9bb68bb2
 80032e4:	90b480b0 	.word	0x90b480b0
 80032e8:	02cae309 	.word	0x02cae309
 80032ec:	20000a10 	.word	0x20000a10

080032f0 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 80032f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f4:	4698      	mov	r8, r3
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 80032f6:	2300      	movs	r3, #0
{
 80032f8:	b089      	sub	sp, #36	; 0x24
 80032fa:	9c12      	ldr	r4, [sp, #72]	; 0x48

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 80032fc:	f8df b148 	ldr.w	fp, [pc, #328]	; 8003448 <dmp_read_fifo+0x158>
{
 8003300:	4606      	mov	r6, r0
 8003302:	460f      	mov	r7, r1
 8003304:	4691      	mov	r9, r2
    sensors[0] = 0;
 8003306:	8023      	strh	r3, [r4, #0]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8003308:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800330a:	4669      	mov	r1, sp
 800330c:	f89b 000e 	ldrb.w	r0, [fp, #14]
 8003310:	f7fe fd10 	bl	8001d34 <mpu_read_fifo_stream>
 8003314:	46da      	mov	sl, fp
 8003316:	4605      	mov	r5, r0
 8003318:	bb60      	cbnz	r0, 8003374 <dmp_read_fifo+0x84>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 800331a:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800331e:	f012 0f14 	tst.w	r2, #20
 8003322:	f000 808e 	beq.w	8003442 <dmp_read_fifo+0x152>
 8003326:	9901      	ldr	r1, [sp, #4]
 8003328:	9800      	ldr	r0, [sp, #0]
 800332a:	fa91 fe81 	rev.w	lr, r1
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800332e:	f8c9 e004 	str.w	lr, [r9, #4]
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
 8003332:	ea4f 4e2e 	mov.w	lr, lr, asr #16
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003336:	fb0e fe0e 	mul.w	lr, lr, lr
 800333a:	ba00      	rev	r0, r0
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800333c:	f8c9 0000 	str.w	r0, [r9]
        quat_q14[0] = quat[0] >> 16;
 8003340:	1400      	asrs	r0, r0, #16
 8003342:	9b02      	ldr	r3, [sp, #8]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003344:	fb00 e000 	mla	r0, r0, r0, lr
 8003348:	ba19      	rev	r1, r3
        quat_q14[2] = quat[2] >> 16;
 800334a:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800334e:	9b03      	ldr	r3, [sp, #12]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8003350:	fb0c 0c0c 	mla	ip, ip, ip, r0
 8003354:	ba1b      	rev	r3, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8003356:	f8c9 300c 	str.w	r3, [r9, #12]
        quat_q14[3] = quat[3] >> 16;
 800335a:	141b      	asrs	r3, r3, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800335c:	fb03 c303 	mla	r3, r3, r3, ip
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8003360:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 8003364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8003368:	f8c9 1008 	str.w	r1, [r9, #8]
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800336c:	d905      	bls.n	800337a <dmp_read_fifo+0x8a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800336e:	f7fe facf 	bl	8001910 <mpu_reset_fifo>
            sensors[0] = 0;
 8003372:	8025      	strh	r5, [r4, #0]
        return -1;
 8003374:	f04f 35ff 	mov.w	r5, #4294967295
 8003378:	e05f      	b.n	800343a <dmp_read_fifo+0x14a>
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800337a:	8823      	ldrh	r3, [r4, #0]
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	8023      	strh	r3, [r4, #0]
        ii += 16;
 8003382:	2310      	movs	r3, #16
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8003384:	0650      	lsls	r0, r2, #25
 8003386:	d51c      	bpl.n	80033c2 <dmp_read_fifo+0xd2>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8003388:	a908      	add	r1, sp, #32
 800338a:	4419      	add	r1, r3
 800338c:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 8003390:	f811 0c1f 	ldrb.w	r0, [r1, #-31]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
 8003394:	3306      	adds	r3, #6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8003396:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 800339a:	8038      	strh	r0, [r7, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800339c:	f811 cc1e 	ldrb.w	ip, [r1, #-30]
 80033a0:	f811 0c1d 	ldrb.w	r0, [r1, #-29]
        ii += 6;
 80033a4:	b2db      	uxtb	r3, r3
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80033a6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 80033aa:	8078      	strh	r0, [r7, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80033ac:	f811 0c1c 	ldrb.w	r0, [r1, #-28]
 80033b0:	f811 1c1b 	ldrb.w	r1, [r1, #-27]
 80033b4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80033b8:	80b9      	strh	r1, [r7, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 80033ba:	8821      	ldrh	r1, [r4, #0]
 80033bc:	f041 0108 	orr.w	r1, r1, #8
 80033c0:	8021      	strh	r1, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80033c2:	f412 7fc0 	tst.w	r2, #384	; 0x180
 80033c6:	d01c      	beq.n	8003402 <dmp_read_fifo+0x112>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80033c8:	a908      	add	r1, sp, #32
 80033ca:	4419      	add	r1, r3
 80033cc:	f811 7c20 	ldrb.w	r7, [r1, #-32]
 80033d0:	f811 0c1f 	ldrb.w	r0, [r1, #-31]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
 80033d4:	3306      	adds	r3, #6
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80033d6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 80033da:	8030      	strh	r0, [r6, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80033dc:	f811 7c1e 	ldrb.w	r7, [r1, #-30]
 80033e0:	f811 0c1d 	ldrb.w	r0, [r1, #-29]
        ii += 6;
 80033e4:	b2db      	uxtb	r3, r3
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80033e6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 80033ea:	8070      	strh	r0, [r6, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80033ec:	f811 0c1c 	ldrb.w	r0, [r1, #-28]
 80033f0:	f811 1c1b 	ldrb.w	r1, [r1, #-27]
 80033f4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80033f8:	80b1      	strh	r1, [r6, #4]
        sensors[0] |= INV_XYZ_GYRO;
 80033fa:	8821      	ldrh	r1, [r4, #0]
 80033fc:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 8003400:	8021      	strh	r1, [r4, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003402:	0791      	lsls	r1, r2, #30
 8003404:	d016      	beq.n	8003434 <dmp_read_fifo+0x144>
        decode_gesture(fifo_data + ii);
 8003406:	eb0d 0403 	add.w	r4, sp, r3
    if (gesture[1] & INT_SRC_TAP) {
 800340a:	7863      	ldrb	r3, [r4, #1]
    android_orient = gesture[3] & 0xC0;
 800340c:	78e6      	ldrb	r6, [r4, #3]
    if (gesture[1] & INT_SRC_TAP) {
 800340e:	07da      	lsls	r2, r3, #31
 8003410:	d508      	bpl.n	8003424 <dmp_read_fifo+0x134>
        if (dmp.tap_cb)
 8003412:	f8da 3000 	ldr.w	r3, [sl]
        count = (tap % 8) + 1;
 8003416:	f006 0107 	and.w	r1, r6, #7
        direction = tap >> 3;
 800341a:	f3c6 00c2 	ubfx	r0, r6, #3, #3
        count = (tap % 8) + 1;
 800341e:	3101      	adds	r1, #1
        if (dmp.tap_cb)
 8003420:	b103      	cbz	r3, 8003424 <dmp_read_fifo+0x134>
            dmp.tap_cb(direction, count);
 8003422:	4798      	blx	r3
    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8003424:	7863      	ldrb	r3, [r4, #1]
 8003426:	071b      	lsls	r3, r3, #28
 8003428:	d504      	bpl.n	8003434 <dmp_read_fifo+0x144>
        if (dmp.android_orient_cb)
 800342a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800342e:	b10b      	cbz	r3, 8003434 <dmp_read_fifo+0x144>
            dmp.android_orient_cb(android_orient >> 6);
 8003430:	09b0      	lsrs	r0, r6, #6
 8003432:	4798      	blx	r3

    get_ms(timestamp);
 8003434:	4640      	mov	r0, r8
 8003436:	f7ff f9f1 	bl	800281c <mget_ms>
    return 0;
}
 800343a:	4628      	mov	r0, r5
 800343c:	b009      	add	sp, #36	; 0x24
 800343e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    unsigned char ii = 0;
 8003442:	4603      	mov	r3, r0
 8003444:	e79e      	b.n	8003384 <dmp_read_fifo+0x94>
 8003446:	bf00      	nop
 8003448:	20000a10 	.word	0x20000a10

0800344c <MPU_Write_Len>:
//len:д�볤��
//buf:������
//����ֵ:0,����
//    ����,�������
uint8_t MPU_Write_Len(uint8_t addr,uint8_t reg,uint8_t len,uint8_t *buf)
{
 800344c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&hi2c1, addr<<1, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 1000);
 800344e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2301      	movs	r3, #1
 8003456:	e9cd 2401 	strd	r2, r4, [sp, #4]
 800345a:	460a      	mov	r2, r1
 800345c:	fa00 f103 	lsl.w	r1, r0, r3
 8003460:	4802      	ldr	r0, [pc, #8]	; (800346c <MPU_Write_Len+0x20>)
 8003462:	f001 fbf5 	bl	8004c50 <HAL_I2C_Mem_Write>
	return 0;
}
 8003466:	2000      	movs	r0, #0
 8003468:	b004      	add	sp, #16
 800346a:	bd10      	pop	{r4, pc}
 800346c:	20000ee0 	.word	0x20000ee0

08003470 <MPU_Read_Len>:

uint8_t MPU_Read_Len(uint8_t addr,uint8_t reg,uint8_t len,uint8_t *buf)
{
 8003470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(&hi2c1, addr<<1, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 1000);
 8003472:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2301      	movs	r3, #1
 800347a:	e9cd 2401 	strd	r2, r4, [sp, #4]
 800347e:	460a      	mov	r2, r1
 8003480:	fa00 f103 	lsl.w	r1, r0, r3
 8003484:	4802      	ldr	r0, [pc, #8]	; (8003490 <MPU_Read_Len+0x20>)
 8003486:	f001 fc73 	bl	8004d70 <HAL_I2C_Mem_Read>
	return 0;
}
 800348a:	2000      	movs	r0, #0
 800348c:	b004      	add	sp, #16
 800348e:	bd10      	pop	{r4, pc}
 8003490:	20000ee0 	.word	0x20000ee0
 8003494:	00000000 	.word	0x00000000

08003498 <MPU_Get_Temperature>:
{
 8003498:	b507      	push	{r0, r1, r2, lr}
	MPU_Read_Len(MPU_ADDR,MPU_TEMP_OUTH_REG,2,buf); 
 800349a:	2202      	movs	r2, #2
 800349c:	ab01      	add	r3, sp, #4
 800349e:	2141      	movs	r1, #65	; 0x41
 80034a0:	2068      	movs	r0, #104	; 0x68
 80034a2:	f7ff ffe5 	bl	8003470 <MPU_Read_Len>
    raw=((uint16_t)buf[0]<<8)|buf[1];  
 80034a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80034aa:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80034ae:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    temp=36.53+((double)raw)/340;  
 80034b2:	b200      	sxth	r0, r0
 80034b4:	f7fc ffa6 	bl	8000404 <__aeabi_i2d>
 80034b8:	2200      	movs	r2, #0
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <MPU_Get_Temperature+0x50>)
 80034bc:	f7fd f936 	bl	800072c <__aeabi_ddiv>
 80034c0:	a307      	add	r3, pc, #28	; (adr r3, 80034e0 <MPU_Get_Temperature+0x48>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fc fe51 	bl	800016c <__adddf3>
 80034ca:	f7fd fadd 	bl	8000a88 <__aeabi_d2f>
    return temp*100;;
 80034ce:	4907      	ldr	r1, [pc, #28]	; (80034ec <MPU_Get_Temperature+0x54>)
 80034d0:	f7fd fc38 	bl	8000d44 <__aeabi_fmul>
 80034d4:	f7fd fdfc 	bl	80010d0 <__aeabi_f2iz>
}
 80034d8:	b200      	sxth	r0, r0
 80034da:	b003      	add	sp, #12
 80034dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80034e0:	0a3d70a4 	.word	0x0a3d70a4
 80034e4:	404243d7 	.word	0x404243d7
 80034e8:	40754000 	.word	0x40754000
 80034ec:	42c80000 	.word	0x42c80000

080034f0 <MPU_Get_Gyroscope>:
{
 80034f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034f2:	4606      	mov	r6, r0
 80034f4:	460d      	mov	r5, r1
 80034f6:	4614      	mov	r4, r2
	res=MPU_Read_Len(MPU_ADDR,MPU_GYRO_XOUTH_REG,6,buf);
 80034f8:	466b      	mov	r3, sp
 80034fa:	2206      	movs	r2, #6
 80034fc:	2143      	movs	r1, #67	; 0x43
 80034fe:	2068      	movs	r0, #104	; 0x68
 8003500:	f7ff ffb6 	bl	8003470 <MPU_Read_Len>
	if(res==0)
 8003504:	b9a0      	cbnz	r0, 8003530 <MPU_Get_Gyroscope+0x40>
		*gx=((uint16_t)buf[0]<<8)|buf[1];  
 8003506:	f89d 2000 	ldrb.w	r2, [sp]
 800350a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800350e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003512:	8033      	strh	r3, [r6, #0]
		*gy=((uint16_t)buf[2]<<8)|buf[3];  
 8003514:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8003518:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800351c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003520:	802b      	strh	r3, [r5, #0]
		*gz=((uint16_t)buf[4]<<8)|buf[5];
 8003522:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003526:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800352a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800352e:	8023      	strh	r3, [r4, #0]
}
 8003530:	b002      	add	sp, #8
 8003532:	bd70      	pop	{r4, r5, r6, pc}

08003534 <MPU_Get_Accelerometer>:
{
 8003534:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003536:	4606      	mov	r6, r0
 8003538:	460d      	mov	r5, r1
 800353a:	4614      	mov	r4, r2
	res=MPU_Read_Len(MPU_ADDR,MPU_ACCEL_XOUTH_REG,6,buf);
 800353c:	466b      	mov	r3, sp
 800353e:	2206      	movs	r2, #6
 8003540:	213b      	movs	r1, #59	; 0x3b
 8003542:	2068      	movs	r0, #104	; 0x68
 8003544:	f7ff ff94 	bl	8003470 <MPU_Read_Len>
	if(res==0)
 8003548:	b9a0      	cbnz	r0, 8003574 <MPU_Get_Accelerometer+0x40>
		*ax=((uint16_t)buf[0]<<8)|buf[1];  
 800354a:	f89d 2000 	ldrb.w	r2, [sp]
 800354e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003552:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003556:	8033      	strh	r3, [r6, #0]
		*ay=((uint16_t)buf[2]<<8)|buf[3];  
 8003558:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800355c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003560:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003564:	802b      	strh	r3, [r5, #0]
		*az=((uint16_t)buf[4]<<8)|buf[5];
 8003566:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800356a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800356e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003572:	8023      	strh	r3, [r4, #0]
}
 8003574:	b002      	add	sp, #8
 8003576:	bd70      	pop	{r4, r5, r6, pc}

08003578 <OLED_WR_Byte>:
		}
}


void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003578:	b507      	push	{r0, r1, r2, lr}

	if(cmd)
 800357a:	460a      	mov	r2, r1
{	
 800357c:	f88d 0007 	strb.w	r0, [sp, #7]
	if(cmd)
 8003580:	b101      	cbz	r1, 8003584 <OLED_WR_Byte+0xc>

	  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, SET);
 8003582:	2201      	movs	r2, #1
	else
	  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, RESET);
 8003584:	2140      	movs	r1, #64	; 0x40
 8003586:	4807      	ldr	r0, [pc, #28]	; (80035a4 <OLED_WR_Byte+0x2c>)
 8003588:	f001 f8de 	bl	8004748 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &dat, 1, 1000);
 800358c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003590:	2201      	movs	r2, #1
 8003592:	f10d 0107 	add.w	r1, sp, #7
 8003596:	4804      	ldr	r0, [pc, #16]	; (80035a8 <OLED_WR_Byte+0x30>)
 8003598:	f002 f878 	bl	800568c <HAL_SPI_Transmit>

}
 800359c:	b003      	add	sp, #12
 800359e:	f85d fb04 	ldr.w	pc, [sp], #4
 80035a2:	bf00      	nop
 80035a4:	40010800 	.word	0x40010800
 80035a8:	20000f98 	.word	0x20000f98

080035ac <OLED_Refresh>:
	OLED_WR_Byte(0xAF,OLED_CMD);//�ر���Ļ
}

//�����Դ浽OLED	
void OLED_Refresh(void)
{
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	24b0      	movs	r4, #176	; 0xb0
 80035b0:	4e0e      	ldr	r6, [pc, #56]	; (80035ec <OLED_Refresh+0x40>)
	uint8_t i,n;
	for(i=0;i<8;i++)
	{
	   OLED_WR_Byte(0xb0+i,OLED_CMD); //��������ʼ��ַ
 80035b2:	2100      	movs	r1, #0
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7ff ffdf 	bl	8003578 <OLED_WR_Byte>
	   OLED_WR_Byte(0x00,OLED_CMD);   //���õ�����ʼ��ַ
 80035ba:	2100      	movs	r1, #0
 80035bc:	4608      	mov	r0, r1
 80035be:	f7ff ffdb 	bl	8003578 <OLED_WR_Byte>
	   OLED_WR_Byte(0x10,OLED_CMD);   //���ø�����ʼ��ַ
 80035c2:	2100      	movs	r1, #0
 80035c4:	2010      	movs	r0, #16
 80035c6:	f7ff ffd7 	bl	8003578 <OLED_WR_Byte>
 80035ca:	2500      	movs	r5, #0
	   for(n=0;n<128;n++)
		 OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 80035cc:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
 80035d0:	2101      	movs	r1, #1
 80035d2:	3501      	adds	r5, #1
 80035d4:	f7ff ffd0 	bl	8003578 <OLED_WR_Byte>
	   for(n=0;n<128;n++)
 80035d8:	2d80      	cmp	r5, #128	; 0x80
 80035da:	d1f7      	bne.n	80035cc <OLED_Refresh+0x20>
 80035dc:	3401      	adds	r4, #1
 80035de:	b2e4      	uxtb	r4, r4
	for(i=0;i<8;i++)
 80035e0:	2cb8      	cmp	r4, #184	; 0xb8
 80035e2:	f106 0601 	add.w	r6, r6, #1
 80035e6:	d1e4      	bne.n	80035b2 <OLED_Refresh+0x6>
  }
}
 80035e8:	bd70      	pop	{r4, r5, r6, pc}
 80035ea:	bf00      	nop
 80035ec:	20000a60 	.word	0x20000a60

080035f0 <OLED_Clear>:
	uint8_t i,n;
	for(i=0;i<8;i++)
	{
	   for(n=0;n<128;n++)
			{
			 OLED_GRAM[n][i]=0;//�����������
 80035f0:	2000      	movs	r0, #0
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <OLED_Clear+0x1c>)
 80035f4:	f103 0108 	add.w	r1, r3, #8
{
 80035f8:	2200      	movs	r2, #0
			 OLED_GRAM[n][i]=0;//�����������
 80035fa:	f803 0032 	strb.w	r0, [r3, r2, lsl #3]
 80035fe:	3201      	adds	r2, #1
	   for(n=0;n<128;n++)
 8003600:	2a80      	cmp	r2, #128	; 0x80
 8003602:	d1fa      	bne.n	80035fa <OLED_Clear+0xa>
 8003604:	3301      	adds	r3, #1
	for(i=0;i<8;i++)
 8003606:	428b      	cmp	r3, r1
 8003608:	d1f6      	bne.n	80035f8 <OLED_Clear+0x8>
			}
  }
	//OLED_Refresh();//������ʾ
}
 800360a:	4770      	bx	lr
 800360c:	20000a60 	.word	0x20000a60

08003610 <OLED_ClearWave>:
	uint8_t i,n;
	for(i=4;i<8;i++)
	{
	   for(n=0;n<128;n++)
			{
			 OLED_GRAM[n][i]=0;//�����������
 8003610:	2000      	movs	r0, #0
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <OLED_ClearWave+0x1c>)
 8003614:	1d19      	adds	r1, r3, #4
{
 8003616:	2200      	movs	r2, #0
			 OLED_GRAM[n][i]=0;//�����������
 8003618:	f803 0032 	strb.w	r0, [r3, r2, lsl #3]
 800361c:	3201      	adds	r2, #1
	   for(n=0;n<128;n++)
 800361e:	2a80      	cmp	r2, #128	; 0x80
 8003620:	d1fa      	bne.n	8003618 <OLED_ClearWave+0x8>
 8003622:	3301      	adds	r3, #1
	for(i=4;i<8;i++)
 8003624:	428b      	cmp	r3, r1
 8003626:	d1f6      	bne.n	8003616 <OLED_ClearWave+0x6>
			}
  }
	//OLED_Refresh();//������ʾ
}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000a64 	.word	0x20000a64

08003630 <OLED_DrawPoint>:
{
	uint8_t i,m,n;
	i=y/8;
	m=y%8;
	n=1<<m;
	OLED_GRAM[x][i]|=n;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <OLED_DrawPoint+0x18>)
 8003632:	08ca      	lsrs	r2, r1, #3
 8003634:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	n=1<<m;
 8003638:	f001 0307 	and.w	r3, r1, #7
 800363c:	2101      	movs	r1, #1
 800363e:	4099      	lsls	r1, r3
	OLED_GRAM[x][i]|=n;
 8003640:	5c83      	ldrb	r3, [r0, r2]
 8003642:	4319      	orrs	r1, r3
 8003644:	5481      	strb	r1, [r0, r2]
}
 8003646:	4770      	bx	lr
 8003648:	20000a60 	.word	0x20000a60

0800364c <OLED_ClearPoint>:
void OLED_ClearPoint(uint8_t x,uint8_t y)
{
	uint8_t i,m,n;
	i=y/8;
	m=y%8;
	n=1<<m;
 800364c:	2201      	movs	r2, #1
{
 800364e:	b510      	push	{r4, lr}
	OLED_GRAM[x][i]=~OLED_GRAM[x][i];
	OLED_GRAM[x][i]|=n;
	OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <OLED_ClearPoint+0x20>)
	OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8003652:	08cc      	lsrs	r4, r1, #3
	OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8003654:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8003658:	5d03      	ldrb	r3, [r0, r4]
	n=1<<m;
 800365a:	f001 0107 	and.w	r1, r1, #7
 800365e:	fa02 f101 	lsl.w	r1, r2, r1
	OLED_GRAM[x][i]=~OLED_GRAM[x][i];
 8003662:	ea23 0101 	bic.w	r1, r3, r1
 8003666:	5501      	strb	r1, [r0, r4]
}
 8003668:	bd10      	pop	{r4, pc}
 800366a:	bf00      	nop
 800366c:	20000a60 	.word	0x20000a60

08003670 <OLED_DrawLine>:
//x:0~128
//y:0~64
void OLED_DrawLine(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2)
{
	uint8_t i,k,k1,k2,y0;
	if((x1<0)||(x2>128)||(y1<0)||(y2>64)||(x1>x2)||(y1>y2))return;
 8003670:	2a80      	cmp	r2, #128	; 0x80
{
 8003672:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003676:	4606      	mov	r6, r0
 8003678:	460d      	mov	r5, r1
	if((x1<0)||(x2>128)||(y1<0)||(y2>64)||(x1>x2)||(y1>y2))return;
 800367a:	d813      	bhi.n	80036a4 <OLED_DrawLine+0x34>
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d811      	bhi.n	80036a4 <OLED_DrawLine+0x34>
 8003680:	4282      	cmp	r2, r0
 8003682:	d30f      	bcc.n	80036a4 <OLED_DrawLine+0x34>
 8003684:	428b      	cmp	r3, r1
 8003686:	d30d      	bcc.n	80036a4 <OLED_DrawLine+0x34>
	if(x1==x2)    //������
 8003688:	4282      	cmp	r2, r0
 800368a:	d10d      	bne.n	80036a8 <OLED_DrawLine+0x38>
 800368c:	2700      	movs	r7, #0
	{
			for(i=0;i<(y2-y1);i++)
 800368e:	1a5c      	subs	r4, r3, r1
 8003690:	e005      	b.n	800369e <OLED_DrawLine+0x2e>
			{
				OLED_DrawPoint(x1,y1+i);
 8003692:	4429      	add	r1, r5
 8003694:	b2c9      	uxtb	r1, r1
 8003696:	4630      	mov	r0, r6
 8003698:	f7ff ffca 	bl	8003630 <OLED_DrawPoint>
 800369c:	3701      	adds	r7, #1
 800369e:	b2f9      	uxtb	r1, r7
			for(i=0;i<(y2-y1);i++)
 80036a0:	42a1      	cmp	r1, r4
 80036a2:	dbf6      	blt.n	8003692 <OLED_DrawLine+0x22>
		for(i=0;i<(x2-x1);i++)
			{
			  OLED_DrawPoint(x1+i,y1+i*k/10);
			}
	}
}
 80036a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if(y1==y2)   //������
 80036a8:	428b      	cmp	r3, r1
 80036aa:	eba2 0700 	sub.w	r7, r2, r0
 80036ae:	d10b      	bne.n	80036c8 <OLED_DrawLine+0x58>
 80036b0:	2400      	movs	r4, #0
 80036b2:	e005      	b.n	80036c0 <OLED_DrawLine+0x50>
				OLED_DrawPoint(x1+i,y1);
 80036b4:	4430      	add	r0, r6
 80036b6:	4629      	mov	r1, r5
 80036b8:	b2c0      	uxtb	r0, r0
 80036ba:	f7ff ffb9 	bl	8003630 <OLED_DrawPoint>
 80036be:	3401      	adds	r4, #1
 80036c0:	b2e0      	uxtb	r0, r4
			for(i=0;i<(x2-x1);i++)
 80036c2:	42b8      	cmp	r0, r7
 80036c4:	dbf6      	blt.n	80036b4 <OLED_DrawLine+0x44>
 80036c6:	e7ed      	b.n	80036a4 <OLED_DrawLine+0x34>
		k=k1*10/k2;
 80036c8:	f04f 090a 	mov.w	r9, #10
		k1=y2-y1;
 80036cc:	1a5c      	subs	r4, r3, r1
		k=k1*10/k2;
 80036ce:	b2e4      	uxtb	r4, r4
 80036d0:	fb09 f404 	mul.w	r4, r9, r4
 80036d4:	b2fb      	uxtb	r3, r7
 80036d6:	fb94 f4f3 	sdiv	r4, r4, r3
		for(i=0;i<(x2-x1);i++)
 80036da:	f04f 0800 	mov.w	r8, #0
			  OLED_DrawPoint(x1+i,y1+i*k/10);
 80036de:	b2e4      	uxtb	r4, r4
 80036e0:	fa5f f088 	uxtb.w	r0, r8
		for(i=0;i<(x2-x1);i++)
 80036e4:	42b8      	cmp	r0, r7
 80036e6:	dadd      	bge.n	80036a4 <OLED_DrawLine+0x34>
			  OLED_DrawPoint(x1+i,y1+i*k/10);
 80036e8:	fb00 f104 	mul.w	r1, r0, r4
 80036ec:	fb91 f1f9 	sdiv	r1, r1, r9
 80036f0:	4430      	add	r0, r6
 80036f2:	4429      	add	r1, r5
 80036f4:	b2c9      	uxtb	r1, r1
 80036f6:	b2c0      	uxtb	r0, r0
 80036f8:	f7ff ff9a 	bl	8003630 <OLED_DrawPoint>
 80036fc:	f108 0801 	add.w	r8, r8, #1
 8003700:	e7ee      	b.n	80036e0 <OLED_DrawLine+0x70>
	...

08003704 <OLED_ShowChar>:
//x:0~127
//y:0~63
//size:ѡ������ 12/16/24
//ȡģ��ʽ ����ʽ
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size1)
{
 8003704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003708:	461d      	mov	r5, r3
	uint8_t i,m,temp,size2,chr1;
	uint8_t y0=y;
	size2=(size1/8+((size1%8)?1:0))*(size1/2);  //�õ�����һ���ַ���Ӧ������ռ���ֽ���
 800370a:	f013 0307 	ands.w	r3, r3, #7
 800370e:	bf18      	it	ne
 8003710:	2301      	movne	r3, #1
 8003712:	f04f 0924 	mov.w	r9, #36	; 0x24
{
 8003716:	468a      	mov	sl, r1
	size2=(size1/8+((size1%8)?1:0))*(size1/2);  //�õ�����һ���ַ���Ӧ������ռ���ֽ���
 8003718:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
 800371c:	0869      	lsrs	r1, r5, #1
 800371e:	434b      	muls	r3, r1
{
 8003720:	b085      	sub	sp, #20
	size2=(size1/8+((size1%8)?1:0))*(size1/2);  //�õ�����һ���ַ���Ӧ������ռ���ֽ���
 8003722:	b2db      	uxtb	r3, r3
	chr1=chr-' ';  //����ƫ�ƺ��ֵ
 8003724:	f1a2 0620 	sub.w	r6, r2, #32
	size2=(size1/8+((size1%8)?1:0))*(size1/2);  //�õ�����һ���ַ���Ӧ������ռ���ֽ���
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <OLED_ShowChar+0xb0>)
 800372c:	b2f6      	uxtb	r6, r6
 800372e:	fb09 3906 	mla	r9, r9, r6, r3
 8003732:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <OLED_ShowChar+0xb4>)
{
 8003734:	4607      	mov	r7, r0
 8003736:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800373a:	9302      	str	r3, [sp, #8]
 800373c:	230c      	movs	r3, #12
	for(i=0;i<size2;i++)
 800373e:	4654      	mov	r4, sl
 8003740:	f04f 0800 	mov.w	r8, #0
 8003744:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <OLED_ShowChar+0xb8>)
 8003746:	fb03 2306 	mla	r3, r3, r6, r2
 800374a:	9303      	str	r3, [sp, #12]
 800374c:	9a01      	ldr	r2, [sp, #4]
 800374e:	fa5f f388 	uxtb.w	r3, r8
 8003752:	429a      	cmp	r2, r3
 8003754:	d802      	bhi.n	800375c <OLED_ShowChar+0x58>
						x++;
						break;
          }
				}
  }
}
 8003756:	b005      	add	sp, #20
 8003758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(size1==12)
 800375c:	2d0c      	cmp	r5, #12
 800375e:	d11a      	bne.n	8003796 <OLED_ShowChar+0x92>
        {temp=asc2_1206[chr1][i];} //����1206����
 8003760:	9b03      	ldr	r3, [sp, #12]
        {temp=asc2_1608[chr1][i];} //����1608����
 8003762:	f813 6008 	ldrb.w	r6, [r3, r8]
 8003766:	f104 0b08 	add.w	fp, r4, #8
 800376a:	fa5f fb8b 	uxtb.w	fp, fp
					if(temp&0x80)OLED_DrawPoint(x,y);
 800376e:	0633      	lsls	r3, r6, #24
 8003770:	4621      	mov	r1, r4
 8003772:	4638      	mov	r0, r7
 8003774:	d518      	bpl.n	80037a8 <OLED_ShowChar+0xa4>
 8003776:	f7ff ff5b 	bl	8003630 <OLED_DrawPoint>
					y++;
 800377a:	3401      	adds	r4, #1
 800377c:	b2e4      	uxtb	r4, r4
					if((y-y0)==size1)
 800377e:	eba4 010a 	sub.w	r1, r4, sl
					temp<<=1;
 8003782:	0073      	lsls	r3, r6, #1
					if((y-y0)==size1)
 8003784:	42a9      	cmp	r1, r5
					temp<<=1;
 8003786:	b2de      	uxtb	r6, r3
					if((y-y0)==size1)
 8003788:	d111      	bne.n	80037ae <OLED_ShowChar+0xaa>
						y=y0;
 800378a:	4654      	mov	r4, sl
						x++;
 800378c:	3701      	adds	r7, #1
 800378e:	b2ff      	uxtb	r7, r7
 8003790:	f108 0801 	add.w	r8, r8, #1
 8003794:	e7da      	b.n	800374c <OLED_ShowChar+0x48>
		else if(size1==16)
 8003796:	2d10      	cmp	r5, #16
 8003798:	d101      	bne.n	800379e <OLED_ShowChar+0x9a>
        {temp=asc2_1608[chr1][i];} //����1608����
 800379a:	9b02      	ldr	r3, [sp, #8]
 800379c:	e7e1      	b.n	8003762 <OLED_ShowChar+0x5e>
		else if(size1==24)
 800379e:	2d18      	cmp	r5, #24
 80037a0:	d1d9      	bne.n	8003756 <OLED_ShowChar+0x52>
        {temp=asc2_2412[chr1][i];} //����2412����
 80037a2:	f819 6008 	ldrb.w	r6, [r9, r8]
 80037a6:	e7de      	b.n	8003766 <OLED_ShowChar+0x62>
					else OLED_ClearPoint(x,y);
 80037a8:	f7ff ff50 	bl	800364c <OLED_ClearPoint>
 80037ac:	e7e5      	b.n	800377a <OLED_ShowChar+0x76>
				for(m=0;m<8;m++)           //д������
 80037ae:	45a3      	cmp	fp, r4
 80037b0:	d1dd      	bne.n	800376e <OLED_ShowChar+0x6a>
 80037b2:	e7ed      	b.n	8003790 <OLED_ShowChar+0x8c>
 80037b4:	0800dbca 	.word	0x0800dbca
 80037b8:	0800d5da 	.word	0x0800d5da
 80037bc:	0800d166 	.word	0x0800d166

080037c0 <OLED_ShowString>:
//��ʾ�ַ���
//x,y:�������  
//size1:�����С 
//*chr:�ַ�����ʼ��ַ 
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t size1)
{
 80037c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037c4:	4604      	mov	r4, r0
 80037c6:	460d      	mov	r5, r1
 80037c8:	461e      	mov	r6, r3
	while((*chr>=' ')&&(*chr<='~'))//�ж��ǲ��ǷǷ��ַ�!
	{
		OLED_ShowChar(x,y,*chr,size1);
		x+=size1/2;
 80037ca:	ea4f 0853 	mov.w	r8, r3, lsr #1
 80037ce:	1e57      	subs	r7, r2, #1
		if(x>128-size1)  //����
 80037d0:	f1c3 0980 	rsb	r9, r3, #128	; 0x80
	while((*chr>=' ')&&(*chr<='~'))//�ж��ǲ��ǷǷ��ַ�!
 80037d4:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 80037d8:	f1a2 0320 	sub.w	r3, r2, #32
 80037dc:	2b5e      	cmp	r3, #94	; 0x5e
 80037de:	d901      	bls.n	80037e4 <OLED_ShowString+0x24>
			x=0;
			y+=2;
    }
		chr++;
  }
}
 80037e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		OLED_ShowChar(x,y,*chr,size1);
 80037e4:	4620      	mov	r0, r4
		x+=size1/2;
 80037e6:	4444      	add	r4, r8
		OLED_ShowChar(x,y,*chr,size1);
 80037e8:	4629      	mov	r1, r5
		x+=size1/2;
 80037ea:	b2e4      	uxtb	r4, r4
		OLED_ShowChar(x,y,*chr,size1);
 80037ec:	4633      	mov	r3, r6
 80037ee:	f7ff ff89 	bl	8003704 <OLED_ShowChar>
		if(x>128-size1)  //����
 80037f2:	454c      	cmp	r4, r9
			y+=2;
 80037f4:	bfc2      	ittt	gt
 80037f6:	3502      	addgt	r5, #2
 80037f8:	b2ed      	uxtbgt	r5, r5
			x=0;
 80037fa:	2400      	movgt	r4, #0
 80037fc:	e7ea      	b.n	80037d4 <OLED_ShowString+0x14>
	...

08003800 <OLED_Init>:
//OLED�ĳ�ʼ��
void OLED_Init(void)
{
	
	
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, SET);
 8003800:	2201      	movs	r2, #1
{
 8003802:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, SET);
 8003804:	4c44      	ldr	r4, [pc, #272]	; (8003918 <OLED_Init+0x118>)
 8003806:	4611      	mov	r1, r2
 8003808:	4620      	mov	r0, r4
 800380a:	f000 ff9d 	bl	8004748 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800380e:	2064      	movs	r0, #100	; 0x64
 8003810:	f000 fe3e 	bl	8004490 <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, RESET);
 8003814:	2200      	movs	r2, #0
 8003816:	2101      	movs	r1, #1
 8003818:	4620      	mov	r0, r4
 800381a:	f000 ff95 	bl	8004748 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800381e:	20c8      	movs	r0, #200	; 0xc8
 8003820:	f000 fe36 	bl	8004490 <HAL_Delay>
	HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, SET);
 8003824:	2201      	movs	r2, #1
 8003826:	4620      	mov	r0, r4
 8003828:	4611      	mov	r1, r2
 800382a:	f000 ff8d 	bl	8004748 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 800382e:	2100      	movs	r1, #0
 8003830:	20ae      	movs	r0, #174	; 0xae
 8003832:	f7ff fea1 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 8003836:	2100      	movs	r1, #0
 8003838:	4608      	mov	r0, r1
 800383a:	f7ff fe9d 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 800383e:	2100      	movs	r1, #0
 8003840:	2010      	movs	r0, #16
 8003842:	f7ff fe99 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8003846:	2100      	movs	r1, #0
 8003848:	2040      	movs	r0, #64	; 0x40
 800384a:	f7ff fe95 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 800384e:	2100      	movs	r1, #0
 8003850:	2081      	movs	r0, #129	; 0x81
 8003852:	f7ff fe91 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD);// Set SEG Output Current Brightness
 8003856:	2100      	movs	r1, #0
 8003858:	20cf      	movs	r0, #207	; 0xcf
 800385a:	f7ff fe8d 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0���ҷ��� 0xa1����
 800385e:	2100      	movs	r1, #0
 8003860:	20a1      	movs	r0, #161	; 0xa1
 8003862:	f7ff fe89 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0���·��� 0xc8����
 8003866:	2100      	movs	r1, #0
 8003868:	20c8      	movs	r0, #200	; 0xc8
 800386a:	f7ff fe85 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 800386e:	2100      	movs	r1, #0
 8003870:	20a6      	movs	r0, #166	; 0xa6
 8003872:	f7ff fe81 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8003876:	2100      	movs	r1, #0
 8003878:	20a8      	movs	r0, #168	; 0xa8
 800387a:	f7ff fe7d 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 800387e:	2100      	movs	r1, #0
 8003880:	203f      	movs	r0, #63	; 0x3f
 8003882:	f7ff fe79 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8003886:	2100      	movs	r1, #0
 8003888:	20d3      	movs	r0, #211	; 0xd3
 800388a:	f7ff fe75 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 800388e:	2100      	movs	r1, #0
 8003890:	4608      	mov	r0, r1
 8003892:	f7ff fe71 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 8003896:	2100      	movs	r1, #0
 8003898:	20d5      	movs	r0, #213	; 0xd5
 800389a:	f7ff fe6d 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 800389e:	2100      	movs	r1, #0
 80038a0:	2080      	movs	r0, #128	; 0x80
 80038a2:	f7ff fe69 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 80038a6:	2100      	movs	r1, #0
 80038a8:	20d9      	movs	r0, #217	; 0xd9
 80038aa:	f7ff fe65 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80038ae:	2100      	movs	r1, #0
 80038b0:	20f1      	movs	r0, #241	; 0xf1
 80038b2:	f7ff fe61 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 80038b6:	2100      	movs	r1, #0
 80038b8:	20da      	movs	r0, #218	; 0xda
 80038ba:	f7ff fe5d 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 80038be:	2100      	movs	r1, #0
 80038c0:	2012      	movs	r0, #18
 80038c2:	f7ff fe59 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 80038c6:	2100      	movs	r1, #0
 80038c8:	20db      	movs	r0, #219	; 0xdb
 80038ca:	f7ff fe55 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 80038ce:	2100      	movs	r1, #0
 80038d0:	2040      	movs	r0, #64	; 0x40
 80038d2:	f7ff fe51 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 80038d6:	2100      	movs	r1, #0
 80038d8:	2020      	movs	r0, #32
 80038da:	f7ff fe4d 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 80038de:	2100      	movs	r1, #0
 80038e0:	2002      	movs	r0, #2
 80038e2:	f7ff fe49 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 80038e6:	2100      	movs	r1, #0
 80038e8:	208d      	movs	r0, #141	; 0x8d
 80038ea:	f7ff fe45 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 80038ee:	2100      	movs	r1, #0
 80038f0:	2014      	movs	r0, #20
 80038f2:	f7ff fe41 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 80038f6:	2100      	movs	r1, #0
 80038f8:	20a4      	movs	r0, #164	; 0xa4
 80038fa:	f7ff fe3d 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 80038fe:	2100      	movs	r1, #0
 8003900:	20a6      	movs	r0, #166	; 0xa6
 8003902:	f7ff fe39 	bl	8003578 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);
 8003906:	2100      	movs	r1, #0
 8003908:	20af      	movs	r0, #175	; 0xaf
 800390a:	f7ff fe35 	bl	8003578 <OLED_WR_Byte>
	OLED_Clear();
}
 800390e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	OLED_Clear();
 8003912:	f7ff be6d 	b.w	80035f0 <OLED_Clear>
 8003916:	bf00      	nop
 8003918:	40010c00 	.word	0x40010c00

0800391c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	2210      	movs	r2, #16
{
 800391e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003922:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003924:	eb0d 0002 	add.w	r0, sp, r2
 8003928:	2100      	movs	r1, #0
 800392a:	f002 fc68 	bl	80061fe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800392e:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003930:	4d34      	ldr	r5, [pc, #208]	; (8003a04 <MX_GPIO_Init+0xe8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003932:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8003934:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003a0c <MX_GPIO_Init+0xf0>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003938:	f042 0210 	orr.w	r2, r2, #16
 800393c:	619a      	str	r2, [r3, #24]
 800393e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RST_Pin|OLED_CS_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 8003940:	4c31      	ldr	r4, [pc, #196]	; (8003a08 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003942:	f002 0210 	and.w	r2, r2, #16
 8003946:	9200      	str	r2, [sp, #0]
 8003948:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800394a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800394c:	4628      	mov	r0, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800394e:	f042 0220 	orr.w	r2, r2, #32
 8003952:	619a      	str	r2, [r3, #24]
 8003954:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800395a:	f002 0220 	and.w	r2, r2, #32
 800395e:	9201      	str	r2, [sp, #4]
 8003960:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003962:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003964:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003966:	f042 0204 	orr.w	r2, r2, #4
 800396a:	619a      	str	r2, [r3, #24]
 800396c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800396e:	f04f 0811 	mov.w	r8, #17
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003972:	f002 0204 	and.w	r2, r2, #4
 8003976:	9202      	str	r2, [sp, #8]
 8003978:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800397a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800397c:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003980:	f042 0208 	orr.w	r2, r2, #8
 8003984:	619a      	str	r2, [r3, #24]
 8003986:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003988:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	9303      	str	r3, [sp, #12]
 8003990:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003992:	f000 fed9 	bl	8004748 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8003996:	4650      	mov	r0, sl
 8003998:	2200      	movs	r2, #0
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	f000 fed4 	bl	8004748 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, OLED_RST_Pin|OLED_CS_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 80039a0:	2200      	movs	r2, #0
 80039a2:	4620      	mov	r0, r4
 80039a4:	f243 0103 	movw	r1, #12291	; 0x3003
 80039a8:	f000 fece 	bl	8004748 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80039ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80039b0:	a904      	add	r1, sp, #16
 80039b2:	4628      	mov	r0, r5

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b4:	2600      	movs	r6, #0
 80039b6:	2502      	movs	r5, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80039b8:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039bc:	e9cd 7906 	strd	r7, r9, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80039c0:	f000 fde2 	bl	8004588 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80039c4:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80039c6:	a904      	add	r1, sp, #16
 80039c8:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ca:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ce:	e9cd 6506 	strd	r6, r5, [sp, #24]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80039d2:	f000 fdd9 	bl	8004588 <HAL_GPIO_Init>
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d6:	a904      	add	r1, sp, #16
 80039d8:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039da:	e9cd 9704 	strd	r9, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039de:	e9cd 6506 	strd	r6, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e2:	f000 fdd1 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin;
 80039e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ea:	a904      	add	r1, sp, #16
 80039ec:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80039ee:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f2:	e9cd 6506 	strd	r6, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f6:	f000 fdc7 	bl	8004588 <HAL_GPIO_Init>

}
 80039fa:	b008      	add	sp, #32
 80039fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40011000 	.word	0x40011000
 8003a08:	40010c00 	.word	0x40010c00
 8003a0c:	40010800 	.word	0x40010800

08003a10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a10:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003a12:	480b      	ldr	r0, [pc, #44]	; (8003a40 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <MX_I2C1_Init+0x34>)
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <MX_I2C1_Init+0x38>)
 8003a18:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a1c:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8003a22:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a26:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a2a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a2e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a30:	f001 f862 	bl	8004af8 <HAL_I2C_Init>
 8003a34:	b118      	cbz	r0, 8003a3e <MX_I2C1_Init+0x2e>
  {
    Error_Handler();
  }

}
 8003a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003a3a:	f000 b9d3 	b.w	8003de4 <Error_Handler>
}
 8003a3e:	bd08      	pop	{r3, pc}
 8003a40:	20000ee0 	.word	0x20000ee0
 8003a44:	40005400 	.word	0x40005400
 8003a48:	000186a0 	.word	0x000186a0

08003a4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	4604      	mov	r4, r0
 8003a50:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a52:	2210      	movs	r2, #16
 8003a54:	2100      	movs	r1, #0
 8003a56:	a802      	add	r0, sp, #8
 8003a58:	f002 fbd1 	bl	80061fe <memset>
  if(i2cHandle->Instance==I2C1)
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <HAL_I2C_MspInit+0x58>)
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d11c      	bne.n	8003a9e <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a64:	4c10      	ldr	r4, [pc, #64]	; (8003aa8 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a66:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a68:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a6a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6c:	f043 0308 	orr.w	r3, r3, #8
 8003a70:	61a3      	str	r3, [r4, #24]
 8003a72:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a74:	480d      	ldr	r0, [pc, #52]	; (8003aac <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a7e:	2312      	movs	r3, #18
 8003a80:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a84:	2303      	movs	r3, #3
 8003a86:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a88:	f000 fd7e 	bl	8004588 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a8c:	69e3      	ldr	r3, [r4, #28]
 8003a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a92:	61e3      	str	r3, [r4, #28]
 8003a94:	69e3      	ldr	r3, [r4, #28]
 8003a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003a9e:	b006      	add	sp, #24
 8003aa0:	bd10      	pop	{r4, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40005400 	.word	0x40005400
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40010c00 	.word	0x40010c00

08003ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ab0:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ab2:	2414      	movs	r4, #20
{
 8003ab4:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ab6:	4622      	mov	r2, r4
 8003ab8:	2100      	movs	r1, #0
 8003aba:	a808      	add	r0, sp, #32
 8003abc:	f002 fb9f 	bl	80061fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	a801      	add	r0, sp, #4
 8003ac6:	f002 fb9a 	bl	80061fe <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003aca:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003acc:	2201      	movs	r2, #1
 8003ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ad2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ad6:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003ada:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ade:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ae0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003ae2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ae4:	f001 fa82 	bl	8004fec <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ae8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003aea:	2200      	movs	r2, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aec:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003af4:	4621      	mov	r1, r4
 8003af6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003af8:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003afc:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003afe:	f001 fc4d 	bl	800539c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8003b02:	b010      	add	sp, #64	; 0x40
 8003b04:	bd10      	pop	{r4, pc}
	...

08003b08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b538      	push	{r3, r4, r5, lr}


  if(htim==(&htim1))
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b0c:	4283      	cmp	r3, r0
 8003b0e:	d134      	bne.n	8003b7a <HAL_TIM_PeriodElapsedCallback+0x72>
  {

	/***************test led****************/
	  if(cnt/200%2)
 8003b10:	4c1b      	ldr	r4, [pc, #108]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x78>)
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	  if(cnt/200%2)
 8003b16:	7823      	ldrb	r3, [r4, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003b18:	481a      	ldr	r0, [pc, #104]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x7c>)
	  if(cnt/200%2)
 8003b1a:	2bc7      	cmp	r3, #199	; 0xc7
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003b1c:	bf8c      	ite	hi
 8003b1e:	2201      	movhi	r2, #1
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003b20:	2200      	movls	r2, #0
 8003b22:	f000 fe11 	bl	8004748 <HAL_GPIO_WritePin>


	/*****************process*****************/

	setFrenquency(accel(pitch,&pid_pitch));
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b28:	4918      	ldr	r1, [pc, #96]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	f000 fbe6 	bl	80042fc <accel>
 8003b30:	f000 fc0e 	bl	8004350 <setFrenquency>
	if(cnt%128==0)
 8003b34:	7820      	ldrb	r0, [r4, #0]
 8003b36:	f010 057f 	ands.w	r5, r0, #127	; 0x7f
 8003b3a:	d107      	bne.n	8003b4c <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		OLED_ClearWave();
 8003b3c:	f7ff fd68 	bl	8003610 <OLED_ClearWave>
		OLED_DrawLine(0, 48, 127, 48);
 8003b40:	2330      	movs	r3, #48	; 0x30
 8003b42:	227f      	movs	r2, #127	; 0x7f
 8003b44:	4619      	mov	r1, r3
 8003b46:	4628      	mov	r0, r5
 8003b48:	f7ff fd92 	bl	8003670 <OLED_DrawLine>
	}
	OLED_DrawPoint(cnt%128, 48+velocity/100*16);
 8003b4c:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003b4e:	4911      	ldr	r1, [pc, #68]	; (8003b94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	f7fd f9ab 	bl	8000eac <__aeabi_fdiv>
 8003b56:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8003b5a:	f7fd f8f3 	bl	8000d44 <__aeabi_fmul>
 8003b5e:	490e      	ldr	r1, [pc, #56]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003b60:	f7fc ffe8 	bl	8000b34 <__addsf3>
 8003b64:	f7fd fada 	bl	800111c <__aeabi_f2uiz>
 8003b68:	7823      	ldrb	r3, [r4, #0]
 8003b6a:	b2c1      	uxtb	r1, r0
 8003b6c:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8003b70:	f7ff fd5e 	bl	8003630 <OLED_DrawPoint>
	cnt++;
 8003b74:	7823      	ldrb	r3, [r4, #0]
 8003b76:	3301      	adds	r3, #1
 8003b78:	7023      	strb	r3, [r4, #0]
  }
}
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}
 8003b7c:	20000ff0 	.word	0x20000ff0
 8003b80:	20000a20 	.word	0x20000a20
 8003b84:	40011000 	.word	0x40011000
 8003b88:	20000f84 	.word	0x20000f84
 8003b8c:	20000f5c 	.word	0x20000f5c
 8003b90:	20000a24 	.word	0x20000a24
 8003b94:	42c80000 	.word	0x42c80000
 8003b98:	42400000 	.word	0x42400000

08003b9c <usart1_send_char>:


void usart1_send_char(uint8_t c)
{
    while((USART1->SR&0X40)==0);//等待上一次发送完�?????????????????????
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <usart1_send_char+0xc>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	0652      	lsls	r2, r2, #25
 8003ba2:	d5fc      	bpl.n	8003b9e <usart1_send_char+0x2>
    USART1->DR=c;
 8003ba4:	6058      	str	r0, [r3, #4]
}
 8003ba6:	4770      	bx	lr
 8003ba8:	40013800 	.word	0x40013800

08003bac <usart1_niming_report.part.0>:

//fun:功能�?????????????????????. 0XA0~0XAF
//data:数据缓存�?????????????????????,�?????????????????????�?????????????????????28字节!!
//len:data区有效数据个�?????????????????????
void usart1_niming_report(uint8_t fun,uint8_t*data,uint8_t len)
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	b088      	sub	sp, #32
{
    uint8_t send_buf[32];
    uint8_t i;
    if(len>28)return;    //�?????????????????????�?????????????????????28字节数据
    send_buf[len+3]=0;  //校验数置�?????????????????????
 8003bb0:	ab08      	add	r3, sp, #32
 8003bb2:	1cd4      	adds	r4, r2, #3
 8003bb4:	191d      	adds	r5, r3, r4
    send_buf[0]=0X88;   //帧头
 8003bb6:	2688      	movs	r6, #136	; 0x88
    send_buf[len+3]=0;  //校验数置�?????????????????????
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f805 3c20 	strb.w	r3, [r5, #-32]
    send_buf[0]=0X88;   //帧头
 8003bbe:	f88d 6000 	strb.w	r6, [sp]
    send_buf[1]=fun;    //功能�?????????????????????
 8003bc2:	f88d 0001 	strb.w	r0, [sp, #1]
    send_buf[2]=len;    //数据长度
 8003bc6:	f88d 2002 	strb.w	r2, [sp, #2]
    for(i=0;i<len;i++)send_buf[3+i]=data[i];         //复制数据
 8003bca:	b2d8      	uxtb	r0, r3
 8003bcc:	4282      	cmp	r2, r0
 8003bce:	d80e      	bhi.n	8003bee <usart1_niming_report.part.0+0x42>
 8003bd0:	2100      	movs	r1, #0
    for(i=0;i<len+3;i++)send_buf[len+3]+=send_buf[i];    //计算校验�?????????????????????
 8003bd2:	3202      	adds	r2, #2
 8003bd4:	b2cb      	uxtb	r3, r1
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	f101 0101 	add.w	r1, r1, #1
 8003bdc:	dd0d      	ble.n	8003bfa <usart1_niming_report.part.0+0x4e>
 8003bde:	2100      	movs	r1, #0
    for(i=0;i<len+4;i++)usart1_send_char(send_buf[i]);   //发�?�数据到串口1
 8003be0:	b2cb      	uxtb	r3, r1
 8003be2:	429c      	cmp	r4, r3
 8003be4:	f101 0101 	add.w	r1, r1, #1
 8003be8:	da11      	bge.n	8003c0e <usart1_niming_report.part.0+0x62>
}
 8003bea:	b008      	add	sp, #32
 8003bec:	bd70      	pop	{r4, r5, r6, pc}
    for(i=0;i<len;i++)send_buf[3+i]=data[i];         //复制数据
 8003bee:	5cce      	ldrb	r6, [r1, r3]
 8003bf0:	eb0d 0003 	add.w	r0, sp, r3
 8003bf4:	70c6      	strb	r6, [r0, #3]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	e7e7      	b.n	8003bca <usart1_niming_report.part.0+0x1e>
    for(i=0;i<len+3;i++)send_buf[len+3]+=send_buf[i];    //计算校验�?????????????????????
 8003bfa:	a808      	add	r0, sp, #32
 8003bfc:	4403      	add	r3, r0
 8003bfe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003c02:	f815 0c20 	ldrb.w	r0, [r5, #-32]
 8003c06:	4403      	add	r3, r0
 8003c08:	f805 3c20 	strb.w	r3, [r5, #-32]
 8003c0c:	e7e2      	b.n	8003bd4 <usart1_niming_report.part.0+0x28>
    for(i=0;i<len+4;i++)usart1_send_char(send_buf[i]);   //发�?�数据到串口1
 8003c0e:	aa08      	add	r2, sp, #32
 8003c10:	4413      	add	r3, r2
 8003c12:	f813 0c20 	ldrb.w	r0, [r3, #-32]
 8003c16:	f7ff ffc1 	bl	8003b9c <usart1_send_char>
 8003c1a:	e7e1      	b.n	8003be0 <usart1_niming_report.part.0+0x34>

08003c1c <mpu6050_send_data>:

void mpu6050_send_data(float pitch,float roll,float yaw)
{
 8003c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tbuf[16];
    unsigned char *p;
    p=(unsigned char *)&pitch;
    tbuf[0]=(unsigned char)(*(p+3));
 8003c1e:	f3c0 6307 	ubfx	r3, r0, #24, #8
 8003c22:	f88d 3000 	strb.w	r3, [sp]
    tbuf[1]=(unsigned char)(*(p+2));
 8003c26:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003c2a:	f88d 3001 	strb.w	r3, [sp, #1]
    tbuf[2]=(unsigned char)(*(p+1));
 8003c2e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003c32:	f88d 3002 	strb.w	r3, [sp, #2]
    tbuf[3]=(unsigned char)(*(p+0));

    p=(unsigned char *)&roll;
    tbuf[4]=(unsigned char)(*(p+3));
 8003c36:	f3c1 6307 	ubfx	r3, r1, #24, #8
 8003c3a:	f88d 3004 	strb.w	r3, [sp, #4]
    tbuf[5]=(unsigned char)(*(p+2));
 8003c3e:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8003c42:	f88d 3005 	strb.w	r3, [sp, #5]
    tbuf[6]=(unsigned char)(*(p+1));
 8003c46:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003c4a:	f88d 3006 	strb.w	r3, [sp, #6]
    tbuf[7]=(unsigned char)(*(p+0));

    p=(unsigned char *)&yaw;
    tbuf[8]=(unsigned char)(*(p+3));
 8003c4e:	f3c2 6307 	ubfx	r3, r2, #24, #8
 8003c52:	f88d 3008 	strb.w	r3, [sp, #8]
    tbuf[9]=(unsigned char)(*(p+2));
 8003c56:	f3c2 4307 	ubfx	r3, r2, #16, #8
    tbuf[3]=(unsigned char)(*(p+0));
 8003c5a:	f88d 0003 	strb.w	r0, [sp, #3]
    tbuf[7]=(unsigned char)(*(p+0));
 8003c5e:	f88d 1007 	strb.w	r1, [sp, #7]
    tbuf[9]=(unsigned char)(*(p+2));
 8003c62:	f88d 3009 	strb.w	r3, [sp, #9]
    tbuf[10]=(unsigned char)(*(p+1));
    tbuf[11]=(unsigned char)(*(p+0));
 8003c66:	f88d 200b 	strb.w	r2, [sp, #11]
    tbuf[10]=(unsigned char)(*(p+1));
 8003c6a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003c6e:	4669      	mov	r1, sp
 8003c70:	220c      	movs	r2, #12
 8003c72:	20a2      	movs	r0, #162	; 0xa2
 8003c74:	f88d 300a 	strb.w	r3, [sp, #10]
 8003c78:	f7ff ff98 	bl	8003bac <usart1_niming_report.part.0>

    usart1_niming_report(0XA2,tbuf,12);//自定义帧,0XA2
}
 8003c7c:	b005      	add	sp, #20
 8003c7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003c84 <main>:
{
 8003c84:	b58f      	push	{r0, r1, r2, r3, r7, lr}
  HAL_Init();
 8003c86:	f000 fbdf 	bl	8004448 <HAL_Init>
  SystemClock_Config();
 8003c8a:	f7ff ff11 	bl	8003ab0 <SystemClock_Config>
  MX_GPIO_Init();
 8003c8e:	f7ff fe45 	bl	800391c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003c92:	f7ff febd 	bl	8003a10 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003c96:	f000 fa97 	bl	80041c8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8003c9a:	f000 f9b9 	bl	8004010 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003c9e:	f000 fa43 	bl	8004128 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003ca2:	f000 f90f 	bl	8003ec4 <MX_SPI1_Init>
  OLED_Init();
 8003ca6:	f7ff fdab 	bl	8003800 <OLED_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8003caa:	483b      	ldr	r0, [pc, #236]	; (8003d98 <main+0x114>)
 8003cac:	f001 fe0e 	bl	80058cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	483a      	ldr	r0, [pc, #232]	; (8003d9c <main+0x118>)
 8003cb4:	f002 f8f0 	bl	8005e98 <HAL_TIM_PWM_Start>
  RetargetInit(&huart1);
 8003cb8:	4839      	ldr	r0, [pc, #228]	; (8003da0 <main+0x11c>)
 8003cba:	f000 f895 	bl	8003de8 <RetargetInit>
  OLED_ShowString(0, 0, "MPU start init", 16);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	4a38      	ldr	r2, [pc, #224]	; (8003da4 <main+0x120>)
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	f7ff fd7b 	bl	80037c0 <OLED_ShowString>
  OLED_Refresh();
 8003cca:	f7ff fc6f 	bl	80035ac <OLED_Refresh>
  	    printf("MPU6050 Error!!!\r\n");
 8003cce:	4c36      	ldr	r4, [pc, #216]	; (8003da8 <main+0x124>)
  while(mpu_dmp_init())//
 8003cd0:	f7fe fda6 	bl	8002820 <mpu_dmp_init>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d156      	bne.n	8003d86 <main+0x102>
  printf("MPU6050 OK\r\n");
 8003cd8:	4834      	ldr	r0, [pc, #208]	; (8003dac <main+0x128>)
 8003cda:	f002 faf1 	bl	80062c0 <puts>
  OLED_Clear();
 8003cde:	f7ff fc87 	bl	80035f0 <OLED_Clear>
  PID_Init();
 8003ce2:	f000 faef 	bl	80042c4 <PID_Init>
	if(mpu_dmp_get_data(&pitch,&roll,&yaw)==0)
 8003ce6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003db8 <main+0x134>
 8003cea:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003dbc <main+0x138>
					sprintf(oled_buffer,"%f",pitch);
 8003cee:	4d30      	ldr	r5, [pc, #192]	; (8003db0 <main+0x12c>)
	if(mpu_dmp_get_data(&pitch,&roll,&yaw)==0)
 8003cf0:	4f30      	ldr	r7, [pc, #192]	; (8003db4 <main+0x130>)
 8003cf2:	4a31      	ldr	r2, [pc, #196]	; (8003db8 <main+0x134>)
 8003cf4:	4931      	ldr	r1, [pc, #196]	; (8003dbc <main+0x138>)
 8003cf6:	482f      	ldr	r0, [pc, #188]	; (8003db4 <main+0x130>)
 8003cf8:	f7fe fe16 	bl	8002928 <mpu_dmp_get_data>
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d1f7      	bne.n	8003cf2 <main+0x6e>
				temp=MPU_Get_Temperature();
 8003d02:	f7ff fbc9 	bl	8003498 <MPU_Get_Temperature>
 8003d06:	4b2e      	ldr	r3, [pc, #184]	; (8003dc0 <main+0x13c>)
				MPU_Get_Accelerometer(&aacx,&aacy,&aacz);
 8003d08:	4a2e      	ldr	r2, [pc, #184]	; (8003dc4 <main+0x140>)
				temp=MPU_Get_Temperature();
 8003d0a:	8018      	strh	r0, [r3, #0]
				MPU_Get_Accelerometer(&aacx,&aacy,&aacz);
 8003d0c:	492e      	ldr	r1, [pc, #184]	; (8003dc8 <main+0x144>)
 8003d0e:	482f      	ldr	r0, [pc, #188]	; (8003dcc <main+0x148>)
 8003d10:	f7ff fc10 	bl	8003534 <MPU_Get_Accelerometer>
					printf("  %f\r\n",velocity);
 8003d14:	4e2e      	ldr	r6, [pc, #184]	; (8003dd0 <main+0x14c>)
				MPU_Get_Gyroscope(&gyrox,&gyroy,&gyroz);
 8003d16:	4a2f      	ldr	r2, [pc, #188]	; (8003dd4 <main+0x150>)
 8003d18:	492f      	ldr	r1, [pc, #188]	; (8003dd8 <main+0x154>)
 8003d1a:	4830      	ldr	r0, [pc, #192]	; (8003ddc <main+0x158>)
 8003d1c:	f7ff fbe8 	bl	80034f0 <MPU_Get_Gyroscope>
					mpu6050_send_data(pitch,roll,yaw);
 8003d20:	f8d9 2000 	ldr.w	r2, [r9]
 8003d24:	f8d8 1000 	ldr.w	r1, [r8]
 8003d28:	6838      	ldr	r0, [r7, #0]
 8003d2a:	f7ff ff77 	bl	8003c1c <mpu6050_send_data>
					printf("  %f\r\n",velocity);
 8003d2e:	6830      	ldr	r0, [r6, #0]
 8003d30:	f7fc fb7a 	bl	8000428 <__aeabi_f2d>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4829      	ldr	r0, [pc, #164]	; (8003de0 <main+0x15c>)
 8003d3a:	f002 fa69 	bl	8006210 <printf>
					sprintf(oled_buffer,"%f",pitch);
 8003d3e:	6838      	ldr	r0, [r7, #0]
 8003d40:	f7fc fb72 	bl	8000428 <__aeabi_f2d>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4668      	mov	r0, sp
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	f002 fb76 	bl	800643c <sprintf>
					OLED_ShowString(0, 0, oled_buffer, sizeof(oled_buffer));
 8003d50:	466a      	mov	r2, sp
 8003d52:	2310      	movs	r3, #16
 8003d54:	4621      	mov	r1, r4
 8003d56:	4620      	mov	r0, r4
 8003d58:	f7ff fd32 	bl	80037c0 <OLED_ShowString>
					sprintf(oled_buffer,"%f",velocity);
 8003d5c:	6830      	ldr	r0, [r6, #0]
 8003d5e:	f7fc fb63 	bl	8000428 <__aeabi_f2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4668      	mov	r0, sp
 8003d68:	4629      	mov	r1, r5
 8003d6a:	f002 fb67 	bl	800643c <sprintf>
					OLED_ShowString(0, 16, oled_buffer, sizeof(oled_buffer));
 8003d6e:	2310      	movs	r3, #16
 8003d70:	4620      	mov	r0, r4
 8003d72:	466a      	mov	r2, sp
 8003d74:	4619      	mov	r1, r3
 8003d76:	f7ff fd23 	bl	80037c0 <OLED_ShowString>
					OLED_Refresh();
 8003d7a:	f7ff fc17 	bl	80035ac <OLED_Refresh>
					HAL_Delay(100);
 8003d7e:	2064      	movs	r0, #100	; 0x64
 8003d80:	f000 fb86 	bl	8004490 <HAL_Delay>
 8003d84:	e7b4      	b.n	8003cf0 <main+0x6c>
  	    printf("MPU6050 Error!!!\r\n");
 8003d86:	4620      	mov	r0, r4
 8003d88:	f002 fa9a 	bl	80062c0 <puts>
        HAL_Delay(500);
 8003d8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d90:	f000 fb7e 	bl	8004490 <HAL_Delay>
 8003d94:	e79c      	b.n	8003cd0 <main+0x4c>
 8003d96:	bf00      	nop
 8003d98:	20000ff0 	.word	0x20000ff0
 8003d9c:	20001038 	.word	0x20001038
 8003da0:	20001080 	.word	0x20001080
 8003da4:	0800e926 	.word	0x0800e926
 8003da8:	0800e935 	.word	0x0800e935
 8003dac:	0800e947 	.word	0x0800e947
 8003db0:	0800e95a 	.word	0x0800e95a
 8003db4:	20000f84 	.word	0x20000f84
 8003db8:	20000f80 	.word	0x20000f80
 8003dbc:	20000f88 	.word	0x20000f88
 8003dc0:	20000f5a 	.word	0x20000f5a
 8003dc4:	20000f8e 	.word	0x20000f8e
 8003dc8:	20000f7c 	.word	0x20000f7c
 8003dcc:	20000f58 	.word	0x20000f58
 8003dd0:	20000a24 	.word	0x20000a24
 8003dd4:	20000f34 	.word	0x20000f34
 8003dd8:	20000f90 	.word	0x20000f90
 8003ddc:	20000f8c 	.word	0x20000f8c
 8003de0:	0800e953 	.word	0x0800e953

08003de4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003de4:	4770      	bx	lr
	...

08003de8 <RetargetInit>:
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
  gHuart = huart;
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <RetargetInit+0x14>)

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003dea:	2202      	movs	r2, #2
  gHuart = huart;
 8003dec:	6018      	str	r0, [r3, #0]
  setvbuf(stdout, NULL, _IONBF, 0);
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <RetargetInit+0x18>)
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	6880      	ldr	r0, [r0, #8]
 8003df6:	4619      	mov	r1, r3
 8003df8:	f002 ba6a 	b.w	80062d0 <setvbuf>
 8003dfc:	20000f94 	.word	0x20000f94
 8003e00:	20000044 	.word	0x20000044

08003e04 <_isatty>:
}

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003e04:	2802      	cmp	r0, #2
int _isatty(int fd) {
 8003e06:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003e08:	d905      	bls.n	8003e16 <_isatty+0x12>
    return 1;

  errno = EBADF;
 8003e0a:	f002 f9bf 	bl	800618c <__errno>
 8003e0e:	2309      	movs	r3, #9
 8003e10:	6003      	str	r3, [r0, #0]
  return 0;
 8003e12:	2000      	movs	r0, #0
}
 8003e14:	bd08      	pop	{r3, pc}
    return 1;
 8003e16:	2001      	movs	r0, #1
 8003e18:	e7fc      	b.n	8003e14 <_isatty+0x10>
	...

08003e1c <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003e1c:	3801      	subs	r0, #1
 8003e1e:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 8003e20:	b510      	push	{r4, lr}
 8003e22:	4614      	mov	r4, r2
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003e24:	d80b      	bhi.n	8003e3e <_write+0x22>
   hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len,1000);
 8003e26:	4809      	ldr	r0, [pc, #36]	; (8003e4c <_write+0x30>)
 8003e28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e2c:	b292      	uxth	r2, r2
 8003e2e:	6800      	ldr	r0, [r0, #0]
 8003e30:	f002 f8f8 	bl	8006024 <HAL_UART_Transmit>
    //hstatus = HAL_UART_Transmit_DMA(gHuart, (uint8_t *) ptr, len);
    if (hstatus == HAL_OK)
 8003e34:	2800      	cmp	r0, #0
      return len;
    else
      return EIO;
 8003e36:	bf18      	it	ne
 8003e38:	2405      	movne	r4, #5
  }
  errno = EBADF;
  return -1;
}
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8003e3e:	f002 f9a5 	bl	800618c <__errno>
 8003e42:	2309      	movs	r3, #9
  return -1;
 8003e44:	f04f 34ff 	mov.w	r4, #4294967295
  errno = EBADF;
 8003e48:	6003      	str	r3, [r0, #0]
  return -1;
 8003e4a:	e7f6      	b.n	8003e3a <_write+0x1e>
 8003e4c:	20000f94 	.word	0x20000f94

08003e50 <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003e50:	2802      	cmp	r0, #2
int _close(int fd) {
 8003e52:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003e54:	d906      	bls.n	8003e64 <_close+0x14>
    return 0;

  errno = EBADF;
 8003e56:	f002 f999 	bl	800618c <__errno>
 8003e5a:	2309      	movs	r3, #9
 8003e5c:	6003      	str	r3, [r0, #0]
  return -1;
 8003e5e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003e62:	bd08      	pop	{r3, pc}
    return 0;
 8003e64:	2000      	movs	r0, #0
 8003e66:	e7fc      	b.n	8003e62 <_close+0x12>

08003e68 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003e68:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003e6a:	f002 f98f 	bl	800618c <__errno>
 8003e6e:	2309      	movs	r3, #9
 8003e70:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003e72:	f04f 30ff 	mov.w	r0, #4294967295
 8003e76:	bd08      	pop	{r3, pc}

08003e78 <_read>:

int _read(int fd, char* ptr, int len) {
 8003e78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003e7a:	b958      	cbnz	r0, 8003e94 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1,1000);
 8003e7c:	4809      	ldr	r0, [pc, #36]	; (8003ea4 <_read+0x2c>)
 8003e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e82:	2201      	movs	r2, #1
 8003e84:	6800      	ldr	r0, [r0, #0]
 8003e86:	f002 f924 	bl	80060d2 <HAL_UART_Receive>
    //hstatus = HAL_UART_Receive_DMA(gHuart, (uint8_t *) ptr, 1);
    if (hstatus == HAL_OK)
 8003e8a:	2800      	cmp	r0, #0
      return 1;
    else
      return EIO;
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2001      	moveq	r0, #1
 8003e90:	2005      	movne	r0, #5
  }
  errno = EBADF;
  return -1;
}
 8003e92:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8003e94:	f002 f97a 	bl	800618c <__errno>
 8003e98:	2309      	movs	r3, #9
 8003e9a:	6003      	str	r3, [r0, #0]
  return -1;
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	e7f7      	b.n	8003e92 <_read+0x1a>
 8003ea2:	bf00      	nop
 8003ea4:	20000f94 	.word	0x20000f94

08003ea8 <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003ea8:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 8003eaa:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003eac:	d804      	bhi.n	8003eb8 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 8003eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eb2:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8003eb8:	f002 f968 	bl	800618c <__errno>
 8003ebc:	2309      	movs	r3, #9
 8003ebe:	6003      	str	r3, [r0, #0]
  return 0;
 8003ec0:	e7f8      	b.n	8003eb4 <_fstat+0xc>
	...

08003ec4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ec4:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ec6:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8003eca:	480d      	ldr	r0, [pc, #52]	; (8003f00 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ecc:	4a0d      	ldr	r2, [pc, #52]	; (8003f04 <MX_SPI1_Init+0x40>)
 8003ece:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ed2:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ed8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003edc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee0:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ee4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003eea:	230a      	movs	r3, #10
 8003eec:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003eee:	f001 fb75 	bl	80055dc <HAL_SPI_Init>
 8003ef2:	b118      	cbz	r0, 8003efc <MX_SPI1_Init+0x38>
  {
    Error_Handler();
  }

}
 8003ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003ef8:	f7ff bf74 	b.w	8003de4 <Error_Handler>
}
 8003efc:	bd08      	pop	{r3, pc}
 8003efe:	bf00      	nop
 8003f00:	20000f98 	.word	0x20000f98
 8003f04:	40013000 	.word	0x40013000

08003f08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0e:	2210      	movs	r2, #16
 8003f10:	2100      	movs	r1, #0
 8003f12:	a802      	add	r0, sp, #8
 8003f14:	f002 f973 	bl	80061fe <memset>
  if(spiHandle->Instance==SPI1)
 8003f18:	6822      	ldr	r2, [r4, #0]
 8003f1a:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <HAL_SPI_MspInit+0x58>)
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d11d      	bne.n	8003f5c <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f20:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8003f24:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f26:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f2c:	619a      	str	r2, [r3, #24]
 8003f2e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f30:	480c      	ldr	r0, [pc, #48]	; (8003f64 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f32:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f36:	9200      	str	r2, [sp, #0]
 8003f38:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	f042 0204 	orr.w	r2, r2, #4
 8003f40:	619a      	str	r2, [r3, #24]
 8003f42:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f44:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f54:	2303      	movs	r3, #3
 8003f56:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f58:	f000 fb16 	bl	8004588 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003f5c:	b006      	add	sp, #24
 8003f5e:	bd10      	pop	{r4, pc}
 8003f60:	40013000 	.word	0x40013000
 8003f64:	40010800 	.word	0x40010800

08003f68 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f68:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <HAL_MspInit+0x3c>)
{
 8003f6a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	619a      	str	r2, [r3, #24]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	f002 0201 	and.w	r2, r2, #1
 8003f7a:	9200      	str	r2, [sp, #0]
 8003f7c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f84:	61da      	str	r2, [r3, #28]
 8003f86:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003f88:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003f92:	6853      	ldr	r3, [r2, #4]
 8003f94:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f9e:	b002      	add	sp, #8
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40010000 	.word	0x40010000

08003fac <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fac:	4770      	bx	lr

08003fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fae:	e7fe      	b.n	8003fae <HardFault_Handler>

08003fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fb0:	e7fe      	b.n	8003fb0 <MemManage_Handler>

08003fb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fb2:	e7fe      	b.n	8003fb2 <BusFault_Handler>

08003fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fb4:	e7fe      	b.n	8003fb4 <UsageFault_Handler>

08003fb6 <SVC_Handler>:
 8003fb6:	4770      	bx	lr

08003fb8 <DebugMon_Handler>:
 8003fb8:	4770      	bx	lr

08003fba <PendSV_Handler>:
 8003fba:	4770      	bx	lr

08003fbc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fbc:	f000 ba56 	b.w	800446c <HAL_IncTick>

08003fc0 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003fc0:	4801      	ldr	r0, [pc, #4]	; (8003fc8 <TIM1_UP_IRQHandler+0x8>)
 8003fc2:	f001 bcb2 	b.w	800592a <HAL_TIM_IRQHandler>
 8003fc6:	bf00      	nop
 8003fc8:	20000ff0 	.word	0x20000ff0

08003fcc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <_sbrk+0x30>)
{
 8003fce:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003fd0:	6819      	ldr	r1, [r3, #0]
{
 8003fd2:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8003fd4:	b909      	cbnz	r1, 8003fda <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8003fd6:	490a      	ldr	r1, [pc, #40]	; (8004000 <_sbrk+0x34>)
 8003fd8:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	4909      	ldr	r1, [pc, #36]	; (8004004 <_sbrk+0x38>)
 8003fde:	4c0a      	ldr	r4, [pc, #40]	; (8004008 <_sbrk+0x3c>)
 8003fe0:	4402      	add	r2, r0
 8003fe2:	1b09      	subs	r1, r1, r4
 8003fe4:	428a      	cmp	r2, r1
 8003fe6:	d906      	bls.n	8003ff6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8003fe8:	f002 f8d0 	bl	800618c <__errno>
 8003fec:	230c      	movs	r3, #12
 8003fee:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003ff4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003ff6:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8003ff8:	e7fc      	b.n	8003ff4 <_sbrk+0x28>
 8003ffa:	bf00      	nop
 8003ffc:	20000a28 	.word	0x20000a28
 8004000:	200010d8 	.word	0x200010d8
 8004004:	20005000 	.word	0x20005000
 8004008:	00000400 	.word	0x00000400

0800400c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800400c:	4770      	bx	lr
	...

08004010 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004010:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004012:	2210      	movs	r2, #16
 8004014:	2100      	movs	r1, #0
 8004016:	a802      	add	r0, sp, #8
 8004018:	f002 f8f1 	bl	80061fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;
 800401c:	2247      	movs	r2, #71	; 0x47
  htim1.Instance = TIM1;
 800401e:	4815      	ldr	r0, [pc, #84]	; (8004074 <MX_TIM1_Init+0x64>)
  htim1.Init.Prescaler = 71;
 8004020:	4915      	ldr	r1, [pc, #84]	; (8004078 <MX_TIM1_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004022:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 71;
 8004024:	e9c0 1200 	strd	r1, r2, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 9999;
 8004028:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800402c:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004030:	6083      	str	r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004032:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
 8004036:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800403c:	f001 fd50 	bl	8005ae0 <HAL_TIM_Base_Init>
 8004040:	b108      	cbz	r0, 8004046 <MX_TIM1_Init+0x36>
  {
    Error_Handler();
 8004042:	f7ff fecf 	bl	8003de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800404a:	a902      	add	r1, sp, #8
 800404c:	4809      	ldr	r0, [pc, #36]	; (8004074 <MX_TIM1_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800404e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004050:	f001 fe31 	bl	8005cb6 <HAL_TIM_ConfigClockSource>
 8004054:	b108      	cbz	r0, 800405a <MX_TIM1_Init+0x4a>
  {
    Error_Handler();
 8004056:	f7ff fec5 	bl	8003de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800405a:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800405c:	4669      	mov	r1, sp
 800405e:	4805      	ldr	r0, [pc, #20]	; (8004074 <MX_TIM1_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004060:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004064:	f001 ff1a 	bl	8005e9c <HAL_TIMEx_MasterConfigSynchronization>
 8004068:	b108      	cbz	r0, 800406e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800406a:	f7ff febb 	bl	8003de4 <Error_Handler>
  }

}
 800406e:	b007      	add	sp, #28
 8004070:	f85d fb04 	ldr.w	pc, [sp], #4
 8004074:	20000ff0 	.word	0x20000ff0
 8004078:	40012c00 	.word	0x40012c00

0800407c <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim2);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800407c:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM1)
 800407e:	6803      	ldr	r3, [r0, #0]
 8004080:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <HAL_TIM_Base_MspInit+0x58>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d114      	bne.n	80040b0 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <HAL_TIM_Base_MspInit+0x5c>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 12, 0);
 8004088:	210c      	movs	r1, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 800408a:	699a      	ldr	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 12, 0);
 800408c:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 800408e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004092:	619a      	str	r2, [r3, #24]
 8004094:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 12, 0);
 8004096:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 12, 0);
 80040a0:	f000 fa1a 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80040a4:	2019      	movs	r0, #25
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80040a6:	b003      	add	sp, #12
 80040a8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80040ac:	f000 ba48 	b.w	8004540 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM2)
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d10a      	bne.n	80040cc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040b6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	f042 0201 	orr.w	r2, r2, #1
 80040c0:	61da      	str	r2, [r3, #28]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	9b01      	ldr	r3, [sp, #4]
}
 80040cc:	b003      	add	sp, #12
 80040ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80040d2:	bf00      	nop
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40021000 	.word	0x40021000

080040dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80040dc:	b510      	push	{r4, lr}
 80040de:	4604      	mov	r4, r0
 80040e0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e2:	2210      	movs	r2, #16
 80040e4:	2100      	movs	r1, #0
 80040e6:	a802      	add	r0, sp, #8
 80040e8:	f002 f889 	bl	80061fe <memset>
  if(timHandle->Instance==TIM2)
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f2:	d114      	bne.n	800411e <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040f4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80040f8:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040fc:	f042 0204 	orr.w	r2, r2, #4
 8004100:	619a      	str	r2, [r3, #24]
 8004102:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004104:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800410e:	2312      	movs	r3, #18
 8004110:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004114:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004116:	4803      	ldr	r0, [pc, #12]	; (8004124 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004118:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411a:	f000 fa35 	bl	8004588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800411e:	b006      	add	sp, #24
 8004120:	bd10      	pop	{r4, pc}
 8004122:	bf00      	nop
 8004124:	40010800 	.word	0x40010800

08004128 <MX_TIM2_Init>:
{
 8004128:	b510      	push	{r4, lr}
 800412a:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800412c:	2210      	movs	r2, #16
 800412e:	2100      	movs	r1, #0
 8004130:	a803      	add	r0, sp, #12
 8004132:	f002 f864 	bl	80061fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004136:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004138:	221c      	movs	r2, #28
 800413a:	4621      	mov	r1, r4
 800413c:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004140:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004144:	f002 f85b 	bl	80061fe <memset>
  htim2.Init.Prescaler = 71;
 8004148:	2347      	movs	r3, #71	; 0x47
 800414a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 800414e:	481d      	ldr	r0, [pc, #116]	; (80041c4 <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 71;
 8004150:	e9c0 1300 	strd	r1, r3, [r0]
  htim2.Init.Period = 99;
 8004154:	2363      	movs	r3, #99	; 0x63
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004156:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800415a:	2380      	movs	r3, #128	; 0x80
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415c:	6084      	str	r4, [r0, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800415e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004160:	f001 fcbe 	bl	8005ae0 <HAL_TIM_Base_Init>
 8004164:	b108      	cbz	r0, 800416a <MX_TIM2_Init+0x42>
    Error_Handler();
 8004166:	f7ff fe3d 	bl	8003de4 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800416a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800416e:	a903      	add	r1, sp, #12
 8004170:	4814      	ldr	r0, [pc, #80]	; (80041c4 <MX_TIM2_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004172:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004174:	f001 fd9f 	bl	8005cb6 <HAL_TIM_ConfigClockSource>
 8004178:	b108      	cbz	r0, 800417e <MX_TIM2_Init+0x56>
    Error_Handler();
 800417a:	f7ff fe33 	bl	8003de4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800417e:	4811      	ldr	r0, [pc, #68]	; (80041c4 <MX_TIM2_Init+0x9c>)
 8004180:	f001 fcda 	bl	8005b38 <HAL_TIM_PWM_Init>
 8004184:	b108      	cbz	r0, 800418a <MX_TIM2_Init+0x62>
    Error_Handler();
 8004186:	f7ff fe2d 	bl	8003de4 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800418a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800418c:	a901      	add	r1, sp, #4
 800418e:	480d      	ldr	r0, [pc, #52]	; (80041c4 <MX_TIM2_Init+0x9c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004190:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004194:	f001 fe82 	bl	8005e9c <HAL_TIMEx_MasterConfigSynchronization>
 8004198:	b108      	cbz	r0, 800419e <MX_TIM2_Init+0x76>
    Error_Handler();
 800419a:	f7ff fe23 	bl	8003de4 <Error_Handler>
  sConfigOC.Pulse = 10;
 800419e:	2260      	movs	r2, #96	; 0x60
 80041a0:	230a      	movs	r3, #10
 80041a2:	e9cd 2307 	strd	r2, r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041a6:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041a8:	a907      	add	r1, sp, #28
 80041aa:	4806      	ldr	r0, [pc, #24]	; (80041c4 <MX_TIM2_Init+0x9c>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ac:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ae:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041b0:	f001 fd1a 	bl	8005be8 <HAL_TIM_PWM_ConfigChannel>
 80041b4:	b108      	cbz	r0, 80041ba <MX_TIM2_Init+0x92>
    Error_Handler();
 80041b6:	f7ff fe15 	bl	8003de4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 80041ba:	4802      	ldr	r0, [pc, #8]	; (80041c4 <MX_TIM2_Init+0x9c>)
 80041bc:	f7ff ff8e 	bl	80040dc <HAL_TIM_MspPostInit>
}
 80041c0:	b00e      	add	sp, #56	; 0x38
 80041c2:	bd10      	pop	{r4, pc}
 80041c4:	20001038 	.word	0x20001038

080041c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80041c8:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80041ca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80041ce:	480a      	ldr	r0, [pc, #40]	; (80041f8 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <MX_USART1_UART_Init+0x34>)
 80041d2:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041d6:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041d8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041da:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041de:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041e0:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041e6:	f001 feef 	bl	8005fc8 <HAL_UART_Init>
 80041ea:	b118      	cbz	r0, 80041f4 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80041ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80041f0:	f7ff bdf8 	b.w	8003de4 <Error_Handler>
}
 80041f4:	bd08      	pop	{r3, pc}
 80041f6:	bf00      	nop
 80041f8:	20001080 	.word	0x20001080
 80041fc:	40013800 	.word	0x40013800

08004200 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004200:	b510      	push	{r4, lr}
 8004202:	4604      	mov	r4, r0
 8004204:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004206:	2210      	movs	r2, #16
 8004208:	2100      	movs	r1, #0
 800420a:	a802      	add	r0, sp, #8
 800420c:	f001 fff7 	bl	80061fe <memset>
  if(uartHandle->Instance==USART1)
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	4b17      	ldr	r3, [pc, #92]	; (8004270 <HAL_UART_MspInit+0x70>)
 8004214:	429a      	cmp	r2, r3
 8004216:	d128      	bne.n	800426a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004218:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800421c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TXD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TXD_GPIO_Port, &GPIO_InitStruct);
 800421e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8004220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004224:	619a      	str	r2, [r3, #24]
 8004226:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(TXD_GPIO_Port, &GPIO_InitStruct);
 8004228:	4812      	ldr	r0, [pc, #72]	; (8004274 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800422a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800422e:	9200      	str	r2, [sp, #0]
 8004230:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004232:	699a      	ldr	r2, [r3, #24]
 8004234:	f042 0204 	orr.w	r2, r2, #4
 8004238:	619a      	str	r2, [r3, #24]
 800423a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423c:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004248:	2302      	movs	r3, #2
 800424a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800424e:	2303      	movs	r3, #3
 8004250:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TXD_GPIO_Port, &GPIO_InitStruct);
 8004252:	f000 f999 	bl	8004588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RXD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800425a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RXD_GPIO_Port, &GPIO_InitStruct);
 800425c:	4805      	ldr	r0, [pc, #20]	; (8004274 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800425e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(RXD_GPIO_Port, &GPIO_InitStruct);
 8004262:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004264:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(RXD_GPIO_Port, &GPIO_InitStruct);
 8004266:	f000 f98f 	bl	8004588 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800426a:	b006      	add	sp, #24
 800426c:	bd10      	pop	{r4, pc}
 800426e:	bf00      	nop
 8004270:	40013800 	.word	0x40013800
 8004274:	40010800 	.word	0x40010800

08004278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004278:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800427a:	e003      	b.n	8004284 <LoopCopyDataInit>

0800427c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800427e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004280:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004282:	3104      	adds	r1, #4

08004284 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004284:	480a      	ldr	r0, [pc, #40]	; (80042b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004288:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800428a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800428c:	d3f6      	bcc.n	800427c <CopyDataInit>
  ldr r2, =_sbss
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004290:	e002      	b.n	8004298 <LoopFillZerobss>

08004292 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004292:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004294:	f842 3b04 	str.w	r3, [r2], #4

08004298 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800429a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800429c:	d3f9      	bcc.n	8004292 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800429e:	f7ff feb5 	bl	800400c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042a2:	f001 ff79 	bl	8006198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042a6:	f7ff fced 	bl	8003c84 <main>
  bx lr
 80042aa:	4770      	bx	lr
  ldr r3, =_sidata
 80042ac:	0800ec64 	.word	0x0800ec64
  ldr r0, =_sdata
 80042b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80042b4:	200009f4 	.word	0x200009f4
  ldr r2, =_sbss
 80042b8:	200009f4 	.word	0x200009f4
  ldr r3, = _ebss
 80042bc:	200010d4 	.word	0x200010d4

080042c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042c0:	e7fe      	b.n	80042c0 <ADC1_2_IRQHandler>
	...

080042c4 <PID_Init>:



void PID_Init()
{
	pid_pitch.ExpectedValue = 0.0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <PID_Init+0x2c>)
	pid_pitch.ActualValue = 0.0;
	pid_pitch.err = 0.0;
	pid_pitch.err_prev = 0.0;
	pid_pitch.err_last = 0.0;
	pid_pitch.Kp = 10;
 80042c8:	490a      	ldr	r1, [pc, #40]	; (80042f4 <PID_Init+0x30>)
	pid_pitch.ExpectedValue = 0.0;
 80042ca:	6013      	str	r3, [r2, #0]
	pid_pitch.ActualValue = 0.0;
 80042cc:	6053      	str	r3, [r2, #4]
	pid_pitch.err = 0.0;
 80042ce:	6093      	str	r3, [r2, #8]
	pid_pitch.err_prev = 0.0;
 80042d0:	6113      	str	r3, [r2, #16]
	pid_pitch.err_last = 0.0;
 80042d2:	60d3      	str	r3, [r2, #12]
	pid_pitch.Kp = 10;
 80042d4:	6151      	str	r1, [r2, #20]
	pid_pitch.Ki = 0.0;
 80042d6:	6193      	str	r3, [r2, #24]
	pid_pitch.Kd = 0;
 80042d8:	61d3      	str	r3, [r2, #28]

	pid_yaw.ExpectedValue = 0.0;
 80042da:	4a07      	ldr	r2, [pc, #28]	; (80042f8 <PID_Init+0x34>)
 80042dc:	6013      	str	r3, [r2, #0]
	pid_yaw.ActualValue = 0.0;
 80042de:	6053      	str	r3, [r2, #4]
	pid_yaw.err = 0.0;
 80042e0:	6093      	str	r3, [r2, #8]
	pid_yaw.err_prev = 0.0;
 80042e2:	6113      	str	r3, [r2, #16]
	pid_yaw.err_last = 0.0;
 80042e4:	60d3      	str	r3, [r2, #12]
	pid_yaw.Kp = 0.0;
 80042e6:	6153      	str	r3, [r2, #20]
	pid_yaw.Ki = 0.0;
 80042e8:	6193      	str	r3, [r2, #24]
	pid_yaw.Kd = 0.0;
 80042ea:	61d3      	str	r3, [r2, #28]


}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000f5c 	.word	0x20000f5c
 80042f4:	41200000 	.word	0x41200000
 80042f8:	20000f38 	.word	0x20000f38

080042fc <accel>:



float accel(float angle,struct _pid *pid)
{
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float delta_omega;

	pid->err = pid->ExpectedValue - angle;
 80042fe:	680e      	ldr	r6, [r1, #0]
{
 8004300:	460c      	mov	r4, r1
	pid->err = pid->ExpectedValue - angle;
 8004302:	4601      	mov	r1, r0
 8004304:	4630      	mov	r0, r6
 8004306:	f7fc fc13 	bl	8000b30 <__aeabi_fsub>

	delta_omega =
			pid->Kp * pid->err +
			pid->Kd*(pid->err - pid->err_prev);
 800430a:	6921      	ldr	r1, [r4, #16]
	pid->err = pid->ExpectedValue - angle;
 800430c:	60a0      	str	r0, [r4, #8]
 800430e:	4605      	mov	r5, r0
			pid->Kd*(pid->err - pid->err_prev);
 8004310:	f7fc fc0e 	bl	8000b30 <__aeabi_fsub>
 8004314:	69e1      	ldr	r1, [r4, #28]
 8004316:	f7fc fd15 	bl	8000d44 <__aeabi_fmul>
			pid->Kp * pid->err +
 800431a:	6961      	ldr	r1, [r4, #20]
			pid->Kd*(pid->err - pid->err_prev);
 800431c:	4607      	mov	r7, r0
			pid->Kp * pid->err +
 800431e:	4628      	mov	r0, r5
 8004320:	f7fc fd10 	bl	8000d44 <__aeabi_fmul>
	delta_omega =
 8004324:	4601      	mov	r1, r0
 8004326:	4638      	mov	r0, r7
 8004328:	f7fc fc04 	bl	8000b34 <__addsf3>

	pid->err_prev = pid->err_last;
 800432c:	68e1      	ldr	r1, [r4, #12]
	delta_omega =
 800432e:	4607      	mov	r7, r0
	pid->err_prev = pid->err_last;
 8004330:	6121      	str	r1, [r4, #16]
	pid->err_last = pid->err;
 8004332:	60e5      	str	r5, [r4, #12]
	pid->ExpectedValue = pid->ExpectedValue - pid->Ki * ( + pid->err_prev + pid->err_last);
 8004334:	4628      	mov	r0, r5
 8004336:	f7fc fbfd 	bl	8000b34 <__addsf3>
 800433a:	69a1      	ldr	r1, [r4, #24]
 800433c:	f7fc fd02 	bl	8000d44 <__aeabi_fmul>
 8004340:	4601      	mov	r1, r0
 8004342:	4630      	mov	r0, r6
 8004344:	f7fc fbf4 	bl	8000b30 <__aeabi_fsub>
 8004348:	6020      	str	r0, [r4, #0]

	return delta_omega;
}
 800434a:	4638      	mov	r0, r7
 800434c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004350 <setFrenquency>:

void setFrenquency(float acc)
{
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//频率500hz-64khz pulse/rev=800 即 0.625r/s ---- 80r/s 3.9269909rad/s ---502.6548384rad/s

	extern float velocity;
	velocity += acc * 0.005;//200hz
 8004352:	4c25      	ldr	r4, [pc, #148]	; (80043e8 <setFrenquency+0x98>)
{
 8004354:	4605      	mov	r5, r0
	velocity += acc * 0.005;//200hz
 8004356:	6820      	ldr	r0, [r4, #0]
 8004358:	f7fc f866 	bl	8000428 <__aeabi_f2d>
 800435c:	4606      	mov	r6, r0
 800435e:	4628      	mov	r0, r5
 8004360:	460f      	mov	r7, r1
 8004362:	f7fc f861 	bl	8000428 <__aeabi_f2d>
 8004366:	a31e      	add	r3, pc, #120	; (adr r3, 80043e0 <setFrenquency+0x90>)
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	f7fc f8b4 	bl	80004d8 <__aeabi_dmul>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4630      	mov	r0, r6
 8004376:	4639      	mov	r1, r7
 8004378:	f7fb fef8 	bl	800016c <__adddf3>
 800437c:	f7fc fb84 	bl	8000a88 <__aeabi_d2f>
	if(velocity<0){
 8004380:	2100      	movs	r1, #0
	velocity += acc * 0.005;//200hz
 8004382:	6020      	str	r0, [r4, #0]
	if(velocity<0){
 8004384:	f7fc fe7c 	bl	8001080 <__aeabi_fcmplt>
 8004388:	4d18      	ldr	r5, [pc, #96]	; (80043ec <setFrenquency+0x9c>)
 800438a:	b1a8      	cbz	r0, 80043b8 <setFrenquency+0x68>

		HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, RESET);
		if(velocity<-90)velocity=-90;
 800438c:	4e18      	ldr	r6, [pc, #96]	; (80043f0 <setFrenquency+0xa0>)
		HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, RESET);
 800438e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004392:	4818      	ldr	r0, [pc, #96]	; (80043f4 <setFrenquency+0xa4>)
 8004394:	2200      	movs	r2, #0
 8004396:	f000 f9d7 	bl	8004748 <HAL_GPIO_WritePin>
		if(velocity<-90)velocity=-90;
 800439a:	4631      	mov	r1, r6
 800439c:	6820      	ldr	r0, [r4, #0]
 800439e:	f7fc fe6f 	bl	8001080 <__aeabi_fcmplt>
 80043a2:	b100      	cbz	r0, 80043a6 <setFrenquency+0x56>
 80043a4:	6026      	str	r6, [r4, #0]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,10-velocity);
 80043a6:	6821      	ldr	r1, [r4, #0]
 80043a8:	4813      	ldr	r0, [pc, #76]	; (80043f8 <setFrenquency+0xa8>)
 80043aa:	682d      	ldr	r5, [r5, #0]
 80043ac:	f7fc fbc0 	bl	8000b30 <__aeabi_fsub>
	}
	else{

		HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, SET);
		if(velocity>90)velocity=90;
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,10+velocity);
 80043b0:	f7fc feb4 	bl	800111c <__aeabi_f2uiz>
 80043b4:	6368      	str	r0, [r5, #52]	; 0x34





}
 80043b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(velocity>90)velocity=90;
 80043b8:	4e10      	ldr	r6, [pc, #64]	; (80043fc <setFrenquency+0xac>)
		HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, SET);
 80043ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043be:	480d      	ldr	r0, [pc, #52]	; (80043f4 <setFrenquency+0xa4>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	f000 f9c1 	bl	8004748 <HAL_GPIO_WritePin>
		if(velocity>90)velocity=90;
 80043c6:	4631      	mov	r1, r6
 80043c8:	6820      	ldr	r0, [r4, #0]
 80043ca:	f7fc fe77 	bl	80010bc <__aeabi_fcmpgt>
 80043ce:	b100      	cbz	r0, 80043d2 <setFrenquency+0x82>
 80043d0:	6026      	str	r6, [r4, #0]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,10+velocity);
 80043d2:	4909      	ldr	r1, [pc, #36]	; (80043f8 <setFrenquency+0xa8>)
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	682d      	ldr	r5, [r5, #0]
 80043d8:	f7fc fbac 	bl	8000b34 <__addsf3>
 80043dc:	e7e8      	b.n	80043b0 <setFrenquency+0x60>
 80043de:	bf00      	nop
 80043e0:	47ae147b 	.word	0x47ae147b
 80043e4:	3f747ae1 	.word	0x3f747ae1
 80043e8:	20000a24 	.word	0x20000a24
 80043ec:	20001038 	.word	0x20001038
 80043f0:	c2b40000 	.word	0xc2b40000
 80043f4:	40010c00 	.word	0x40010c00
 80043f8:	41200000 	.word	0x41200000
 80043fc:	42b40000 	.word	0x42b40000

08004400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004400:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_InitTick+0x3c>)
{
 8004404:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004406:	7818      	ldrb	r0, [r3, #0]
 8004408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800440c:	fbb3 f3f0 	udiv	r3, r3, r0
 8004410:	4a0b      	ldr	r2, [pc, #44]	; (8004440 <HAL_InitTick+0x40>)
 8004412:	6810      	ldr	r0, [r2, #0]
 8004414:	fbb0 f0f3 	udiv	r0, r0, r3
 8004418:	f000 f8a0 	bl	800455c <HAL_SYSTICK_Config>
 800441c:	4604      	mov	r4, r0
 800441e:	b958      	cbnz	r0, 8004438 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004420:	2d0f      	cmp	r5, #15
 8004422:	d809      	bhi.n	8004438 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004424:	4602      	mov	r2, r0
 8004426:	4629      	mov	r1, r5
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	f000 f854 	bl	80044d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004430:	4620      	mov	r0, r4
 8004432:	4b04      	ldr	r3, [pc, #16]	; (8004444 <HAL_InitTick+0x44>)
 8004434:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004436:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004438:	2001      	movs	r0, #1
 800443a:	e7fc      	b.n	8004436 <HAL_InitTick+0x36>
 800443c:	2000003c 	.word	0x2000003c
 8004440:	20000038 	.word	0x20000038
 8004444:	20000040 	.word	0x20000040

08004448 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004448:	4a07      	ldr	r2, [pc, #28]	; (8004468 <HAL_Init+0x20>)
{
 800444a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800444c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800444e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004450:	f043 0310 	orr.w	r3, r3, #16
 8004454:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004456:	f000 f82d 	bl	80044b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800445a:	2000      	movs	r0, #0
 800445c:	f7ff ffd0 	bl	8004400 <HAL_InitTick>
  HAL_MspInit();
 8004460:	f7ff fd82 	bl	8003f68 <HAL_MspInit>
}
 8004464:	2000      	movs	r0, #0
 8004466:	bd08      	pop	{r3, pc}
 8004468:	40022000 	.word	0x40022000

0800446c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800446c:	4a03      	ldr	r2, [pc, #12]	; (800447c <HAL_IncTick+0x10>)
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <HAL_IncTick+0x14>)
 8004470:	6811      	ldr	r1, [r2, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	440b      	add	r3, r1
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	200010c0 	.word	0x200010c0
 8004480:	2000003c 	.word	0x2000003c

08004484 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004484:	4b01      	ldr	r3, [pc, #4]	; (800448c <HAL_GetTick+0x8>)
 8004486:	6818      	ldr	r0, [r3, #0]
}
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	200010c0 	.word	0x200010c0

08004490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004494:	f7ff fff6 	bl	8004484 <HAL_GetTick>
 8004498:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800449a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800449c:	bf1e      	ittt	ne
 800449e:	4b04      	ldrne	r3, [pc, #16]	; (80044b0 <HAL_Delay+0x20>)
 80044a0:	781b      	ldrbne	r3, [r3, #0]
 80044a2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044a4:	f7ff ffee 	bl	8004484 <HAL_GetTick>
 80044a8:	1b40      	subs	r0, r0, r5
 80044aa:	42a0      	cmp	r0, r4
 80044ac:	d3fa      	bcc.n	80044a4 <HAL_Delay+0x14>
  {
  }
}
 80044ae:	bd38      	pop	{r3, r4, r5, pc}
 80044b0:	2000003c 	.word	0x2000003c

080044b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b4:	4a07      	ldr	r2, [pc, #28]	; (80044d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044b6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044c2:	041b      	lsls	r3, r3, #16
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80044ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80044d0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80044d2:	4770      	bx	lr
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d8:	4b17      	ldr	r3, [pc, #92]	; (8004538 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044da:	b570      	push	{r4, r5, r6, lr}
 80044dc:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044de:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e6:	f1c4 0507 	rsb	r5, r4, #7
 80044ea:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ec:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044f0:	bf28      	it	cs
 80044f2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044f4:	2b06      	cmp	r3, #6
 80044f6:	bf98      	it	ls
 80044f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044fa:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044fe:	bf88      	it	hi
 8004500:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004502:	ea21 0303 	bic.w	r3, r1, r3
 8004506:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004508:	fa06 f404 	lsl.w	r4, r6, r4
 800450c:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8004510:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004512:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004516:	bfa8      	it	ge
 8004518:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800451c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004520:	bfb8      	it	lt
 8004522:	4a06      	ldrlt	r2, [pc, #24]	; (800453c <HAL_NVIC_SetPriority+0x64>)
 8004524:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004526:	bfab      	itete	ge
 8004528:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004530:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004534:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004536:	bd70      	pop	{r4, r5, r6, pc}
 8004538:	e000ed00 	.word	0xe000ed00
 800453c:	e000ed14 	.word	0xe000ed14

08004540 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004540:	2800      	cmp	r0, #0
 8004542:	db08      	blt.n	8004556 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004544:	2301      	movs	r3, #1
 8004546:	0942      	lsrs	r2, r0, #5
 8004548:	f000 001f 	and.w	r0, r0, #31
 800454c:	fa03 f000 	lsl.w	r0, r3, r0
 8004550:	4b01      	ldr	r3, [pc, #4]	; (8004558 <HAL_NVIC_EnableIRQ+0x18>)
 8004552:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004556:	4770      	bx	lr
 8004558:	e000e100 	.word	0xe000e100

0800455c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800455c:	3801      	subs	r0, #1
 800455e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004562:	d20a      	bcs.n	800457a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004564:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004568:	4a06      	ldr	r2, [pc, #24]	; (8004584 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800456a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004570:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004572:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004574:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800457a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	e000e010 	.word	0xe000e010
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800458c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800458e:	4626      	mov	r6, r4
 8004590:	4b65      	ldr	r3, [pc, #404]	; (8004728 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004592:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8004738 <HAL_GPIO_Init+0x1b0>
 8004596:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800473c <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800459a:	680a      	ldr	r2, [r1, #0]
 800459c:	fa32 f506 	lsrs.w	r5, r2, r6
 80045a0:	d102      	bne.n	80045a8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80045a2:	b003      	add	sp, #12
 80045a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80045a8:	f04f 0801 	mov.w	r8, #1
 80045ac:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045b0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80045b4:	4590      	cmp	r8, r2
 80045b6:	d17e      	bne.n	80046b6 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 80045b8:	684d      	ldr	r5, [r1, #4]
 80045ba:	2d12      	cmp	r5, #18
 80045bc:	f000 80a9 	beq.w	8004712 <HAL_GPIO_Init+0x18a>
 80045c0:	f200 8082 	bhi.w	80046c8 <HAL_GPIO_Init+0x140>
 80045c4:	2d02      	cmp	r5, #2
 80045c6:	f000 80a1 	beq.w	800470c <HAL_GPIO_Init+0x184>
 80045ca:	d876      	bhi.n	80046ba <HAL_GPIO_Init+0x132>
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	f000 8088 	beq.w	80046e2 <HAL_GPIO_Init+0x15a>
 80045d2:	2d01      	cmp	r5, #1
 80045d4:	f000 8098 	beq.w	8004708 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045d8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045dc:	2aff      	cmp	r2, #255	; 0xff
 80045de:	bf93      	iteet	ls
 80045e0:	4682      	movls	sl, r0
 80045e2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80045e6:	3d08      	subhi	r5, #8
 80045e8:	f8d0 b000 	ldrls.w	fp, [r0]
 80045ec:	bf92      	itee	ls
 80045ee:	00b5      	lslls	r5, r6, #2
 80045f0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80045f4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045f6:	fa09 f805 	lsl.w	r8, r9, r5
 80045fa:	ea2b 0808 	bic.w	r8, fp, r8
 80045fe:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004602:	bf88      	it	hi
 8004604:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004608:	ea48 0505 	orr.w	r5, r8, r5
 800460c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004610:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8004614:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8004618:	d04d      	beq.n	80046b6 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800461a:	4f44      	ldr	r7, [pc, #272]	; (800472c <HAL_GPIO_Init+0x1a4>)
 800461c:	f026 0803 	bic.w	r8, r6, #3
 8004620:	69bd      	ldr	r5, [r7, #24]
 8004622:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8004626:	f045 0501 	orr.w	r5, r5, #1
 800462a:	61bd      	str	r5, [r7, #24]
 800462c:	69bd      	ldr	r5, [r7, #24]
 800462e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8004632:	f005 0501 	and.w	r5, r5, #1
 8004636:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004638:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800463c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800463e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004642:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004646:	fa09 f90b 	lsl.w	r9, r9, fp
 800464a:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800464e:	4d38      	ldr	r5, [pc, #224]	; (8004730 <HAL_GPIO_Init+0x1a8>)
 8004650:	42a8      	cmp	r0, r5
 8004652:	d063      	beq.n	800471c <HAL_GPIO_Init+0x194>
 8004654:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004658:	42a8      	cmp	r0, r5
 800465a:	d061      	beq.n	8004720 <HAL_GPIO_Init+0x198>
 800465c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004660:	42a8      	cmp	r0, r5
 8004662:	d05f      	beq.n	8004724 <HAL_GPIO_Init+0x19c>
 8004664:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004668:	42a8      	cmp	r0, r5
 800466a:	bf0c      	ite	eq
 800466c:	2503      	moveq	r5, #3
 800466e:	2504      	movne	r5, #4
 8004670:	fa05 f50b 	lsl.w	r5, r5, fp
 8004674:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8004678:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800467c:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800467e:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004682:	bf14      	ite	ne
 8004684:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004686:	4395      	biceq	r5, r2
 8004688:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800468a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800468c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8004690:	bf14      	ite	ne
 8004692:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004694:	4395      	biceq	r5, r2
 8004696:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8004698:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800469a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800469e:	bf14      	ite	ne
 80046a0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046a2:	4395      	biceq	r5, r2
 80046a4:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80046a6:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046a8:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80046ac:	bf14      	ite	ne
 80046ae:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046b0:	ea25 0202 	biceq.w	r2, r5, r2
 80046b4:	60da      	str	r2, [r3, #12]
	position++;
 80046b6:	3601      	adds	r6, #1
 80046b8:	e76f      	b.n	800459a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80046ba:	2d03      	cmp	r5, #3
 80046bc:	d022      	beq.n	8004704 <HAL_GPIO_Init+0x17c>
 80046be:	2d11      	cmp	r5, #17
 80046c0:	d18a      	bne.n	80045d8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046c2:	68cc      	ldr	r4, [r1, #12]
 80046c4:	3404      	adds	r4, #4
          break;
 80046c6:	e787      	b.n	80045d8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80046c8:	4f1a      	ldr	r7, [pc, #104]	; (8004734 <HAL_GPIO_Init+0x1ac>)
 80046ca:	42bd      	cmp	r5, r7
 80046cc:	d009      	beq.n	80046e2 <HAL_GPIO_Init+0x15a>
 80046ce:	d812      	bhi.n	80046f6 <HAL_GPIO_Init+0x16e>
 80046d0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8004740 <HAL_GPIO_Init+0x1b8>
 80046d4:	454d      	cmp	r5, r9
 80046d6:	d004      	beq.n	80046e2 <HAL_GPIO_Init+0x15a>
 80046d8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80046dc:	454d      	cmp	r5, r9
 80046de:	f47f af7b 	bne.w	80045d8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046e2:	688c      	ldr	r4, [r1, #8]
 80046e4:	b1c4      	cbz	r4, 8004718 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046e6:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80046e8:	bf0c      	ite	eq
 80046ea:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80046ee:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046f2:	2408      	movs	r4, #8
 80046f4:	e770      	b.n	80045d8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80046f6:	4565      	cmp	r5, ip
 80046f8:	d0f3      	beq.n	80046e2 <HAL_GPIO_Init+0x15a>
 80046fa:	4575      	cmp	r5, lr
 80046fc:	d0f1      	beq.n	80046e2 <HAL_GPIO_Init+0x15a>
 80046fe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004744 <HAL_GPIO_Init+0x1bc>
 8004702:	e7eb      	b.n	80046dc <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004704:	2400      	movs	r4, #0
 8004706:	e767      	b.n	80045d8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004708:	68cc      	ldr	r4, [r1, #12]
          break;
 800470a:	e765      	b.n	80045d8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800470c:	68cc      	ldr	r4, [r1, #12]
 800470e:	3408      	adds	r4, #8
          break;
 8004710:	e762      	b.n	80045d8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004712:	68cc      	ldr	r4, [r1, #12]
 8004714:	340c      	adds	r4, #12
          break;
 8004716:	e75f      	b.n	80045d8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004718:	2404      	movs	r4, #4
 800471a:	e75d      	b.n	80045d8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800471c:	2500      	movs	r5, #0
 800471e:	e7a7      	b.n	8004670 <HAL_GPIO_Init+0xe8>
 8004720:	2501      	movs	r5, #1
 8004722:	e7a5      	b.n	8004670 <HAL_GPIO_Init+0xe8>
 8004724:	2502      	movs	r5, #2
 8004726:	e7a3      	b.n	8004670 <HAL_GPIO_Init+0xe8>
 8004728:	40010400 	.word	0x40010400
 800472c:	40021000 	.word	0x40021000
 8004730:	40010800 	.word	0x40010800
 8004734:	10210000 	.word	0x10210000
 8004738:	10310000 	.word	0x10310000
 800473c:	10320000 	.word	0x10320000
 8004740:	10110000 	.word	0x10110000
 8004744:	10220000 	.word	0x10220000

08004748 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004748:	b10a      	cbz	r2, 800474e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800474a:	6101      	str	r1, [r0, #16]
  }
}
 800474c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800474e:	0409      	lsls	r1, r1, #16
 8004750:	e7fb      	b.n	800474a <HAL_GPIO_WritePin+0x2>

08004752 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004752:	6801      	ldr	r1, [r0, #0]
 8004754:	2200      	movs	r2, #0
 8004756:	694b      	ldr	r3, [r1, #20]
 8004758:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800475c:	d010      	beq.n	8004780 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800475e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8004762:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004764:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004766:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004768:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004770:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004772:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004776:	f043 0304 	orr.w	r3, r3, #4
 800477a:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800477c:	2001      	movs	r0, #1
 800477e:	4770      	bx	lr
  }
  return HAL_OK;
 8004780:	4618      	mov	r0, r3
}
 8004782:	4770      	bx	lr

08004784 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004788:	4604      	mov	r4, r0
 800478a:	4616      	mov	r6, r2
 800478c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800478e:	b28f      	uxth	r7, r1
 8004790:	6825      	ldr	r5, [r4, #0]
 8004792:	6968      	ldr	r0, [r5, #20]
 8004794:	ea37 0000 	bics.w	r0, r7, r0
 8004798:	d017      	beq.n	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800479a:	696b      	ldr	r3, [r5, #20]
 800479c:	055a      	lsls	r2, r3, #21
 800479e:	d516      	bpl.n	80047ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a0:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80047a2:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047a8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047aa:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80047ae:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b0:	2300      	movs	r3, #0
 80047b2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047be:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 80047c2:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80047c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80047ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80047ce:	1c73      	adds	r3, r6, #1
 80047d0:	d0df      	beq.n	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d2:	f7ff fe57 	bl	8004484 <HAL_GetTick>
 80047d6:	eba0 0008 	sub.w	r0, r0, r8
 80047da:	42b0      	cmp	r0, r6
 80047dc:	d801      	bhi.n	80047e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 80047de:	2e00      	cmp	r6, #0
 80047e0:	d1d6      	bne.n	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e2:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80047e4:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047f2:	f042 0220 	orr.w	r2, r2, #32
 80047f6:	e7e4      	b.n	80047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

080047f8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	4604      	mov	r4, r0
 80047fc:	460d      	mov	r5, r1
 80047fe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	075b      	lsls	r3, r3, #29
 8004806:	d501      	bpl.n	800480c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8004808:	2000      	movs	r0, #0
}
 800480a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800480c:	4620      	mov	r0, r4
 800480e:	f7ff ffa0 	bl	8004752 <I2C_IsAcknowledgeFailed>
 8004812:	b9a8      	cbnz	r0, 8004840 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8004814:	1c6a      	adds	r2, r5, #1
 8004816:	d0f3      	beq.n	8004800 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004818:	f7ff fe34 	bl	8004484 <HAL_GetTick>
 800481c:	1b80      	subs	r0, r0, r6
 800481e:	42a8      	cmp	r0, r5
 8004820:	d801      	bhi.n	8004826 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004822:	2d00      	cmp	r5, #0
 8004824:	d1ec      	bne.n	8004800 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004826:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004828:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800482a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800482c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004830:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004834:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004836:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800483a:	f042 0220 	orr.w	r2, r2, #32
 800483e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004840:	2001      	movs	r0, #1
 8004842:	e7e2      	b.n	800480a <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08004844 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	4604      	mov	r4, r0
 8004848:	460d      	mov	r5, r1
 800484a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	6943      	ldr	r3, [r0, #20]
 8004850:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004854:	d001      	beq.n	800485a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8004856:	2000      	movs	r0, #0
 8004858:	e010      	b.n	800487c <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800485a:	6942      	ldr	r2, [r0, #20]
 800485c:	06d2      	lsls	r2, r2, #27
 800485e:	d50e      	bpl.n	800487e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004860:	f06f 0210 	mvn.w	r2, #16
 8004864:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004866:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004868:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800486a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800486e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004872:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004874:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004876:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004878:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800487c:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487e:	f7ff fe01 	bl	8004484 <HAL_GetTick>
 8004882:	1b80      	subs	r0, r0, r6
 8004884:	42a8      	cmp	r0, r5
 8004886:	d801      	bhi.n	800488c <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8004888:	2d00      	cmp	r5, #0
 800488a:	d1df      	bne.n	800484c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800488c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800488e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004890:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004892:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004896:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800489a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800489c:	f042 0220 	orr.w	r2, r2, #32
 80048a0:	e7e8      	b.n	8004874 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080048a2 <I2C_WaitOnFlagUntilTimeout>:
{
 80048a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048a6:	4604      	mov	r4, r0
 80048a8:	4690      	mov	r8, r2
 80048aa:	461f      	mov	r7, r3
 80048ac:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ae:	ea4f 4911 	mov.w	r9, r1, lsr #16
 80048b2:	b28d      	uxth	r5, r1
 80048b4:	6821      	ldr	r1, [r4, #0]
 80048b6:	f1b9 0f01 	cmp.w	r9, #1
 80048ba:	bf0c      	ite	eq
 80048bc:	694b      	ldreq	r3, [r1, #20]
 80048be:	698b      	ldrne	r3, [r1, #24]
 80048c0:	ea35 0303 	bics.w	r3, r5, r3
 80048c4:	bf0c      	ite	eq
 80048c6:	2301      	moveq	r3, #1
 80048c8:	2300      	movne	r3, #0
 80048ca:	4598      	cmp	r8, r3
 80048cc:	d001      	beq.n	80048d2 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80048ce:	2000      	movs	r0, #0
 80048d0:	e016      	b.n	8004900 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80048d2:	1c7b      	adds	r3, r7, #1
 80048d4:	d0ef      	beq.n	80048b6 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d6:	f7ff fdd5 	bl	8004484 <HAL_GetTick>
 80048da:	1b80      	subs	r0, r0, r6
 80048dc:	42b8      	cmp	r0, r7
 80048de:	d801      	bhi.n	80048e4 <I2C_WaitOnFlagUntilTimeout+0x42>
 80048e0:	2f00      	cmp	r7, #0
 80048e2:	d1e7      	bne.n	80048b4 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048e4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80048e6:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 80048e8:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048ea:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80048f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048fa:	f042 0220 	orr.w	r2, r2, #32
 80048fe:	6422      	str	r2, [r4, #64]	; 0x40
}
 8004900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004904 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	4604      	mov	r4, r0
 8004908:	460d      	mov	r5, r1
 800490a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	061b      	lsls	r3, r3, #24
 8004912:	d501      	bpl.n	8004918 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004914:	2000      	movs	r0, #0
}
 8004916:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004918:	4620      	mov	r0, r4
 800491a:	f7ff ff1a 	bl	8004752 <I2C_IsAcknowledgeFailed>
 800491e:	b9a8      	cbnz	r0, 800494c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8004920:	1c6a      	adds	r2, r5, #1
 8004922:	d0f3      	beq.n	800490c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004924:	f7ff fdae 	bl	8004484 <HAL_GetTick>
 8004928:	1b80      	subs	r0, r0, r6
 800492a:	42a8      	cmp	r0, r5
 800492c:	d801      	bhi.n	8004932 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800492e:	2d00      	cmp	r5, #0
 8004930:	d1ec      	bne.n	800490c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004932:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004934:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004936:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004938:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800493c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004942:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004946:	f042 0220 	orr.w	r2, r2, #32
 800494a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800494c:	2001      	movs	r0, #1
 800494e:	e7e2      	b.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08004950 <I2C_RequestMemoryWrite>:
{
 8004950:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004954:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004956:	6802      	ldr	r2, [r0, #0]
{
 8004958:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800495a:	6813      	ldr	r3, [r2, #0]
{
 800495c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800495e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004962:	6013      	str	r3, [r2, #0]
{
 8004964:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004968:	9600      	str	r6, [sp, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8004970:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004972:	f7ff ff96 	bl	80048a2 <I2C_WaitOnFlagUntilTimeout>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	b138      	cbz	r0, 800498a <I2C_RequestMemoryWrite+0x3a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	05db      	lsls	r3, r3, #23
 800497e:	d502      	bpl.n	8004986 <I2C_RequestMemoryWrite+0x36>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004984:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004986:	2003      	movs	r0, #3
 8004988:	e00a      	b.n	80049a0 <I2C_RequestMemoryWrite+0x50>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800498a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800498e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004992:	4633      	mov	r3, r6
 8004994:	4918      	ldr	r1, [pc, #96]	; (80049f8 <I2C_RequestMemoryWrite+0xa8>)
 8004996:	4620      	mov	r0, r4
 8004998:	f7ff fef4 	bl	8004784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800499c:	b118      	cbz	r0, 80049a6 <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 800499e:	2001      	movs	r0, #1
}
 80049a0:	b004      	add	sp, #16
 80049a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	9003      	str	r0, [sp, #12]
 80049aa:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ac:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ae:	9203      	str	r2, [sp, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b2:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b4:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b6:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b8:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ba:	f7ff ffa3 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 80049be:	b140      	cbz	r0, 80049d2 <I2C_RequestMemoryWrite+0x82>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049c2:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c4:	bf01      	itttt	eq
 80049c6:	6822      	ldreq	r2, [r4, #0]
 80049c8:	6813      	ldreq	r3, [r2, #0]
 80049ca:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80049ce:	6013      	streq	r3, [r2, #0]
 80049d0:	e7e5      	b.n	800499e <I2C_RequestMemoryWrite+0x4e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049d2:	f1b8 0f01 	cmp.w	r8, #1
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	d102      	bne.n	80049e0 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049da:	b2ed      	uxtb	r5, r5
 80049dc:	611d      	str	r5, [r3, #16]
 80049de:	e7df      	b.n	80049a0 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049e0:	0a2a      	lsrs	r2, r5, #8
 80049e2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80049e6:	4632      	mov	r2, r6
 80049e8:	4620      	mov	r0, r4
 80049ea:	f7ff ff8b 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d1e6      	bne.n	80049c0 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	e7f1      	b.n	80049da <I2C_RequestMemoryWrite+0x8a>
 80049f6:	bf00      	nop
 80049f8:	00010002 	.word	0x00010002

080049fc <I2C_RequestMemoryRead>:
{
 80049fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004a00:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a02:	6803      	ldr	r3, [r0, #0]
{
 8004a04:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a06:	681a      	ldr	r2, [r3, #0]
{
 8004a08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a0e:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a10:	681a      	ldr	r2, [r3, #0]
{
 8004a12:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a18:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a20:	9500      	str	r5, [sp, #0]
 8004a22:	2200      	movs	r2, #0
{
 8004a24:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a26:	f7ff ff3c 	bl	80048a2 <I2C_WaitOnFlagUntilTimeout>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	b148      	cbz	r0, 8004a42 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	05db      	lsls	r3, r3, #23
 8004a32:	d502      	bpl.n	8004a3a <I2C_RequestMemoryRead+0x3e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a38:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004a3a:	2003      	movs	r0, #3
}
 8004a3c:	b004      	add	sp, #16
 8004a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a42:	b2ff      	uxtb	r7, r7
 8004a44:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8004a48:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a4a:	492a      	ldr	r1, [pc, #168]	; (8004af4 <I2C_RequestMemoryRead+0xf8>)
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7ff fe97 	bl	8004784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a56:	b108      	cbz	r0, 8004a5c <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 8004a58:	2001      	movs	r0, #1
 8004a5a:	e7ef      	b.n	8004a3c <I2C_RequestMemoryRead+0x40>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	9003      	str	r0, [sp, #12]
 8004a60:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a62:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a64:	9203      	str	r2, [sp, #12]
 8004a66:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a68:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6a:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a70:	f7ff ff48 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a74:	b140      	cbz	r0, 8004a88 <I2C_RequestMemoryRead+0x8c>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a78:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7a:	bf01      	itttt	eq
 8004a7c:	6822      	ldreq	r2, [r4, #0]
 8004a7e:	6813      	ldreq	r3, [r2, #0]
 8004a80:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8004a84:	6013      	streq	r3, [r2, #0]
 8004a86:	e7e7      	b.n	8004a58 <I2C_RequestMemoryRead+0x5c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a88:	f1b8 0f01 	cmp.w	r8, #1
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	d125      	bne.n	8004adc <I2C_RequestMemoryRead+0xe0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a90:	b2f6      	uxtb	r6, r6
 8004a92:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a94:	462a      	mov	r2, r5
 8004a96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7ff ff33 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d1e8      	bne.n	8004a76 <I2C_RequestMemoryRead+0x7a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa4:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa6:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa8:	680b      	ldr	r3, [r1, #0]
 8004aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aae:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab2:	9500      	str	r5, [sp, #0]
 8004ab4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ab8:	f7ff fef3 	bl	80048a2 <I2C_WaitOnFlagUntilTimeout>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d1b5      	bne.n	8004a2e <I2C_RequestMemoryRead+0x32>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ac2:	f047 0701 	orr.w	r7, r7, #1
 8004ac6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aca:	462b      	mov	r3, r5
 8004acc:	4909      	ldr	r1, [pc, #36]	; (8004af4 <I2C_RequestMemoryRead+0xf8>)
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f7ff fe58 	bl	8004784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8004ad4:	3000      	adds	r0, #0
 8004ad6:	bf18      	it	ne
 8004ad8:	2001      	movne	r0, #1
 8004ada:	e7af      	b.n	8004a3c <I2C_RequestMemoryRead+0x40>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004adc:	0a32      	lsrs	r2, r6, #8
 8004ade:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ae2:	462a      	mov	r2, r5
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f7ff ff0d 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d1c3      	bne.n	8004a76 <I2C_RequestMemoryRead+0x7a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	e7ce      	b.n	8004a90 <I2C_RequestMemoryRead+0x94>
 8004af2:	bf00      	nop
 8004af4:	00010002 	.word	0x00010002

08004af8 <HAL_I2C_Init>:
{
 8004af8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8004afa:	4604      	mov	r4, r0
 8004afc:	b908      	cbnz	r0, 8004b02 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8004afe:	2001      	movs	r0, #1
}
 8004b00:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b0a:	b91b      	cbnz	r3, 8004b14 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8004b0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004b10:	f7fe ff9c 	bl	8003a4c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b14:	2324      	movs	r3, #36	; 0x24
 8004b16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	f022 0201 	bic.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b32:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b34:	f000 fcce 	bl	80054d4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b38:	6863      	ldr	r3, [r4, #4]
 8004b3a:	4a41      	ldr	r2, [pc, #260]	; (8004c40 <HAL_I2C_Init+0x148>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d84d      	bhi.n	8004bdc <HAL_I2C_Init+0xe4>
 8004b40:	4a40      	ldr	r2, [pc, #256]	; (8004c44 <HAL_I2C_Init+0x14c>)
 8004b42:	4290      	cmp	r0, r2
 8004b44:	d9db      	bls.n	8004afe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8004b46:	4940      	ldr	r1, [pc, #256]	; (8004c48 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b48:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004b4a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b4e:	6855      	ldr	r5, [r2, #4]
 8004b50:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004b54:	430d      	orrs	r5, r1
 8004b56:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b58:	6a15      	ldr	r5, [r2, #32]
 8004b5a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004b5e:	3101      	adds	r1, #1
 8004b60:	4329      	orrs	r1, r5
 8004b62:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b64:	69d1      	ldr	r1, [r2, #28]
 8004b66:	4d36      	ldr	r5, [pc, #216]	; (8004c40 <HAL_I2C_Init+0x148>)
 8004b68:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004b6c:	42ab      	cmp	r3, r5
 8004b6e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004b72:	f100 30ff 	add.w	r0, r0, #4294967295
 8004b76:	d848      	bhi.n	8004c0a <HAL_I2C_Init+0x112>
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	bf38      	it	cc
 8004b88:	2304      	movcc	r3, #4
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b8e:	6811      	ldr	r1, [r2, #0]
 8004b90:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8004b94:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004b98:	4303      	orrs	r3, r0
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b9e:	6891      	ldr	r1, [r2, #8]
 8004ba0:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8004ba4:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004ba8:	4303      	orrs	r3, r0
 8004baa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bb2:	68d1      	ldr	r1, [r2, #12]
 8004bb4:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8004bb8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004bbc:	4303      	orrs	r3, r0
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004bc2:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc4:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004bcc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bce:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bd4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8004bda:	e791      	b.n	8004b00 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bdc:	4a1b      	ldr	r2, [pc, #108]	; (8004c4c <HAL_I2C_Init+0x154>)
 8004bde:	4290      	cmp	r0, r2
 8004be0:	d98d      	bls.n	8004afe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8004be2:	4e19      	ldr	r6, [pc, #100]	; (8004c48 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004be4:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8004be8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bec:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bee:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bf0:	6855      	ldr	r5, [r2, #4]
 8004bf2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004bf6:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bf8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bfc:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bfe:	6a15      	ldr	r5, [r2, #32]
 8004c00:	fbb1 f1f6 	udiv	r1, r1, r6
 8004c04:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004c08:	e7a9      	b.n	8004b5e <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c0a:	68a5      	ldr	r5, [r4, #8]
 8004c0c:	b955      	cbnz	r5, 8004c24 <HAL_I2C_Init+0x12c>
 8004c0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004c12:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c16:	1c43      	adds	r3, r0, #1
 8004c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c1c:	b16b      	cbz	r3, 8004c3a <HAL_I2C_Init+0x142>
 8004c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c22:	e7b2      	b.n	8004b8a <HAL_I2C_Init+0x92>
 8004c24:	2519      	movs	r5, #25
 8004c26:	436b      	muls	r3, r5
 8004c28:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c32:	b113      	cbz	r3, 8004c3a <HAL_I2C_Init+0x142>
 8004c34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c38:	e7a7      	b.n	8004b8a <HAL_I2C_Init+0x92>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e7a5      	b.n	8004b8a <HAL_I2C_Init+0x92>
 8004c3e:	bf00      	nop
 8004c40:	000186a0 	.word	0x000186a0
 8004c44:	001e847f 	.word	0x001e847f
 8004c48:	000f4240 	.word	0x000f4240
 8004c4c:	003d08ff 	.word	0x003d08ff

08004c50 <HAL_I2C_Mem_Write>:
{
 8004c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c54:	4604      	mov	r4, r0
 8004c56:	4699      	mov	r9, r3
 8004c58:	460f      	mov	r7, r1
 8004c5a:	4690      	mov	r8, r2
 8004c5c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004c5e:	f7ff fc11 	bl	8004484 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c62:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8004c66:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d003      	beq.n	8004c74 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8004c6c:	2002      	movs	r0, #2
}
 8004c6e:	b003      	add	sp, #12
 8004c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c74:	9000      	str	r0, [sp, #0]
 8004c76:	2319      	movs	r3, #25
 8004c78:	2201      	movs	r2, #1
 8004c7a:	493b      	ldr	r1, [pc, #236]	; (8004d68 <HAL_I2C_Mem_Write+0x118>)
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f7ff fe10 	bl	80048a2 <I2C_WaitOnFlagUntilTimeout>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d1f2      	bne.n	8004c6c <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8004c86:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d0ee      	beq.n	8004c6c <HAL_I2C_Mem_Write+0x1c>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c94:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c96:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8004c9c:	bf58      	it	pl
 8004c9e:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ca0:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8004ca2:	bf5c      	itt	pl
 8004ca4:	f042 0201 	orrpl.w	r2, r2, #1
 8004ca8:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb0:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cb2:	2321      	movs	r3, #33	; 0x21
 8004cb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cb8:	2340      	movs	r3, #64	; 0x40
 8004cba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cc4:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8004cc8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cca:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cce:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8004cd0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004cd4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cd6:	4b25      	ldr	r3, [pc, #148]	; (8004d6c <HAL_I2C_Mem_Write+0x11c>)
 8004cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cda:	464b      	mov	r3, r9
 8004cdc:	f7ff fe38 	bl	8004950 <I2C_RequestMemoryWrite>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d02a      	beq.n	8004d3a <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	e7c2      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce8:	f7ff fe0c 	bl	8004904 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cec:	b140      	cbz	r0, 8004d00 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cf0:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf2:	bf01      	itttt	eq
 8004cf4:	6822      	ldreq	r2, [r4, #0]
 8004cf6:	6813      	ldreq	r3, [r2, #0]
 8004cf8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8004cfc:	6013      	streq	r3, [r2, #0]
 8004cfe:	e7f1      	b.n	8004ce4 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d02:	6827      	ldr	r7, [r4, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004d0a:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8004d0c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004d0e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004d10:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004d12:	3a01      	subs	r2, #1
 8004d14:	b292      	uxth	r2, r2
 8004d16:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d18:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8004d1a:	1e48      	subs	r0, r1, #1
 8004d1c:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d1e:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8004d20:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d22:	d50a      	bpl.n	8004d3a <HAL_I2C_Mem_Write+0xea>
 8004d24:	b148      	cbz	r0, 8004d3a <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d26:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8004d28:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d2a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8004d2c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004d2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004d30:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8004d36:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004d38:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d3c:	462a      	mov	r2, r5
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1d0      	bne.n	8004ce8 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d46:	f7ff fd57 	bl	80047f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d1cf      	bne.n	8004cee <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	6813      	ldr	r3, [r2, #0]
 8004d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d56:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d58:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8004d5a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d62:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8004d66:	e782      	b.n	8004c6e <HAL_I2C_Mem_Write+0x1e>
 8004d68:	00100002 	.word	0x00100002
 8004d6c:	ffff0000 	.word	0xffff0000

08004d70 <HAL_I2C_Mem_Read>:
{
 8004d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d74:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8004d76:	2300      	movs	r3, #0
{
 8004d78:	4604      	mov	r4, r0
 8004d7a:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8004d7c:	9303      	str	r3, [sp, #12]
{
 8004d7e:	460d      	mov	r5, r1
 8004d80:	4690      	mov	r8, r2
 8004d82:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8004d84:	f7ff fb7e 	bl	8004484 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d88:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8004d8c:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d004      	beq.n	8004d9c <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8004d92:	2502      	movs	r5, #2
}
 8004d94:	4628      	mov	r0, r5
 8004d96:	b009      	add	sp, #36	; 0x24
 8004d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d9c:	9000      	str	r0, [sp, #0]
 8004d9e:	2319      	movs	r3, #25
 8004da0:	2201      	movs	r2, #1
 8004da2:	498e      	ldr	r1, [pc, #568]	; (8004fdc <HAL_I2C_Mem_Read+0x26c>)
 8004da4:	4620      	mov	r0, r4
 8004da6:	f7ff fd7c 	bl	80048a2 <I2C_WaitOnFlagUntilTimeout>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d1f1      	bne.n	8004d92 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8004dae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d0ed      	beq.n	8004d92 <HAL_I2C_Mem_Read+0x22>
 8004db6:	2301      	movs	r3, #1
 8004db8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dbc:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dbe:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dc0:	681a      	ldr	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dc2:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dc4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8004dc6:	bf5e      	ittt	pl
 8004dc8:	681a      	ldrpl	r2, [r3, #0]
 8004dca:	f042 0201 	orrpl.w	r2, r2, #1
 8004dce:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd6:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dd8:	2322      	movs	r3, #34	; 0x22
 8004dda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dde:	2340      	movs	r3, #64	; 0x40
 8004de0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004de8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dea:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->pBuffPtr    = pData;
 8004dee:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004df0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004df4:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8004df6:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004df8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dfa:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dfc:	4b78      	ldr	r3, [pc, #480]	; (8004fe0 <HAL_I2C_Mem_Read+0x270>)
 8004dfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e00:	464b      	mov	r3, r9
 8004e02:	f7ff fdfb 	bl	80049fc <I2C_RequestMemoryRead>
 8004e06:	4605      	mov	r5, r0
 8004e08:	b108      	cbz	r0, 8004e0e <HAL_I2C_Mem_Read+0x9e>
              return HAL_ERROR;
 8004e0a:	2501      	movs	r5, #1
 8004e0c:	e7c2      	b.n	8004d94 <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8004e0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	b992      	cbnz	r2, 8004e3a <HAL_I2C_Mem_Read+0xca>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e14:	9004      	str	r0, [sp, #16]
 8004e16:	695a      	ldr	r2, [r3, #20]
 8004e18:	9204      	str	r2, [sp, #16]
 8004e1a:	699a      	ldr	r2, [r3, #24]
 8004e1c:	9204      	str	r2, [sp, #16]
 8004e1e:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e26:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	2320      	movs	r3, #32
 8004e2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004e34:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004e38:	e7ac      	b.n	8004d94 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8004e3a:	2a01      	cmp	r2, #1
 8004e3c:	d132      	bne.n	8004ea4 <HAL_I2C_Mem_Read+0x134>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e44:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e46:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	9005      	str	r0, [sp, #20]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	9205      	str	r2, [sp, #20]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	9205      	str	r2, [sp, #20]
 8004e54:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e5e:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e60:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8004fe4 <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e64:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004fe8 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 8004e68:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0dc      	beq.n	8004e28 <HAL_I2C_Mem_Read+0xb8>
      if (hi2c->XferSize <= 3U)
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	f200 8095 	bhi.w	8004f9e <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d131      	bne.n	8004edc <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e78:	4632      	mov	r2, r6
 8004e7a:	4639      	mov	r1, r7
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f7ff fce1 	bl	8004844 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d1c1      	bne.n	8004e0a <HAL_I2C_Mem_Read+0x9a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e8c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e90:	3301      	adds	r3, #1
 8004e92:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004e94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004e96:	3b01      	subs	r3, #1
 8004e98:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004e9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004ea2:	e7e1      	b.n	8004e68 <HAL_I2C_Mem_Read+0xf8>
    else if (hi2c->XferSize == 2U)
 8004ea4:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ea6:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8004ea8:	d10e      	bne.n	8004ec8 <HAL_I2C_Mem_Read+0x158>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004eb0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	9006      	str	r0, [sp, #24]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	9206      	str	r2, [sp, #24]
 8004eba:	699a      	ldr	r2, [r3, #24]
 8004ebc:	9206      	str	r2, [sp, #24]
 8004ebe:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec6:	e7c9      	b.n	8004e5c <HAL_I2C_Mem_Read+0xec>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ecc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ece:	9007      	str	r0, [sp, #28]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	9207      	str	r2, [sp, #28]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	9307      	str	r3, [sp, #28]
 8004ed8:	9b07      	ldr	r3, [sp, #28]
 8004eda:	e7c1      	b.n	8004e60 <HAL_I2C_Mem_Read+0xf0>
        else if (hi2c->XferSize == 2U)
 8004edc:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ede:	9600      	str	r6, [sp, #0]
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	4641      	mov	r1, r8
 8004ee8:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8004eea:	d118      	bne.n	8004f1e <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eec:	f7ff fcd9 	bl	80048a2 <I2C_WaitOnFlagUntilTimeout>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d18a      	bne.n	8004e0a <HAL_I2C_Mem_Read+0x9a>
 8004ef4:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efe:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f04:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f08:	3301      	adds	r3, #1
 8004f0a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004f0c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004f12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f1a:	b662      	cpsie	i
 8004f1c:	e7b3      	b.n	8004e86 <HAL_I2C_Mem_Read+0x116>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f1e:	f7ff fcc0 	bl	80048a2 <I2C_WaitOnFlagUntilTimeout>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	f47f af71 	bne.w	8004e0a <HAL_I2C_Mem_Read+0x9a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f28:	6822      	ldr	r2, [r4, #0]
 8004f2a:	6813      	ldr	r3, [r2, #0]
 8004f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f30:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f32:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f3a:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f3c:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8004f40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f42:	1c4b      	adds	r3, r1, #1
 8004f44:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004f46:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004f4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f54:	f8d9 3000 	ldr.w	r3, [r9]
 8004f58:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f5c:	2323      	movs	r3, #35	; 0x23
 8004f5e:	4353      	muls	r3, r2
 8004f60:	9303      	str	r3, [sp, #12]
            count--;
 8004f62:	9b03      	ldr	r3, [sp, #12]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	b96b      	cbnz	r3, 8004f88 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f6c:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6e:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f70:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f7a:	f042 0220 	orr.w	r2, r2, #32
 8004f7e:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f80:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8004f82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004f86:	e740      	b.n	8004e0a <HAL_I2C_Mem_Read+0x9a>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	695a      	ldr	r2, [r3, #20]
 8004f8c:	0750      	lsls	r0, r2, #29
 8004f8e:	d5e8      	bpl.n	8004f62 <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f96:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	704b      	strb	r3, [r1, #1]
 8004f9c:	e7b3      	b.n	8004f06 <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f9e:	4632      	mov	r2, r6
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f7ff fc4e 	bl	8004844 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f47f af2e 	bne.w	8004e0a <HAL_I2C_Mem_Read+0x9a>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fb4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004fb8:	1c53      	adds	r3, r2, #1
 8004fba:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004fbc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004fc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	6959      	ldr	r1, [r3, #20]
 8004fce:	0749      	lsls	r1, r1, #29
 8004fd0:	f57f af4a 	bpl.w	8004e68 <HAL_I2C_Mem_Read+0xf8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	7053      	strb	r3, [r2, #1]
 8004fd8:	e759      	b.n	8004e8e <HAL_I2C_Mem_Read+0x11e>
 8004fda:	bf00      	nop
 8004fdc:	00100002 	.word	0x00100002
 8004fe0:	ffff0000 	.word	0xffff0000
 8004fe4:	00010004 	.word	0x00010004
 8004fe8:	20000038 	.word	0x20000038

08004fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	b908      	cbnz	r0, 8004ff8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	e03c      	b.n	8005072 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff8:	6803      	ldr	r3, [r0, #0]
 8004ffa:	07db      	lsls	r3, r3, #31
 8004ffc:	d410      	bmi.n	8005020 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffe:	682b      	ldr	r3, [r5, #0]
 8005000:	079f      	lsls	r7, r3, #30
 8005002:	d45d      	bmi.n	80050c0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	0719      	lsls	r1, r3, #28
 8005008:	f100 8094 	bmi.w	8005134 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	075a      	lsls	r2, r3, #29
 8005010:	f100 80be 	bmi.w	8005190 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005014:	69e8      	ldr	r0, [r5, #28]
 8005016:	2800      	cmp	r0, #0
 8005018:	f040 812c 	bne.w	8005274 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800501c:	2000      	movs	r0, #0
 800501e:	e028      	b.n	8005072 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005020:	4c8f      	ldr	r4, [pc, #572]	; (8005260 <HAL_RCC_OscConfig+0x274>)
 8005022:	6863      	ldr	r3, [r4, #4]
 8005024:	f003 030c 	and.w	r3, r3, #12
 8005028:	2b04      	cmp	r3, #4
 800502a:	d007      	beq.n	800503c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b08      	cmp	r3, #8
 8005034:	d109      	bne.n	800504a <HAL_RCC_OscConfig+0x5e>
 8005036:	6863      	ldr	r3, [r4, #4]
 8005038:	03de      	lsls	r6, r3, #15
 800503a:	d506      	bpl.n	800504a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	039c      	lsls	r4, r3, #14
 8005040:	d5dd      	bpl.n	8004ffe <HAL_RCC_OscConfig+0x12>
 8005042:	686b      	ldr	r3, [r5, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1da      	bne.n	8004ffe <HAL_RCC_OscConfig+0x12>
 8005048:	e7d4      	b.n	8004ff4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800504a:	686b      	ldr	r3, [r5, #4]
 800504c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005050:	d112      	bne.n	8005078 <HAL_RCC_OscConfig+0x8c>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005058:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800505a:	f7ff fa13 	bl	8004484 <HAL_GetTick>
 800505e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	0398      	lsls	r0, r3, #14
 8005064:	d4cb      	bmi.n	8004ffe <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005066:	f7ff fa0d 	bl	8004484 <HAL_GetTick>
 800506a:	1b80      	subs	r0, r0, r6
 800506c:	2864      	cmp	r0, #100	; 0x64
 800506e:	d9f7      	bls.n	8005060 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8005070:	2003      	movs	r0, #3
}
 8005072:	b002      	add	sp, #8
 8005074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005078:	b99b      	cbnz	r3, 80050a2 <HAL_RCC_OscConfig+0xb6>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005088:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800508a:	f7ff f9fb 	bl	8004484 <HAL_GetTick>
 800508e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	0399      	lsls	r1, r3, #14
 8005094:	d5b3      	bpl.n	8004ffe <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005096:	f7ff f9f5 	bl	8004484 <HAL_GetTick>
 800509a:	1b80      	subs	r0, r0, r6
 800509c:	2864      	cmp	r0, #100	; 0x64
 800509e:	d9f7      	bls.n	8005090 <HAL_RCC_OscConfig+0xa4>
 80050a0:	e7e6      	b.n	8005070 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	d103      	bne.n	80050b2 <HAL_RCC_OscConfig+0xc6>
 80050aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	e7cf      	b.n	8005052 <HAL_RCC_OscConfig+0x66>
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b6:	6023      	str	r3, [r4, #0]
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050be:	e7cb      	b.n	8005058 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050c0:	4c67      	ldr	r4, [pc, #412]	; (8005260 <HAL_RCC_OscConfig+0x274>)
 80050c2:	6863      	ldr	r3, [r4, #4]
 80050c4:	f013 0f0c 	tst.w	r3, #12
 80050c8:	d007      	beq.n	80050da <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050ca:	6863      	ldr	r3, [r4, #4]
 80050cc:	f003 030c 	and.w	r3, r3, #12
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d110      	bne.n	80050f6 <HAL_RCC_OscConfig+0x10a>
 80050d4:	6863      	ldr	r3, [r4, #4]
 80050d6:	03da      	lsls	r2, r3, #15
 80050d8:	d40d      	bmi.n	80050f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	079b      	lsls	r3, r3, #30
 80050de:	d502      	bpl.n	80050e6 <HAL_RCC_OscConfig+0xfa>
 80050e0:	692b      	ldr	r3, [r5, #16]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d186      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	696a      	ldr	r2, [r5, #20]
 80050ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80050ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	e786      	b.n	8005004 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050f6:	692a      	ldr	r2, [r5, #16]
 80050f8:	4b5a      	ldr	r3, [pc, #360]	; (8005264 <HAL_RCC_OscConfig+0x278>)
 80050fa:	b16a      	cbz	r2, 8005118 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80050fc:	2201      	movs	r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005100:	f7ff f9c0 	bl	8004484 <HAL_GetTick>
 8005104:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	079f      	lsls	r7, r3, #30
 800510a:	d4ec      	bmi.n	80050e6 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510c:	f7ff f9ba 	bl	8004484 <HAL_GetTick>
 8005110:	1b80      	subs	r0, r0, r6
 8005112:	2802      	cmp	r0, #2
 8005114:	d9f7      	bls.n	8005106 <HAL_RCC_OscConfig+0x11a>
 8005116:	e7ab      	b.n	8005070 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8005118:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800511a:	f7ff f9b3 	bl	8004484 <HAL_GetTick>
 800511e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	0798      	lsls	r0, r3, #30
 8005124:	f57f af6e 	bpl.w	8005004 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005128:	f7ff f9ac 	bl	8004484 <HAL_GetTick>
 800512c:	1b80      	subs	r0, r0, r6
 800512e:	2802      	cmp	r0, #2
 8005130:	d9f6      	bls.n	8005120 <HAL_RCC_OscConfig+0x134>
 8005132:	e79d      	b.n	8005070 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005134:	69aa      	ldr	r2, [r5, #24]
 8005136:	4c4a      	ldr	r4, [pc, #296]	; (8005260 <HAL_RCC_OscConfig+0x274>)
 8005138:	4b4b      	ldr	r3, [pc, #300]	; (8005268 <HAL_RCC_OscConfig+0x27c>)
 800513a:	b1da      	cbz	r2, 8005174 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005140:	f7ff f9a0 	bl	8004484 <HAL_GetTick>
 8005144:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005148:	079b      	lsls	r3, r3, #30
 800514a:	d50d      	bpl.n	8005168 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800514c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005150:	4b46      	ldr	r3, [pc, #280]	; (800526c <HAL_RCC_OscConfig+0x280>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	fbb3 f3f2 	udiv	r3, r3, r2
 8005158:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800515a:	bf00      	nop
  }
  while (Delay --);
 800515c:	9b01      	ldr	r3, [sp, #4]
 800515e:	1e5a      	subs	r2, r3, #1
 8005160:	9201      	str	r2, [sp, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f9      	bne.n	800515a <HAL_RCC_OscConfig+0x16e>
 8005166:	e751      	b.n	800500c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005168:	f7ff f98c 	bl	8004484 <HAL_GetTick>
 800516c:	1b80      	subs	r0, r0, r6
 800516e:	2802      	cmp	r0, #2
 8005170:	d9e9      	bls.n	8005146 <HAL_RCC_OscConfig+0x15a>
 8005172:	e77d      	b.n	8005070 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8005174:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005176:	f7ff f985 	bl	8004484 <HAL_GetTick>
 800517a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800517c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800517e:	079f      	lsls	r7, r3, #30
 8005180:	f57f af44 	bpl.w	800500c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005184:	f7ff f97e 	bl	8004484 <HAL_GetTick>
 8005188:	1b80      	subs	r0, r0, r6
 800518a:	2802      	cmp	r0, #2
 800518c:	d9f6      	bls.n	800517c <HAL_RCC_OscConfig+0x190>
 800518e:	e76f      	b.n	8005070 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005190:	4c33      	ldr	r4, [pc, #204]	; (8005260 <HAL_RCC_OscConfig+0x274>)
 8005192:	69e3      	ldr	r3, [r4, #28]
 8005194:	00d8      	lsls	r0, r3, #3
 8005196:	d424      	bmi.n	80051e2 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8005198:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800519a:	69e3      	ldr	r3, [r4, #28]
 800519c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a0:	61e3      	str	r3, [r4, #28]
 80051a2:	69e3      	ldr	r3, [r4, #28]
 80051a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ac:	4e30      	ldr	r6, [pc, #192]	; (8005270 <HAL_RCC_OscConfig+0x284>)
 80051ae:	6833      	ldr	r3, [r6, #0]
 80051b0:	05d9      	lsls	r1, r3, #23
 80051b2:	d518      	bpl.n	80051e6 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b4:	68eb      	ldr	r3, [r5, #12]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d126      	bne.n	8005208 <HAL_RCC_OscConfig+0x21c>
 80051ba:	6a23      	ldr	r3, [r4, #32]
 80051bc:	f043 0301 	orr.w	r3, r3, #1
 80051c0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80051c2:	f7ff f95f 	bl	8004484 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80051ca:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051cc:	6a23      	ldr	r3, [r4, #32]
 80051ce:	079b      	lsls	r3, r3, #30
 80051d0:	d53f      	bpl.n	8005252 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80051d2:	2f00      	cmp	r7, #0
 80051d4:	f43f af1e 	beq.w	8005014 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d8:	69e3      	ldr	r3, [r4, #28]
 80051da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051de:	61e3      	str	r3, [r4, #28]
 80051e0:	e718      	b.n	8005014 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80051e2:	2700      	movs	r7, #0
 80051e4:	e7e2      	b.n	80051ac <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e6:	6833      	ldr	r3, [r6, #0]
 80051e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80051ee:	f7ff f949 	bl	8004484 <HAL_GetTick>
 80051f2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	6833      	ldr	r3, [r6, #0]
 80051f6:	05da      	lsls	r2, r3, #23
 80051f8:	d4dc      	bmi.n	80051b4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fa:	f7ff f943 	bl	8004484 <HAL_GetTick>
 80051fe:	eba0 0008 	sub.w	r0, r0, r8
 8005202:	2864      	cmp	r0, #100	; 0x64
 8005204:	d9f6      	bls.n	80051f4 <HAL_RCC_OscConfig+0x208>
 8005206:	e733      	b.n	8005070 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005208:	b9ab      	cbnz	r3, 8005236 <HAL_RCC_OscConfig+0x24a>
 800520a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	6223      	str	r3, [r4, #32]
 8005216:	6a23      	ldr	r3, [r4, #32]
 8005218:	f023 0304 	bic.w	r3, r3, #4
 800521c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800521e:	f7ff f931 	bl	8004484 <HAL_GetTick>
 8005222:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005224:	6a23      	ldr	r3, [r4, #32]
 8005226:	0798      	lsls	r0, r3, #30
 8005228:	d5d3      	bpl.n	80051d2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522a:	f7ff f92b 	bl	8004484 <HAL_GetTick>
 800522e:	1b80      	subs	r0, r0, r6
 8005230:	4540      	cmp	r0, r8
 8005232:	d9f7      	bls.n	8005224 <HAL_RCC_OscConfig+0x238>
 8005234:	e71c      	b.n	8005070 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005236:	2b05      	cmp	r3, #5
 8005238:	6a23      	ldr	r3, [r4, #32]
 800523a:	d103      	bne.n	8005244 <HAL_RCC_OscConfig+0x258>
 800523c:	f043 0304 	orr.w	r3, r3, #4
 8005240:	6223      	str	r3, [r4, #32]
 8005242:	e7ba      	b.n	80051ba <HAL_RCC_OscConfig+0x1ce>
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6223      	str	r3, [r4, #32]
 800524a:	6a23      	ldr	r3, [r4, #32]
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	e7b6      	b.n	80051c0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005252:	f7ff f917 	bl	8004484 <HAL_GetTick>
 8005256:	eba0 0008 	sub.w	r0, r0, r8
 800525a:	42b0      	cmp	r0, r6
 800525c:	d9b6      	bls.n	80051cc <HAL_RCC_OscConfig+0x1e0>
 800525e:	e707      	b.n	8005070 <HAL_RCC_OscConfig+0x84>
 8005260:	40021000 	.word	0x40021000
 8005264:	42420000 	.word	0x42420000
 8005268:	42420480 	.word	0x42420480
 800526c:	20000038 	.word	0x20000038
 8005270:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005274:	4b2a      	ldr	r3, [pc, #168]	; (8005320 <HAL_RCC_OscConfig+0x334>)
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	461c      	mov	r4, r3
 800527a:	f002 020c 	and.w	r2, r2, #12
 800527e:	2a08      	cmp	r2, #8
 8005280:	d03d      	beq.n	80052fe <HAL_RCC_OscConfig+0x312>
 8005282:	2300      	movs	r3, #0
 8005284:	4e27      	ldr	r6, [pc, #156]	; (8005324 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005286:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005288:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800528a:	d12b      	bne.n	80052e4 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800528c:	f7ff f8fa 	bl	8004484 <HAL_GetTick>
 8005290:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	0199      	lsls	r1, r3, #6
 8005296:	d41f      	bmi.n	80052d8 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005298:	6a2b      	ldr	r3, [r5, #32]
 800529a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529e:	d105      	bne.n	80052ac <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052a0:	6862      	ldr	r2, [r4, #4]
 80052a2:	68a9      	ldr	r1, [r5, #8]
 80052a4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80052a8:	430a      	orrs	r2, r1
 80052aa:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052ac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80052ae:	6862      	ldr	r2, [r4, #4]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80052b6:	4313      	orrs	r3, r2
 80052b8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80052ba:	2301      	movs	r3, #1
 80052bc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80052be:	f7ff f8e1 	bl	8004484 <HAL_GetTick>
 80052c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	019a      	lsls	r2, r3, #6
 80052c8:	f53f aea8 	bmi.w	800501c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052cc:	f7ff f8da 	bl	8004484 <HAL_GetTick>
 80052d0:	1b40      	subs	r0, r0, r5
 80052d2:	2802      	cmp	r0, #2
 80052d4:	d9f6      	bls.n	80052c4 <HAL_RCC_OscConfig+0x2d8>
 80052d6:	e6cb      	b.n	8005070 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d8:	f7ff f8d4 	bl	8004484 <HAL_GetTick>
 80052dc:	1bc0      	subs	r0, r0, r7
 80052de:	2802      	cmp	r0, #2
 80052e0:	d9d7      	bls.n	8005292 <HAL_RCC_OscConfig+0x2a6>
 80052e2:	e6c5      	b.n	8005070 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80052e4:	f7ff f8ce 	bl	8004484 <HAL_GetTick>
 80052e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	019b      	lsls	r3, r3, #6
 80052ee:	f57f ae95 	bpl.w	800501c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f2:	f7ff f8c7 	bl	8004484 <HAL_GetTick>
 80052f6:	1b40      	subs	r0, r0, r5
 80052f8:	2802      	cmp	r0, #2
 80052fa:	d9f6      	bls.n	80052ea <HAL_RCC_OscConfig+0x2fe>
 80052fc:	e6b8      	b.n	8005070 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052fe:	2801      	cmp	r0, #1
 8005300:	f43f aeb7 	beq.w	8005072 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8005304:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005306:	6a2b      	ldr	r3, [r5, #32]
 8005308:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800530c:	429a      	cmp	r2, r3
 800530e:	f47f ae71 	bne.w	8004ff4 <HAL_RCC_OscConfig+0x8>
 8005312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005314:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8005318:	1ac0      	subs	r0, r0, r3
 800531a:	bf18      	it	ne
 800531c:	2001      	movne	r0, #1
 800531e:	e6a8      	b.n	8005072 <HAL_RCC_OscConfig+0x86>
 8005320:	40021000 	.word	0x40021000
 8005324:	42420060 	.word	0x42420060

08005328 <HAL_RCC_GetSysClockFreq>:
{
 8005328:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800532a:	4b18      	ldr	r3, [pc, #96]	; (800538c <HAL_RCC_GetSysClockFreq+0x64>)
{
 800532c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800532e:	ac02      	add	r4, sp, #8
 8005330:	f103 0510 	add.w	r5, r3, #16
 8005334:	4622      	mov	r2, r4
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	6859      	ldr	r1, [r3, #4]
 800533a:	3308      	adds	r3, #8
 800533c:	c203      	stmia	r2!, {r0, r1}
 800533e:	42ab      	cmp	r3, r5
 8005340:	4614      	mov	r4, r2
 8005342:	d1f7      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005344:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8005348:	4911      	ldr	r1, [pc, #68]	; (8005390 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800534a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800534e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005350:	f003 020c 	and.w	r2, r3, #12
 8005354:	2a08      	cmp	r2, #8
 8005356:	d117      	bne.n	8005388 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005358:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800535c:	a806      	add	r0, sp, #24
 800535e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005360:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005362:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005366:	d50c      	bpl.n	8005382 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005368:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800536a:	480a      	ldr	r0, [pc, #40]	; (8005394 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800536c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005370:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005372:	aa06      	add	r2, sp, #24
 8005374:	4413      	add	r3, r2
 8005376:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800537a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800537e:	b007      	add	sp, #28
 8005380:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005382:	4805      	ldr	r0, [pc, #20]	; (8005398 <HAL_RCC_GetSysClockFreq+0x70>)
 8005384:	4350      	muls	r0, r2
 8005386:	e7fa      	b.n	800537e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8005388:	4802      	ldr	r0, [pc, #8]	; (8005394 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800538a:	e7f8      	b.n	800537e <HAL_RCC_GetSysClockFreq+0x56>
 800538c:	0800c39c 	.word	0x0800c39c
 8005390:	40021000 	.word	0x40021000
 8005394:	007a1200 	.word	0x007a1200
 8005398:	003d0900 	.word	0x003d0900

0800539c <HAL_RCC_ClockConfig>:
{
 800539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80053a2:	4604      	mov	r4, r0
 80053a4:	b910      	cbnz	r0, 80053ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80053a6:	2001      	movs	r0, #1
}
 80053a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053ac:	4a44      	ldr	r2, [pc, #272]	; (80054c0 <HAL_RCC_ClockConfig+0x124>)
 80053ae:	6813      	ldr	r3, [r2, #0]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	428b      	cmp	r3, r1
 80053b6:	d328      	bcc.n	800540a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b8:	6821      	ldr	r1, [r4, #0]
 80053ba:	078e      	lsls	r6, r1, #30
 80053bc:	d430      	bmi.n	8005420 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053be:	07ca      	lsls	r2, r1, #31
 80053c0:	d443      	bmi.n	800544a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053c2:	4a3f      	ldr	r2, [pc, #252]	; (80054c0 <HAL_RCC_ClockConfig+0x124>)
 80053c4:	6813      	ldr	r3, [r2, #0]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	42ab      	cmp	r3, r5
 80053cc:	d865      	bhi.n	800549a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	4d3c      	ldr	r5, [pc, #240]	; (80054c4 <HAL_RCC_ClockConfig+0x128>)
 80053d2:	f012 0f04 	tst.w	r2, #4
 80053d6:	d16c      	bne.n	80054b2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d8:	0713      	lsls	r3, r2, #28
 80053da:	d506      	bpl.n	80053ea <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053dc:	686b      	ldr	r3, [r5, #4]
 80053de:	6922      	ldr	r2, [r4, #16]
 80053e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80053e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80053e8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053ea:	f7ff ff9d 	bl	8005328 <HAL_RCC_GetSysClockFreq>
 80053ee:	686b      	ldr	r3, [r5, #4]
 80053f0:	4a35      	ldr	r2, [pc, #212]	; (80054c8 <HAL_RCC_ClockConfig+0x12c>)
 80053f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80053f6:	5cd3      	ldrb	r3, [r2, r3]
 80053f8:	40d8      	lsrs	r0, r3
 80053fa:	4b34      	ldr	r3, [pc, #208]	; (80054cc <HAL_RCC_ClockConfig+0x130>)
 80053fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80053fe:	4b34      	ldr	r3, [pc, #208]	; (80054d0 <HAL_RCC_ClockConfig+0x134>)
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	f7fe fffd 	bl	8004400 <HAL_InitTick>
  return HAL_OK;
 8005406:	2000      	movs	r0, #0
 8005408:	e7ce      	b.n	80053a8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	f023 0307 	bic.w	r3, r3, #7
 8005410:	430b      	orrs	r3, r1
 8005412:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005414:	6813      	ldr	r3, [r2, #0]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	428b      	cmp	r3, r1
 800541c:	d1c3      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xa>
 800541e:	e7cb      	b.n	80053b8 <HAL_RCC_ClockConfig+0x1c>
 8005420:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005422:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005426:	bf1e      	ittt	ne
 8005428:	685a      	ldrne	r2, [r3, #4]
 800542a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800542e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005430:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005432:	bf42      	ittt	mi
 8005434:	685a      	ldrmi	r2, [r3, #4]
 8005436:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800543a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	68a0      	ldr	r0, [r4, #8]
 8005440:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005444:	4302      	orrs	r2, r0
 8005446:	605a      	str	r2, [r3, #4]
 8005448:	e7b9      	b.n	80053be <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800544a:	6862      	ldr	r2, [r4, #4]
 800544c:	4e1d      	ldr	r6, [pc, #116]	; (80054c4 <HAL_RCC_ClockConfig+0x128>)
 800544e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005450:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005452:	d11a      	bne.n	800548a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005454:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005458:	d0a5      	beq.n	80053a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800545c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005460:	f023 0303 	bic.w	r3, r3, #3
 8005464:	4313      	orrs	r3, r2
 8005466:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005468:	f7ff f80c 	bl	8004484 <HAL_GetTick>
 800546c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	6873      	ldr	r3, [r6, #4]
 8005470:	6862      	ldr	r2, [r4, #4]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800547a:	d0a2      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800547c:	f7ff f802 	bl	8004484 <HAL_GetTick>
 8005480:	1bc0      	subs	r0, r0, r7
 8005482:	4540      	cmp	r0, r8
 8005484:	d9f3      	bls.n	800546e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8005486:	2003      	movs	r0, #3
 8005488:	e78e      	b.n	80053a8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800548a:	2a02      	cmp	r2, #2
 800548c:	d102      	bne.n	8005494 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800548e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005492:	e7e1      	b.n	8005458 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005494:	f013 0f02 	tst.w	r3, #2
 8005498:	e7de      	b.n	8005458 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	f023 0307 	bic.w	r3, r3, #7
 80054a0:	432b      	orrs	r3, r5
 80054a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	42ab      	cmp	r3, r5
 80054ac:	f47f af7b 	bne.w	80053a6 <HAL_RCC_ClockConfig+0xa>
 80054b0:	e78d      	b.n	80053ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b2:	686b      	ldr	r3, [r5, #4]
 80054b4:	68e1      	ldr	r1, [r4, #12]
 80054b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054ba:	430b      	orrs	r3, r1
 80054bc:	606b      	str	r3, [r5, #4]
 80054be:	e78b      	b.n	80053d8 <HAL_RCC_ClockConfig+0x3c>
 80054c0:	40022000 	.word	0x40022000
 80054c4:	40021000 	.word	0x40021000
 80054c8:	0800e95d 	.word	0x0800e95d
 80054cc:	20000038 	.word	0x20000038
 80054d0:	20000040 	.word	0x20000040

080054d4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054d4:	4b04      	ldr	r3, [pc, #16]	; (80054e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80054d6:	4a05      	ldr	r2, [pc, #20]	; (80054ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80054de:	5cd3      	ldrb	r3, [r2, r3]
 80054e0:	4a03      	ldr	r2, [pc, #12]	; (80054f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80054e2:	6810      	ldr	r0, [r2, #0]
}
 80054e4:	40d8      	lsrs	r0, r3
 80054e6:	4770      	bx	lr
 80054e8:	40021000 	.word	0x40021000
 80054ec:	0800e96d 	.word	0x0800e96d
 80054f0:	20000038 	.word	0x20000038

080054f4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054f4:	4b04      	ldr	r3, [pc, #16]	; (8005508 <HAL_RCC_GetPCLK2Freq+0x14>)
 80054f6:	4a05      	ldr	r2, [pc, #20]	; (800550c <HAL_RCC_GetPCLK2Freq+0x18>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80054fe:	5cd3      	ldrb	r3, [r2, r3]
 8005500:	4a03      	ldr	r2, [pc, #12]	; (8005510 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005502:	6810      	ldr	r0, [r2, #0]
}
 8005504:	40d8      	lsrs	r0, r3
 8005506:	4770      	bx	lr
 8005508:	40021000 	.word	0x40021000
 800550c:	0800e96d 	.word	0x0800e96d
 8005510:	20000038 	.word	0x20000038

08005514 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005518:	461c      	mov	r4, r3
 800551a:	4616      	mov	r6, r2
 800551c:	460f      	mov	r7, r1
 800551e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005520:	f7fe ffb0 	bl	8004484 <HAL_GetTick>
 8005524:	4434      	add	r4, r6
 8005526:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005528:	f7fe ffac 	bl	8004484 <HAL_GetTick>
 800552c:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800552e:	4b23      	ldr	r3, [pc, #140]	; (80055bc <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005536:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005538:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800553a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800553c:	6893      	ldr	r3, [r2, #8]
 800553e:	ea37 0303 	bics.w	r3, r7, r3
 8005542:	d001      	beq.n	8005548 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x34>
    }
  }

  return HAL_OK;
 8005544:	2000      	movs	r0, #0
 8005546:	e02e      	b.n	80055a6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8005548:	1c73      	adds	r3, r6, #1
 800554a:	d0f7      	beq.n	800553c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800554c:	f7fe ff9a 	bl	8004484 <HAL_GetTick>
 8005550:	eba0 0008 	sub.w	r0, r0, r8
 8005554:	42a0      	cmp	r0, r4
 8005556:	d329      	bcc.n	80055ac <SPI_WaitFlagStateUntilTimeout.constprop.6+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005560:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005562:	686a      	ldr	r2, [r5, #4]
 8005564:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005568:	d10a      	bne.n	8005580 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
 800556a:	68aa      	ldr	r2, [r5, #8]
 800556c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005570:	d002      	beq.n	8005578 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005572:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005576:	d103      	bne.n	8005580 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005580:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005582:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005586:	d107      	bne.n	8005598 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x84>
          SPI_RESET_CRC(hspi);
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005596:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005598:	2301      	movs	r3, #1
 800559a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800559e:	2300      	movs	r3, #0
 80055a0:	2003      	movs	r0, #3
 80055a2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80055a6:	b002      	add	sp, #8
 80055a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 80055ac:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80055ae:	2b00      	cmp	r3, #0
      count--;
 80055b0:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80055b2:	bf08      	it	eq
 80055b4:	2400      	moveq	r4, #0
      count--;
 80055b6:	3b01      	subs	r3, #1
 80055b8:	e7be      	b.n	8005538 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x24>
 80055ba:	bf00      	nop
 80055bc:	20000038 	.word	0x20000038

080055c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055c0:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055c2:	4613      	mov	r3, r2
 80055c4:	460a      	mov	r2, r1
 80055c6:	2180      	movs	r1, #128	; 0x80
{
 80055c8:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055ca:	f7ff ffa3 	bl	8005514 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 80055ce:	b120      	cbz	r0, 80055da <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 80055d0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055d4:	f043 0320 	orr.w	r3, r3, #32
 80055d8:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 80055da:	bd10      	pop	{r4, pc}

080055dc <HAL_SPI_Init>:
{
 80055dc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80055de:	4604      	mov	r4, r0
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d051      	beq.n	8005688 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d14a      	bne.n	8005680 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ea:	6842      	ldr	r2, [r0, #4]
 80055ec:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80055f0:	d000      	beq.n	80055f4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055f2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80055f8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80055fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005600:	b923      	cbnz	r3, 800560c <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8005602:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005606:	4620      	mov	r0, r4
 8005608:	f7fe fc7e 	bl	8003f08 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800560c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800560e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005610:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8005614:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005616:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8005618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800561e:	6863      	ldr	r3, [r4, #4]
 8005620:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8005624:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005628:	4303      	orrs	r3, r0
 800562a:	68e0      	ldr	r0, [r4, #12]
 800562c:	69a1      	ldr	r1, [r4, #24]
 800562e:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8005632:	4303      	orrs	r3, r0
 8005634:	6920      	ldr	r0, [r4, #16]
 8005636:	f000 0002 	and.w	r0, r0, #2
 800563a:	4303      	orrs	r3, r0
 800563c:	6960      	ldr	r0, [r4, #20]
 800563e:	f000 0001 	and.w	r0, r0, #1
 8005642:	4303      	orrs	r3, r0
 8005644:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8005648:	4303      	orrs	r3, r0
 800564a:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800564c:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800564e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8005652:	4303      	orrs	r3, r0
 8005654:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005656:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800565a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800565e:	4303      	orrs	r3, r0
 8005660:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005662:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8005666:	4303      	orrs	r3, r0
 8005668:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800566a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800566c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800566e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005674:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005676:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005678:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800567a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800567e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005680:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005686:	e7b5      	b.n	80055f4 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8005688:	2001      	movs	r0, #1
 800568a:	e7f8      	b.n	800567e <HAL_SPI_Init+0xa2>

0800568c <HAL_SPI_Transmit>:
{
 800568c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005690:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8005692:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8005696:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005698:	2b01      	cmp	r3, #1
{
 800569a:	460d      	mov	r5, r1
 800569c:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800569e:	f000 809e 	beq.w	80057de <HAL_SPI_Transmit+0x152>
 80056a2:	2301      	movs	r3, #1
 80056a4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80056a8:	f7fe feec 	bl	8004484 <HAL_GetTick>
 80056ac:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80056ae:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80056b2:	b2c0      	uxtb	r0, r0
 80056b4:	2801      	cmp	r0, #1
 80056b6:	f040 8090 	bne.w	80057da <HAL_SPI_Transmit+0x14e>
  if ((pData == NULL) || (Size == 0U))
 80056ba:	2d00      	cmp	r5, #0
 80056bc:	d060      	beq.n	8005780 <HAL_SPI_Transmit+0xf4>
 80056be:	f1b8 0f00 	cmp.w	r8, #0
 80056c2:	d05d      	beq.n	8005780 <HAL_SPI_Transmit+0xf4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056c4:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056c6:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056cc:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ce:	6560      	str	r0, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferCount = Size;
 80056d4:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056d8:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056da:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056dc:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80056de:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056e2:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80056e4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
 80056e8:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ea:	d107      	bne.n	80056fc <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 80056ec:	6803      	ldr	r3, [r0, #0]
 80056ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f2:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 80056f4:	6803      	ldr	r3, [r0, #0]
 80056f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056fa:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056fc:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056fe:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005700:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8005702:	bf5e      	ittt	pl
 8005704:	6803      	ldrpl	r3, [r0, #0]
 8005706:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800570a:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800570c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005710:	6863      	ldr	r3, [r4, #4]
 8005712:	d13e      	bne.n	8005792 <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005714:	b113      	cbz	r3, 800571c <HAL_SPI_Transmit+0x90>
 8005716:	f1b8 0f01 	cmp.w	r8, #1
 800571a:	d107      	bne.n	800572c <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800571c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005720:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005722:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005724:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005726:	3b01      	subs	r3, #1
 8005728:	b29b      	uxth	r3, r3
 800572a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800572c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800572e:	b29b      	uxth	r3, r3
 8005730:	b9a3      	cbnz	r3, 800575c <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005732:	463a      	mov	r2, r7
 8005734:	4631      	mov	r1, r6
 8005736:	4620      	mov	r0, r4
 8005738:	f7ff ff42 	bl	80055c0 <SPI_EndRxTxTransaction>
 800573c:	2800      	cmp	r0, #0
 800573e:	d149      	bne.n	80057d4 <HAL_SPI_Transmit+0x148>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005740:	68a3      	ldr	r3, [r4, #8]
 8005742:	b933      	cbnz	r3, 8005752 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	9201      	str	r2, [sp, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005752:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8005754:	3000      	adds	r0, #0
 8005756:	bf18      	it	ne
 8005758:	2001      	movne	r0, #1
error:
 800575a:	e011      	b.n	8005780 <HAL_SPI_Transmit+0xf4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	6893      	ldr	r3, [r2, #8]
 8005760:	0798      	lsls	r0, r3, #30
 8005762:	d505      	bpl.n	8005770 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005766:	f833 1b02 	ldrh.w	r1, [r3], #2
 800576a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800576c:	6323      	str	r3, [r4, #48]	; 0x30
 800576e:	e7d9      	b.n	8005724 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005770:	f7fe fe88 	bl	8004484 <HAL_GetTick>
 8005774:	1bc0      	subs	r0, r0, r7
 8005776:	42b0      	cmp	r0, r6
 8005778:	d3d8      	bcc.n	800572c <HAL_SPI_Transmit+0xa0>
 800577a:	1c71      	adds	r1, r6, #1
 800577c:	d0d6      	beq.n	800572c <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 800577e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005780:	2301      	movs	r3, #1
 8005782:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005786:	2300      	movs	r3, #0
 8005788:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800578c:	b002      	add	sp, #8
 800578e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005792:	b113      	cbz	r3, 800579a <HAL_SPI_Transmit+0x10e>
 8005794:	f1b8 0f01 	cmp.w	r8, #1
 8005798:	d108      	bne.n	80057ac <HAL_SPI_Transmit+0x120>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800579a:	782b      	ldrb	r3, [r5, #0]
 800579c:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800579e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057a0:	3301      	adds	r3, #1
 80057a2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80057a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80057ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0be      	beq.n	8005732 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	0792      	lsls	r2, r2, #30
 80057ba:	d503      	bpl.n	80057c4 <HAL_SPI_Transmit+0x138>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80057be:	7812      	ldrb	r2, [r2, #0]
 80057c0:	731a      	strb	r2, [r3, #12]
 80057c2:	e7ec      	b.n	800579e <HAL_SPI_Transmit+0x112>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057c4:	f7fe fe5e 	bl	8004484 <HAL_GetTick>
 80057c8:	1bc0      	subs	r0, r0, r7
 80057ca:	42b0      	cmp	r0, r6
 80057cc:	d3ee      	bcc.n	80057ac <HAL_SPI_Transmit+0x120>
 80057ce:	1c73      	adds	r3, r6, #1
 80057d0:	d0ec      	beq.n	80057ac <HAL_SPI_Transmit+0x120>
 80057d2:	e7d4      	b.n	800577e <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d4:	2320      	movs	r3, #32
 80057d6:	6563      	str	r3, [r4, #84]	; 0x54
 80057d8:	e7b2      	b.n	8005740 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 80057da:	2002      	movs	r0, #2
 80057dc:	e7d0      	b.n	8005780 <HAL_SPI_Transmit+0xf4>
  __HAL_LOCK(hspi);
 80057de:	2002      	movs	r0, #2
 80057e0:	e7d4      	b.n	800578c <HAL_SPI_Transmit+0x100>
	...

080057e4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e4:	6a03      	ldr	r3, [r0, #32]
{
 80057e6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80057fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057fc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80057fe:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005802:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005804:	4d0a      	ldr	r5, [pc, #40]	; (8005830 <TIM_OC1_SetConfig+0x4c>)
 8005806:	42a8      	cmp	r0, r5
 8005808:	d10b      	bne.n	8005822 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800580a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800580c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005810:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005812:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005816:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800581a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800581c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005820:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005822:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005824:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005826:	684a      	ldr	r2, [r1, #4]
 8005828:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582a:	6203      	str	r3, [r0, #32]
}
 800582c:	bd70      	pop	{r4, r5, r6, pc}
 800582e:	bf00      	nop
 8005830:	40012c00 	.word	0x40012c00

08005834 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005834:	6a03      	ldr	r3, [r0, #32]
{
 8005836:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800583c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005842:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005844:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005846:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800584a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800584c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800584e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005852:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005856:	4d0b      	ldr	r5, [pc, #44]	; (8005884 <TIM_OC3_SetConfig+0x50>)
 8005858:	42a8      	cmp	r0, r5
 800585a:	d10d      	bne.n	8005878 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800585c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800585e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005862:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005866:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800586a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800586e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8005870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005874:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005878:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800587a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800587c:	684a      	ldr	r2, [r1, #4]
 800587e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005880:	6203      	str	r3, [r0, #32]
}
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	40012c00 	.word	0x40012c00

08005888 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005888:	6a03      	ldr	r3, [r0, #32]
{
 800588a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800588c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005890:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005896:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005898:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800589a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80058a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ac:	4d06      	ldr	r5, [pc, #24]	; (80058c8 <TIM_OC4_SetConfig+0x40>)
 80058ae:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058b0:	bf02      	ittt	eq
 80058b2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058b8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058be:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058c0:	684a      	ldr	r2, [r1, #4]
 80058c2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c4:	6203      	str	r3, [r0, #32]
}
 80058c6:	bd30      	pop	{r4, r5, pc}
 80058c8:	40012c00 	.word	0x40012c00

080058cc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80058cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d120      	bne.n	8005916 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	2302      	movs	r3, #2
 80058d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058da:	6803      	ldr	r3, [r0, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e4:	4a0d      	ldr	r2, [pc, #52]	; (800591c <HAL_TIM_Base_Start_IT+0x50>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00a      	beq.n	8005900 <HAL_TIM_Base_Start_IT+0x34>
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ee:	d007      	beq.n	8005900 <HAL_TIM_Base_Start_IT+0x34>
 80058f0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <HAL_TIM_Base_Start_IT+0x34>
 80058f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d104      	bne.n	800590a <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005906:	2a06      	cmp	r2, #6
 8005908:	d003      	beq.n	8005912 <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	f042 0201 	orr.w	r2, r2, #1
 8005910:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005912:	2000      	movs	r0, #0
}
 8005914:	4770      	bx	lr
    return HAL_ERROR;
 8005916:	2001      	movs	r0, #1
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40012c00 	.word	0x40012c00

08005920 <HAL_TIM_PWM_MspInit>:
 8005920:	4770      	bx	lr

08005922 <HAL_TIM_OC_DelayElapsedCallback>:
 8005922:	4770      	bx	lr

08005924 <HAL_TIM_IC_CaptureCallback>:
 8005924:	4770      	bx	lr

08005926 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005926:	4770      	bx	lr

08005928 <HAL_TIM_TriggerCallback>:
 8005928:	4770      	bx	lr

0800592a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800592a:	6803      	ldr	r3, [r0, #0]
{
 800592c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800592e:	691a      	ldr	r2, [r3, #16]
{
 8005930:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005932:	0791      	lsls	r1, r2, #30
 8005934:	d50e      	bpl.n	8005954 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	0792      	lsls	r2, r2, #30
 800593a:	d50b      	bpl.n	8005954 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800593c:	f06f 0202 	mvn.w	r2, #2
 8005940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005942:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005944:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005946:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005948:	079b      	lsls	r3, r3, #30
 800594a:	d077      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800594c:	f7ff ffea 	bl	8005924 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005950:	2300      	movs	r3, #0
 8005952:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	0750      	lsls	r0, r2, #29
 800595a:	d510      	bpl.n	800597e <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	0751      	lsls	r1, r2, #29
 8005960:	d50d      	bpl.n	800597e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005962:	f06f 0204 	mvn.w	r2, #4
 8005966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005968:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800596a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800596c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800596e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005972:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005974:	d068      	beq.n	8005a48 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	f7ff ffd5 	bl	8005924 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597a:	2300      	movs	r3, #0
 800597c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	0712      	lsls	r2, r2, #28
 8005984:	d50f      	bpl.n	80059a6 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	0710      	lsls	r0, r2, #28
 800598a:	d50c      	bpl.n	80059a6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800598c:	f06f 0208 	mvn.w	r2, #8
 8005990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005992:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005994:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005996:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005998:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800599a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800599c:	d05a      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800599e:	f7ff ffc1 	bl	8005924 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	2300      	movs	r3, #0
 80059a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	06d2      	lsls	r2, r2, #27
 80059ac:	d510      	bpl.n	80059d0 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	06d0      	lsls	r0, r2, #27
 80059b2:	d50d      	bpl.n	80059d0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059b4:	f06f 0210 	mvn.w	r2, #16
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ba:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059bc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059be:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80059c4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c6:	d04b      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80059c8:	f7ff ffac 	bl	8005924 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059cc:	2300      	movs	r3, #0
 80059ce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	07d1      	lsls	r1, r2, #31
 80059d6:	d508      	bpl.n	80059ea <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	07d2      	lsls	r2, r2, #31
 80059dc:	d505      	bpl.n	80059ea <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059de:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80059e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80059e6:	f7fe f88f 	bl	8003b08 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	0610      	lsls	r0, r2, #24
 80059f0:	d508      	bpl.n	8005a04 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	0611      	lsls	r1, r2, #24
 80059f6:	d505      	bpl.n	8005a04 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80059fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005a00:	f000 fa7f 	bl	8005f02 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	0652      	lsls	r2, r2, #25
 8005a0a:	d508      	bpl.n	8005a1e <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	0650      	lsls	r0, r2, #25
 8005a10:	d505      	bpl.n	8005a1e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a12:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8005a16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a18:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005a1a:	f7ff ff85 	bl	8005928 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	0691      	lsls	r1, r2, #26
 8005a24:	d522      	bpl.n	8005a6c <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	0692      	lsls	r2, r2, #26
 8005a2a:	d51f      	bpl.n	8005a6c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a2c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005a30:	4620      	mov	r0, r4
}
 8005a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005a38:	f000 ba62 	b.w	8005f00 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3c:	f7ff ff71 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7ff ff70 	bl	8005926 <HAL_TIM_PWM_PulseFinishedCallback>
 8005a46:	e783      	b.n	8005950 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a48:	f7ff ff6b 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f7ff ff6a 	bl	8005926 <HAL_TIM_PWM_PulseFinishedCallback>
 8005a52:	e792      	b.n	800597a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a54:	f7ff ff65 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f7ff ff64 	bl	8005926 <HAL_TIM_PWM_PulseFinishedCallback>
 8005a5e:	e7a0      	b.n	80059a2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a60:	f7ff ff5f 	bl	8005922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7ff ff5e 	bl	8005926 <HAL_TIM_PWM_PulseFinishedCallback>
 8005a6a:	e7af      	b.n	80059cc <HAL_TIM_IRQHandler+0xa2>
}
 8005a6c:	bd10      	pop	{r4, pc}
	...

08005a70 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a70:	4a1a      	ldr	r2, [pc, #104]	; (8005adc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8005a72:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a74:	4290      	cmp	r0, r2
 8005a76:	d00a      	beq.n	8005a8e <TIM_Base_SetConfig+0x1e>
 8005a78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005a7c:	d007      	beq.n	8005a8e <TIM_Base_SetConfig+0x1e>
 8005a7e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005a82:	4290      	cmp	r0, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_Base_SetConfig+0x1e>
 8005a86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a8a:	4290      	cmp	r0, r2
 8005a8c:	d115      	bne.n	8005aba <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8005a8e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a94:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a96:	4a11      	ldr	r2, [pc, #68]	; (8005adc <TIM_Base_SetConfig+0x6c>)
 8005a98:	4290      	cmp	r0, r2
 8005a9a:	d00a      	beq.n	8005ab2 <TIM_Base_SetConfig+0x42>
 8005a9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005aa0:	d007      	beq.n	8005ab2 <TIM_Base_SetConfig+0x42>
 8005aa2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005aa6:	4290      	cmp	r0, r2
 8005aa8:	d003      	beq.n	8005ab2 <TIM_Base_SetConfig+0x42>
 8005aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aae:	4290      	cmp	r0, r2
 8005ab0:	d103      	bne.n	8005aba <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ab2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ab8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aba:	694a      	ldr	r2, [r1, #20]
 8005abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005ac2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac4:	688b      	ldr	r3, [r1, #8]
 8005ac6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ac8:	680b      	ldr	r3, [r1, #0]
 8005aca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005acc:	4b03      	ldr	r3, [pc, #12]	; (8005adc <TIM_Base_SetConfig+0x6c>)
 8005ace:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad0:	bf04      	itt	eq
 8005ad2:	690b      	ldreq	r3, [r1, #16]
 8005ad4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	6143      	str	r3, [r0, #20]
}
 8005ada:	4770      	bx	lr
 8005adc:	40012c00 	.word	0x40012c00

08005ae0 <HAL_TIM_Base_Init>:
{
 8005ae0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	b330      	cbz	r0, 8005b34 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005aea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005aee:	b91b      	cbnz	r3, 8005af8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005af0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005af4:	f7fe fac2 	bl	800407c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b00:	1d21      	adds	r1, r4, #4
 8005b02:	f7ff ffb5 	bl	8005a70 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b06:	2301      	movs	r3, #1
  return HAL_OK;
 8005b08:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b0a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005b12:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005b16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005b1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005b2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005b32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005b34:	2001      	movs	r0, #1
 8005b36:	e7fc      	b.n	8005b32 <HAL_TIM_Base_Init+0x52>

08005b38 <HAL_TIM_PWM_Init>:
{
 8005b38:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	b330      	cbz	r0, 8005b8c <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005b3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005b42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005b46:	b91b      	cbnz	r3, 8005b50 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005b48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005b4c:	f7ff fee8 	bl	8005920 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b52:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005b54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b58:	1d21      	adds	r1, r4, #4
 8005b5a:	f7ff ff89 	bl	8005a70 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b5e:	2301      	movs	r3, #1
  return HAL_OK;
 8005b60:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b62:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005b6a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005b6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005b72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b7e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005b82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005b86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005b8a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	e7fc      	b.n	8005b8a <HAL_TIM_PWM_Init+0x52>

08005b90 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b90:	6a03      	ldr	r3, [r0, #32]
{
 8005b92:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b94:	f023 0310 	bic.w	r3, r3, #16
 8005b98:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005b9a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005b9c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005b9e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005baa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005bac:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bb4:	4d0b      	ldr	r5, [pc, #44]	; (8005be4 <TIM_OC2_SetConfig+0x54>)
 8005bb6:	42a8      	cmp	r0, r5
 8005bb8:	d10d      	bne.n	8005bd6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bc0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bc4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bc8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005bcc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bd2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005bd6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005bd8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005bda:	684a      	ldr	r2, [r1, #4]
 8005bdc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005bde:	6203      	str	r3, [r0, #32]
}
 8005be0:	bd70      	pop	{r4, r5, r6, pc}
 8005be2:	bf00      	nop
 8005be4:	40012c00 	.word	0x40012c00

08005be8 <HAL_TIM_PWM_ConfigChannel>:
{
 8005be8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005bea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005bee:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d054      	beq.n	8005c9e <HAL_TIM_PWM_ConfigChannel+0xb6>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005bfa:	2a0c      	cmp	r2, #12
 8005bfc:	d818      	bhi.n	8005c30 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005bfe:	e8df f002 	tbb	[pc, r2]
 8005c02:	1707      	.short	0x1707
 8005c04:	171b1717 	.word	0x171b1717
 8005c08:	172c1717 	.word	0x172c1717
 8005c0c:	1717      	.short	0x1717
 8005c0e:	3d          	.byte	0x3d
 8005c0f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c10:	6800      	ldr	r0, [r0, #0]
 8005c12:	f7ff fde7 	bl	80057e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c16:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c18:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	f042 0208 	orr.w	r2, r2, #8
 8005c20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	f022 0204 	bic.w	r2, r2, #4
 8005c28:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c2e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005c30:	2000      	movs	r0, #0
 8005c32:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c38:	6800      	ldr	r0, [r0, #0]
 8005c3a:	f7ff ffa9 	bl	8005b90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c3e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c40:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c42:	699a      	ldr	r2, [r3, #24]
 8005c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c48:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c4a:	699a      	ldr	r2, [r3, #24]
 8005c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c52:	699a      	ldr	r2, [r3, #24]
 8005c54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c58:	e7e9      	b.n	8005c2e <HAL_TIM_PWM_ConfigChannel+0x46>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	f7ff fdea 	bl	8005834 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c60:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c62:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c64:	69da      	ldr	r2, [r3, #28]
 8005c66:	f042 0208 	orr.w	r2, r2, #8
 8005c6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c6c:	69da      	ldr	r2, [r3, #28]
 8005c6e:	f022 0204 	bic.w	r2, r2, #4
 8005c72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c74:	69da      	ldr	r2, [r3, #28]
 8005c76:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c78:	61da      	str	r2, [r3, #28]
      break;
 8005c7a:	e7d9      	b.n	8005c30 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c7c:	6800      	ldr	r0, [r0, #0]
 8005c7e:	f7ff fe03 	bl	8005888 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c82:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c84:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c9c:	e7ec      	b.n	8005c78 <HAL_TIM_PWM_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8005c9e:	2002      	movs	r0, #2
 8005ca0:	e7c9      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x4e>

08005ca2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ca2:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ca4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ca6:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005cb0:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb2:	6083      	str	r3, [r0, #8]
}
 8005cb4:	bd10      	pop	{r4, pc}

08005cb6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005cb6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005cba:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8005cbc:	2b01      	cmp	r3, #1
{
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005cc4:	d019      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x44>
 8005cc6:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005ccc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005cce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005cd2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cd8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005cdc:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005cde:	680b      	ldr	r3, [r1, #0]
 8005ce0:	2b40      	cmp	r3, #64	; 0x40
 8005ce2:	d065      	beq.n	8005db0 <HAL_TIM_ConfigClockSource+0xfa>
 8005ce4:	d815      	bhi.n	8005d12 <HAL_TIM_ConfigClockSource+0x5c>
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d00c      	beq.n	8005d04 <HAL_TIM_ConfigClockSource+0x4e>
 8005cea:	d807      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x46>
 8005cec:	b153      	cbz	r3, 8005d04 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8005cee:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005cf0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005cf6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d001      	beq.n	8005d04 <HAL_TIM_ConfigClockSource+0x4e>
 8005d00:	2b30      	cmp	r3, #48	; 0x30
 8005d02:	d1f4      	bne.n	8005cee <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8005d04:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d06:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	e01a      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8005d12:	2b60      	cmp	r3, #96	; 0x60
 8005d14:	d034      	beq.n	8005d80 <HAL_TIM_ConfigClockSource+0xca>
 8005d16:	d819      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x96>
 8005d18:	2b50      	cmp	r3, #80	; 0x50
 8005d1a:	d1e8      	bne.n	8005cee <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1c:	684a      	ldr	r2, [r1, #4]
 8005d1e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005d20:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d22:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d24:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d28:	f025 0501 	bic.w	r5, r5, #1
 8005d2c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005d30:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d36:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005d3a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005d3e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d44:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005d48:	6083      	str	r3, [r0, #8]
 8005d4a:	e7d0      	b.n	8005cee <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8005d4c:	2b70      	cmp	r3, #112	; 0x70
 8005d4e:	d00c      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0xb4>
 8005d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d54:	d1cb      	bne.n	8005cee <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8005d56:	68cb      	ldr	r3, [r1, #12]
 8005d58:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005d5c:	f7ff ffa1 	bl	8005ca2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	6893      	ldr	r3, [r2, #8]
 8005d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d68:	e008      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8005d6a:	68cb      	ldr	r3, [r1, #12]
 8005d6c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005d70:	f7ff ff97 	bl	8005ca2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d7c:	6093      	str	r3, [r2, #8]
      break;
 8005d7e:	e7b6      	b.n	8005cee <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d80:	684d      	ldr	r5, [r1, #4]
 8005d82:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d84:	6a01      	ldr	r1, [r0, #32]
 8005d86:	f021 0110 	bic.w	r1, r1, #16
 8005d8a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d8c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005d8e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d90:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d9c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005da0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005da2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005da4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005daa:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8005dae:	e7cb      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db0:	684a      	ldr	r2, [r1, #4]
 8005db2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005db4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005db6:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005db8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dbc:	f025 0501 	bic.w	r5, r5, #1
 8005dc0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc2:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005dc4:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dca:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005dce:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005dd0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005dd2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dd8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8005ddc:	e7b4      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x92>

08005dde <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dde:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de0:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005de2:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de4:	f001 011f 	and.w	r1, r1, #31
 8005de8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005dea:	ea23 0304 	bic.w	r3, r3, r4
 8005dee:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005df0:	6a03      	ldr	r3, [r0, #32]
 8005df2:	408a      	lsls	r2, r1
 8005df4:	431a      	orrs	r2, r3
 8005df6:	6202      	str	r2, [r0, #32]
}
 8005df8:	bd10      	pop	{r4, pc}
	...

08005dfc <HAL_TIM_OC_Start>:
{
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e00:	b929      	cbnz	r1, 8005e0e <HAL_TIM_OC_Start+0x12>
 8005e02:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d01d      	beq.n	8005e46 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 8005e0a:	2001      	movs	r0, #1
}
 8005e0c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e0e:	2904      	cmp	r1, #4
 8005e10:	d107      	bne.n	8005e22 <HAL_TIM_OC_Start+0x26>
 8005e12:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d1f7      	bne.n	8005e0a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8005e20:	e014      	b.n	8005e4c <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e22:	2908      	cmp	r1, #8
 8005e24:	d107      	bne.n	8005e36 <HAL_TIM_OC_Start+0x3a>
 8005e26:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d1ed      	bne.n	8005e0a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2e:	2302      	movs	r3, #2
 8005e30:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8005e34:	e00a      	b.n	8005e4c <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d1e5      	bne.n	8005e0a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e3e:	2302      	movs	r3, #2
 8005e40:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005e44:	e002      	b.n	8005e4c <HAL_TIM_OC_Start+0x50>
 8005e46:	2302      	movs	r3, #2
 8005e48:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	6820      	ldr	r0, [r4, #0]
 8005e50:	f7ff ffc5 	bl	8005dde <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	4a0e      	ldr	r2, [pc, #56]	; (8005e90 <HAL_TIM_OC_Start+0x94>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d10a      	bne.n	8005e72 <HAL_TIM_OC_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 8005e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e62:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6a:	2a06      	cmp	r2, #6
 8005e6c:	d10b      	bne.n	8005e86 <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 8005e6e:	2000      	movs	r0, #0
 8005e70:	e7cc      	b.n	8005e0c <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e76:	d0f5      	beq.n	8005e64 <HAL_TIM_OC_Start+0x68>
 8005e78:	4a06      	ldr	r2, [pc, #24]	; (8005e94 <HAL_TIM_OC_Start+0x98>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d0f2      	beq.n	8005e64 <HAL_TIM_OC_Start+0x68>
 8005e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d0ee      	beq.n	8005e64 <HAL_TIM_OC_Start+0x68>
    __HAL_TIM_ENABLE(htim);
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e7ee      	b.n	8005e6e <HAL_TIM_OC_Start+0x72>
 8005e90:	40012c00 	.word	0x40012c00
 8005e94:	40000400 	.word	0x40000400

08005e98 <HAL_TIM_PWM_Start>:
 8005e98:	f7ff bfb0 	b.w	8005dfc <HAL_TIM_OC_Start>

08005e9c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005ea0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	f04f 0302 	mov.w	r3, #2
 8005ea8:	d025      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8005eaa:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb0:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eb2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8005eb4:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8005eb6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eba:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ebe:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8005ec0:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ec2:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec4:	4c0d      	ldr	r4, [pc, #52]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	d00a      	beq.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ece:	d007      	beq.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005ed0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	d003      	beq.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005ed8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005edc:	42a3      	cmp	r3, r4
 8005ede:	d104      	bne.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005ef6:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005ef8:	bd30      	pop	{r4, r5, pc}
 8005efa:	bf00      	nop
 8005efc:	40012c00 	.word	0x40012c00

08005f00 <HAL_TIMEx_CommutCallback>:
 8005f00:	4770      	bx	lr

08005f02 <HAL_TIMEx_BreakCallback>:
 8005f02:	4770      	bx	lr

08005f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f04:	b510      	push	{r4, lr}
 8005f06:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f08:	6803      	ldr	r3, [r0, #0]
 8005f0a:	68c1      	ldr	r1, [r0, #12]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005f12:	430a      	orrs	r2, r1
 8005f14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f16:	6882      	ldr	r2, [r0, #8]
 8005f18:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005f1a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f1c:	4302      	orrs	r2, r0
 8005f1e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005f20:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8005f24:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f28:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f2e:	695a      	ldr	r2, [r3, #20]
 8005f30:	69a1      	ldr	r1, [r4, #24]
 8005f32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f36:	430a      	orrs	r2, r1
 8005f38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f3a:	4a0e      	ldr	r2, [pc, #56]	; (8005f74 <UART_SetConfig+0x70>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d115      	bne.n	8005f6c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f40:	f7ff fad8 	bl	80054f4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f44:	2319      	movs	r3, #25
 8005f46:	4358      	muls	r0, r3
 8005f48:	6863      	ldr	r3, [r4, #4]
 8005f4a:	2264      	movs	r2, #100	; 0x64
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005f52:	fbb0 f1f2 	udiv	r1, r0, r2
 8005f56:	fb02 0311 	mls	r3, r2, r1, r0
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	3332      	adds	r3, #50	; 0x32
 8005f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f62:	6824      	ldr	r4, [r4, #0]
 8005f64:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005f68:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f6a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f6c:	f7ff fab2 	bl	80054d4 <HAL_RCC_GetPCLK1Freq>
 8005f70:	e7e8      	b.n	8005f44 <UART_SetConfig+0x40>
 8005f72:	bf00      	nop
 8005f74:	40013800 	.word	0x40013800

08005f78 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	460e      	mov	r6, r1
 8005f7e:	4617      	mov	r7, r2
 8005f80:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f82:	6821      	ldr	r1, [r4, #0]
 8005f84:	680b      	ldr	r3, [r1, #0]
 8005f86:	ea36 0303 	bics.w	r3, r6, r3
 8005f8a:	d101      	bne.n	8005f90 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e014      	b.n	8005fba <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8005f90:	1c6b      	adds	r3, r5, #1
 8005f92:	d0f7      	beq.n	8005f84 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f94:	b995      	cbnz	r5, 8005fbc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f96:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8005f98:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fa0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	f022 0201 	bic.w	r2, r2, #1
 8005fa8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005faa:	2320      	movs	r3, #32
 8005fac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005fb0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8005fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fbc:	f7fe fa62 	bl	8004484 <HAL_GetTick>
 8005fc0:	1bc0      	subs	r0, r0, r7
 8005fc2:	4285      	cmp	r5, r0
 8005fc4:	d2dd      	bcs.n	8005f82 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8005fc6:	e7e6      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08005fc8 <HAL_UART_Init>:
{
 8005fc8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005fca:	4604      	mov	r4, r0
 8005fcc:	b340      	cbz	r0, 8006020 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005fce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005fd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005fd6:	b91b      	cbnz	r3, 8005fe0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005fd8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005fdc:	f7fe f910 	bl	8004200 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005fe0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005fe2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005fe4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005fe8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8005fea:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005ff2:	f7ff ff87 	bl	8005f04 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006008:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006010:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006012:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006014:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006016:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800601a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800601e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006020:	2001      	movs	r0, #1
 8006022:	e7fc      	b.n	800601e <HAL_UART_Init+0x56>

08006024 <HAL_UART_Transmit>:
{
 8006024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006028:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800602a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800602e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8006030:	2b20      	cmp	r3, #32
{
 8006032:	460e      	mov	r6, r1
 8006034:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006036:	d14a      	bne.n	80060ce <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8006038:	2900      	cmp	r1, #0
 800603a:	d046      	beq.n	80060ca <HAL_UART_Transmit+0xa6>
 800603c:	2a00      	cmp	r2, #0
 800603e:	d044      	beq.n	80060ca <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8006040:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8006044:	2b01      	cmp	r3, #1
 8006046:	d042      	beq.n	80060ce <HAL_UART_Transmit+0xaa>
 8006048:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604a:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800604c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006050:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006052:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006054:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8006058:	f7fe fa14 	bl	8004484 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800605c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800605e:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8006064:	f8a4 9024 	strh.w	r9, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8006068:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800606c:	d103      	bne.n	8006076 <HAL_UART_Transmit+0x52>
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	b90b      	cbnz	r3, 8006076 <HAL_UART_Transmit+0x52>
 8006072:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8006074:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8006076:	2300      	movs	r3, #0
 8006078:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800607c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800607e:	b29b      	uxth	r3, r3
 8006080:	b953      	cbnz	r3, 8006098 <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006082:	4643      	mov	r3, r8
 8006084:	463a      	mov	r2, r7
 8006086:	2140      	movs	r1, #64	; 0x40
 8006088:	4620      	mov	r0, r4
 800608a:	f7ff ff75 	bl	8005f78 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800608e:	b950      	cbnz	r0, 80060a6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8006090:	2320      	movs	r3, #32
 8006092:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8006096:	e007      	b.n	80060a8 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006098:	4643      	mov	r3, r8
 800609a:	463a      	mov	r2, r7
 800609c:	2180      	movs	r1, #128	; 0x80
 800609e:	4620      	mov	r0, r4
 80060a0:	f7ff ff6a 	bl	8005f78 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80060a4:	b110      	cbz	r0, 80060ac <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80060a6:	2003      	movs	r0, #3
}
 80060a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ac:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80060ae:	b94e      	cbnz	r6, 80060c4 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060b0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80060b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060b8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80060ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29b      	uxth	r3, r3
 80060c0:	84e3      	strh	r3, [r4, #38]	; 0x26
 80060c2:	e7db      	b.n	800607c <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060c4:	f816 3b01 	ldrb.w	r3, [r6], #1
 80060c8:	e7f6      	b.n	80060b8 <HAL_UART_Transmit+0x94>
      return  HAL_ERROR;
 80060ca:	2001      	movs	r0, #1
 80060cc:	e7ec      	b.n	80060a8 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80060ce:	2002      	movs	r0, #2
 80060d0:	e7ea      	b.n	80060a8 <HAL_UART_Transmit+0x84>

080060d2 <HAL_UART_Receive>:
{
 80060d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d6:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80060dc:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80060de:	2b20      	cmp	r3, #32
{
 80060e0:	460e      	mov	r6, r1
 80060e2:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80060e4:	d14d      	bne.n	8006182 <HAL_UART_Receive+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80060e6:	2900      	cmp	r1, #0
 80060e8:	d049      	beq.n	800617e <HAL_UART_Receive+0xac>
 80060ea:	2a00      	cmp	r2, #0
 80060ec:	d047      	beq.n	800617e <HAL_UART_Receive+0xac>
    __HAL_LOCK(huart);
 80060ee:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d045      	beq.n	8006182 <HAL_UART_Receive+0xb0>
 80060f6:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f8:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80060fa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060fe:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006100:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006102:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8006106:	f7fe f9bd 	bl	8004484 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800610c:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8006112:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006116:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800611a:	d103      	bne.n	8006124 <HAL_UART_Receive+0x52>
 800611c:	6923      	ldr	r3, [r4, #16]
 800611e:	b90b      	cbnz	r3, 8006124 <HAL_UART_Receive+0x52>
 8006120:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8006122:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8006124:	2300      	movs	r3, #0
 8006126:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 800612a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800612c:	b280      	uxth	r0, r0
 800612e:	b920      	cbnz	r0, 800613a <HAL_UART_Receive+0x68>
    huart->RxState = HAL_UART_STATE_READY;
 8006130:	2320      	movs	r3, #32
 8006132:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8006136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800613a:	4643      	mov	r3, r8
 800613c:	463a      	mov	r2, r7
 800613e:	2120      	movs	r1, #32
 8006140:	4620      	mov	r0, r4
 8006142:	f7ff ff19 	bl	8005f78 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8006146:	b9f0      	cbnz	r0, 8006186 <HAL_UART_Receive+0xb4>
 8006148:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800614a:	b94e      	cbnz	r6, 8006160 <HAL_UART_Receive+0x8e>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006152:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8006156:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006158:	3b01      	subs	r3, #1
 800615a:	b29b      	uxth	r3, r3
 800615c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800615e:	e7e4      	b.n	800612a <HAL_UART_Receive+0x58>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006160:	68a2      	ldr	r2, [r4, #8]
 8006162:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006166:	d002      	beq.n	800616e <HAL_UART_Receive+0x9c>
 8006168:	b92a      	cbnz	r2, 8006176 <HAL_UART_Receive+0xa4>
 800616a:	6922      	ldr	r2, [r4, #16]
 800616c:	b91a      	cbnz	r2, 8006176 <HAL_UART_Receive+0xa4>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800616e:	685b      	ldr	r3, [r3, #4]
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006170:	7033      	strb	r3, [r6, #0]
        pdata8bits++;
 8006172:	3601      	adds	r6, #1
 8006174:	e7ef      	b.n	8006156 <HAL_UART_Receive+0x84>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800617c:	e7f8      	b.n	8006170 <HAL_UART_Receive+0x9e>
      return  HAL_ERROR;
 800617e:	2001      	movs	r0, #1
 8006180:	e7d9      	b.n	8006136 <HAL_UART_Receive+0x64>
    return HAL_BUSY;
 8006182:	2002      	movs	r0, #2
 8006184:	e7d7      	b.n	8006136 <HAL_UART_Receive+0x64>
        return HAL_TIMEOUT;
 8006186:	2003      	movs	r0, #3
 8006188:	e7d5      	b.n	8006136 <HAL_UART_Receive+0x64>
	...

0800618c <__errno>:
 800618c:	4b01      	ldr	r3, [pc, #4]	; (8006194 <__errno+0x8>)
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20000044 	.word	0x20000044

08006198 <__libc_init_array>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	2500      	movs	r5, #0
 800619c:	4e0c      	ldr	r6, [pc, #48]	; (80061d0 <__libc_init_array+0x38>)
 800619e:	4c0d      	ldr	r4, [pc, #52]	; (80061d4 <__libc_init_array+0x3c>)
 80061a0:	1ba4      	subs	r4, r4, r6
 80061a2:	10a4      	asrs	r4, r4, #2
 80061a4:	42a5      	cmp	r5, r4
 80061a6:	d109      	bne.n	80061bc <__libc_init_array+0x24>
 80061a8:	f006 f8d0 	bl	800c34c <_init>
 80061ac:	2500      	movs	r5, #0
 80061ae:	4e0a      	ldr	r6, [pc, #40]	; (80061d8 <__libc_init_array+0x40>)
 80061b0:	4c0a      	ldr	r4, [pc, #40]	; (80061dc <__libc_init_array+0x44>)
 80061b2:	1ba4      	subs	r4, r4, r6
 80061b4:	10a4      	asrs	r4, r4, #2
 80061b6:	42a5      	cmp	r5, r4
 80061b8:	d105      	bne.n	80061c6 <__libc_init_array+0x2e>
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
 80061bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061c0:	4798      	blx	r3
 80061c2:	3501      	adds	r5, #1
 80061c4:	e7ee      	b.n	80061a4 <__libc_init_array+0xc>
 80061c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061ca:	4798      	blx	r3
 80061cc:	3501      	adds	r5, #1
 80061ce:	e7f2      	b.n	80061b6 <__libc_init_array+0x1e>
 80061d0:	0800ec58 	.word	0x0800ec58
 80061d4:	0800ec58 	.word	0x0800ec58
 80061d8:	0800ec58 	.word	0x0800ec58
 80061dc:	0800ec60 	.word	0x0800ec60

080061e0 <memcmp>:
 80061e0:	b530      	push	{r4, r5, lr}
 80061e2:	2400      	movs	r4, #0
 80061e4:	42a2      	cmp	r2, r4
 80061e6:	d101      	bne.n	80061ec <memcmp+0xc>
 80061e8:	2000      	movs	r0, #0
 80061ea:	e007      	b.n	80061fc <memcmp+0x1c>
 80061ec:	5d03      	ldrb	r3, [r0, r4]
 80061ee:	3401      	adds	r4, #1
 80061f0:	190d      	adds	r5, r1, r4
 80061f2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80061f6:	42ab      	cmp	r3, r5
 80061f8:	d0f4      	beq.n	80061e4 <memcmp+0x4>
 80061fa:	1b58      	subs	r0, r3, r5
 80061fc:	bd30      	pop	{r4, r5, pc}

080061fe <memset>:
 80061fe:	4603      	mov	r3, r0
 8006200:	4402      	add	r2, r0
 8006202:	4293      	cmp	r3, r2
 8006204:	d100      	bne.n	8006208 <memset+0xa>
 8006206:	4770      	bx	lr
 8006208:	f803 1b01 	strb.w	r1, [r3], #1
 800620c:	e7f9      	b.n	8006202 <memset+0x4>
	...

08006210 <printf>:
 8006210:	b40f      	push	{r0, r1, r2, r3}
 8006212:	b507      	push	{r0, r1, r2, lr}
 8006214:	4906      	ldr	r1, [pc, #24]	; (8006230 <printf+0x20>)
 8006216:	ab04      	add	r3, sp, #16
 8006218:	6808      	ldr	r0, [r1, #0]
 800621a:	f853 2b04 	ldr.w	r2, [r3], #4
 800621e:	6881      	ldr	r1, [r0, #8]
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	f001 fb39 	bl	8007898 <_vfprintf_r>
 8006226:	b003      	add	sp, #12
 8006228:	f85d eb04 	ldr.w	lr, [sp], #4
 800622c:	b004      	add	sp, #16
 800622e:	4770      	bx	lr
 8006230:	20000044 	.word	0x20000044

08006234 <_puts_r>:
 8006234:	b530      	push	{r4, r5, lr}
 8006236:	4605      	mov	r5, r0
 8006238:	b089      	sub	sp, #36	; 0x24
 800623a:	4608      	mov	r0, r1
 800623c:	460c      	mov	r4, r1
 800623e:	f7f9 ff87 	bl	8000150 <strlen>
 8006242:	4b1e      	ldr	r3, [pc, #120]	; (80062bc <_puts_r+0x88>)
 8006244:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8006248:	9306      	str	r3, [sp, #24]
 800624a:	2301      	movs	r3, #1
 800624c:	4418      	add	r0, r3
 800624e:	9307      	str	r3, [sp, #28]
 8006250:	ab04      	add	r3, sp, #16
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	2302      	movs	r3, #2
 8006256:	9302      	str	r3, [sp, #8]
 8006258:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800625a:	9003      	str	r0, [sp, #12]
 800625c:	68ac      	ldr	r4, [r5, #8]
 800625e:	b913      	cbnz	r3, 8006266 <_puts_r+0x32>
 8006260:	4628      	mov	r0, r5
 8006262:	f003 fd51 	bl	8009d08 <__sinit>
 8006266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006268:	07db      	lsls	r3, r3, #31
 800626a:	d405      	bmi.n	8006278 <_puts_r+0x44>
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	0598      	lsls	r0, r3, #22
 8006270:	d402      	bmi.n	8006278 <_puts_r+0x44>
 8006272:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006274:	f004 f810 	bl	800a298 <__retarget_lock_acquire_recursive>
 8006278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627c:	0499      	lsls	r1, r3, #18
 800627e:	d406      	bmi.n	800628e <_puts_r+0x5a>
 8006280:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006288:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800628c:	6663      	str	r3, [r4, #100]	; 0x64
 800628e:	4628      	mov	r0, r5
 8006290:	aa01      	add	r2, sp, #4
 8006292:	4621      	mov	r1, r4
 8006294:	f003 fe84 	bl	8009fa0 <__sfvwrite_r>
 8006298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800629a:	2800      	cmp	r0, #0
 800629c:	bf0c      	ite	eq
 800629e:	250a      	moveq	r5, #10
 80062a0:	f04f 35ff 	movne.w	r5, #4294967295
 80062a4:	07da      	lsls	r2, r3, #31
 80062a6:	d405      	bmi.n	80062b4 <_puts_r+0x80>
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	059b      	lsls	r3, r3, #22
 80062ac:	d402      	bmi.n	80062b4 <_puts_r+0x80>
 80062ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b0:	f003 fff3 	bl	800a29a <__retarget_lock_release_recursive>
 80062b4:	4628      	mov	r0, r5
 80062b6:	b009      	add	sp, #36	; 0x24
 80062b8:	bd30      	pop	{r4, r5, pc}
 80062ba:	bf00      	nop
 80062bc:	0800e958 	.word	0x0800e958

080062c0 <puts>:
 80062c0:	4b02      	ldr	r3, [pc, #8]	; (80062cc <puts+0xc>)
 80062c2:	4601      	mov	r1, r0
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	f7ff bfb5 	b.w	8006234 <_puts_r>
 80062ca:	bf00      	nop
 80062cc:	20000044 	.word	0x20000044

080062d0 <setvbuf>:
 80062d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062d4:	461d      	mov	r5, r3
 80062d6:	4b58      	ldr	r3, [pc, #352]	; (8006438 <setvbuf+0x168>)
 80062d8:	4604      	mov	r4, r0
 80062da:	681e      	ldr	r6, [r3, #0]
 80062dc:	460f      	mov	r7, r1
 80062de:	4690      	mov	r8, r2
 80062e0:	b126      	cbz	r6, 80062ec <setvbuf+0x1c>
 80062e2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80062e4:	b913      	cbnz	r3, 80062ec <setvbuf+0x1c>
 80062e6:	4630      	mov	r0, r6
 80062e8:	f003 fd0e 	bl	8009d08 <__sinit>
 80062ec:	f1b8 0f02 	cmp.w	r8, #2
 80062f0:	d006      	beq.n	8006300 <setvbuf+0x30>
 80062f2:	f1b8 0f01 	cmp.w	r8, #1
 80062f6:	f200 809b 	bhi.w	8006430 <setvbuf+0x160>
 80062fa:	2d00      	cmp	r5, #0
 80062fc:	f2c0 8098 	blt.w	8006430 <setvbuf+0x160>
 8006300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006302:	07da      	lsls	r2, r3, #31
 8006304:	d405      	bmi.n	8006312 <setvbuf+0x42>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	059b      	lsls	r3, r3, #22
 800630a:	d402      	bmi.n	8006312 <setvbuf+0x42>
 800630c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800630e:	f003 ffc3 	bl	800a298 <__retarget_lock_acquire_recursive>
 8006312:	4621      	mov	r1, r4
 8006314:	4630      	mov	r0, r6
 8006316:	f003 fc8b 	bl	8009c30 <_fflush_r>
 800631a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800631c:	b141      	cbz	r1, 8006330 <setvbuf+0x60>
 800631e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006322:	4299      	cmp	r1, r3
 8006324:	d002      	beq.n	800632c <setvbuf+0x5c>
 8006326:	4630      	mov	r0, r6
 8006328:	f003 fd7e 	bl	8009e28 <_free_r>
 800632c:	2300      	movs	r3, #0
 800632e:	6323      	str	r3, [r4, #48]	; 0x30
 8006330:	2300      	movs	r3, #0
 8006332:	61a3      	str	r3, [r4, #24]
 8006334:	6063      	str	r3, [r4, #4]
 8006336:	89a3      	ldrh	r3, [r4, #12]
 8006338:	0618      	lsls	r0, r3, #24
 800633a:	d503      	bpl.n	8006344 <setvbuf+0x74>
 800633c:	6921      	ldr	r1, [r4, #16]
 800633e:	4630      	mov	r0, r6
 8006340:	f003 fd72 	bl	8009e28 <_free_r>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	f1b8 0f02 	cmp.w	r8, #2
 800634a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800634e:	f023 0303 	bic.w	r3, r3, #3
 8006352:	81a3      	strh	r3, [r4, #12]
 8006354:	d066      	beq.n	8006424 <setvbuf+0x154>
 8006356:	ab01      	add	r3, sp, #4
 8006358:	466a      	mov	r2, sp
 800635a:	4621      	mov	r1, r4
 800635c:	4630      	mov	r0, r6
 800635e:	f003 ff9d 	bl	800a29c <__swhatbuf_r>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	4318      	orrs	r0, r3
 8006366:	81a0      	strh	r0, [r4, #12]
 8006368:	bb2d      	cbnz	r5, 80063b6 <setvbuf+0xe6>
 800636a:	9d00      	ldr	r5, [sp, #0]
 800636c:	4628      	mov	r0, r5
 800636e:	f004 f801 	bl	800a374 <malloc>
 8006372:	4607      	mov	r7, r0
 8006374:	2800      	cmp	r0, #0
 8006376:	d157      	bne.n	8006428 <setvbuf+0x158>
 8006378:	f8dd 9000 	ldr.w	r9, [sp]
 800637c:	45a9      	cmp	r9, r5
 800637e:	d145      	bne.n	800640c <setvbuf+0x13c>
 8006380:	f04f 35ff 	mov.w	r5, #4294967295
 8006384:	2200      	movs	r2, #0
 8006386:	60a2      	str	r2, [r4, #8]
 8006388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800638c:	6022      	str	r2, [r4, #0]
 800638e:	6122      	str	r2, [r4, #16]
 8006390:	2201      	movs	r2, #1
 8006392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006396:	6162      	str	r2, [r4, #20]
 8006398:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800639a:	f043 0302 	orr.w	r3, r3, #2
 800639e:	07d1      	lsls	r1, r2, #31
 80063a0:	81a3      	strh	r3, [r4, #12]
 80063a2:	d404      	bmi.n	80063ae <setvbuf+0xde>
 80063a4:	059b      	lsls	r3, r3, #22
 80063a6:	d402      	bmi.n	80063ae <setvbuf+0xde>
 80063a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063aa:	f003 ff76 	bl	800a29a <__retarget_lock_release_recursive>
 80063ae:	4628      	mov	r0, r5
 80063b0:	b003      	add	sp, #12
 80063b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	d0d8      	beq.n	800636c <setvbuf+0x9c>
 80063ba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80063bc:	b913      	cbnz	r3, 80063c4 <setvbuf+0xf4>
 80063be:	4630      	mov	r0, r6
 80063c0:	f003 fca2 	bl	8009d08 <__sinit>
 80063c4:	9b00      	ldr	r3, [sp, #0]
 80063c6:	6027      	str	r7, [r4, #0]
 80063c8:	42ab      	cmp	r3, r5
 80063ca:	bf18      	it	ne
 80063cc:	89a3      	ldrhne	r3, [r4, #12]
 80063ce:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80063d2:	bf1c      	itt	ne
 80063d4:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 80063d8:	81a3      	strhne	r3, [r4, #12]
 80063da:	f1b8 0f01 	cmp.w	r8, #1
 80063de:	bf02      	ittt	eq
 80063e0:	89a3      	ldrheq	r3, [r4, #12]
 80063e2:	f043 0301 	orreq.w	r3, r3, #1
 80063e6:	81a3      	strheq	r3, [r4, #12]
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f013 0208 	ands.w	r2, r3, #8
 80063ee:	d01d      	beq.n	800642c <setvbuf+0x15c>
 80063f0:	07da      	lsls	r2, r3, #31
 80063f2:	bf41      	itttt	mi
 80063f4:	2200      	movmi	r2, #0
 80063f6:	426d      	negmi	r5, r5
 80063f8:	60a2      	strmi	r2, [r4, #8]
 80063fa:	61a5      	strmi	r5, [r4, #24]
 80063fc:	bf58      	it	pl
 80063fe:	60a5      	strpl	r5, [r4, #8]
 8006400:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006402:	f015 0501 	ands.w	r5, r5, #1
 8006406:	d0cd      	beq.n	80063a4 <setvbuf+0xd4>
 8006408:	2500      	movs	r5, #0
 800640a:	e7d0      	b.n	80063ae <setvbuf+0xde>
 800640c:	4648      	mov	r0, r9
 800640e:	f003 ffb1 	bl	800a374 <malloc>
 8006412:	4607      	mov	r7, r0
 8006414:	2800      	cmp	r0, #0
 8006416:	d0b3      	beq.n	8006380 <setvbuf+0xb0>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	464d      	mov	r5, r9
 800641c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	e7ca      	b.n	80063ba <setvbuf+0xea>
 8006424:	2500      	movs	r5, #0
 8006426:	e7ad      	b.n	8006384 <setvbuf+0xb4>
 8006428:	46a9      	mov	r9, r5
 800642a:	e7f5      	b.n	8006418 <setvbuf+0x148>
 800642c:	60a2      	str	r2, [r4, #8]
 800642e:	e7e7      	b.n	8006400 <setvbuf+0x130>
 8006430:	f04f 35ff 	mov.w	r5, #4294967295
 8006434:	e7bb      	b.n	80063ae <setvbuf+0xde>
 8006436:	bf00      	nop
 8006438:	20000044 	.word	0x20000044

0800643c <sprintf>:
 800643c:	b40e      	push	{r1, r2, r3}
 800643e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006442:	b500      	push	{lr}
 8006444:	b09c      	sub	sp, #112	; 0x70
 8006446:	ab1d      	add	r3, sp, #116	; 0x74
 8006448:	9002      	str	r0, [sp, #8]
 800644a:	9006      	str	r0, [sp, #24]
 800644c:	9107      	str	r1, [sp, #28]
 800644e:	9104      	str	r1, [sp, #16]
 8006450:	4808      	ldr	r0, [pc, #32]	; (8006474 <sprintf+0x38>)
 8006452:	4909      	ldr	r1, [pc, #36]	; (8006478 <sprintf+0x3c>)
 8006454:	f853 2b04 	ldr.w	r2, [r3], #4
 8006458:	9105      	str	r1, [sp, #20]
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	a902      	add	r1, sp, #8
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	f000 f80c 	bl	800647c <_svfprintf_r>
 8006464:	2200      	movs	r2, #0
 8006466:	9b02      	ldr	r3, [sp, #8]
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	b01c      	add	sp, #112	; 0x70
 800646c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006470:	b003      	add	sp, #12
 8006472:	4770      	bx	lr
 8006474:	20000044 	.word	0x20000044
 8006478:	ffff0208 	.word	0xffff0208

0800647c <_svfprintf_r>:
 800647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006480:	b0d5      	sub	sp, #340	; 0x154
 8006482:	4689      	mov	r9, r1
 8006484:	4693      	mov	fp, r2
 8006486:	461e      	mov	r6, r3
 8006488:	9007      	str	r0, [sp, #28]
 800648a:	f003 fef5 	bl	800a278 <_localeconv_r>
 800648e:	6803      	ldr	r3, [r0, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	931a      	str	r3, [sp, #104]	; 0x68
 8006494:	f7f9 fe5c 	bl	8000150 <strlen>
 8006498:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800649c:	900f      	str	r0, [sp, #60]	; 0x3c
 800649e:	0618      	lsls	r0, r3, #24
 80064a0:	d518      	bpl.n	80064d4 <_svfprintf_r+0x58>
 80064a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064a6:	b9ab      	cbnz	r3, 80064d4 <_svfprintf_r+0x58>
 80064a8:	2140      	movs	r1, #64	; 0x40
 80064aa:	9807      	ldr	r0, [sp, #28]
 80064ac:	f003 ff6a 	bl	800a384 <_malloc_r>
 80064b0:	f8c9 0000 	str.w	r0, [r9]
 80064b4:	f8c9 0010 	str.w	r0, [r9, #16]
 80064b8:	b948      	cbnz	r0, 80064ce <_svfprintf_r+0x52>
 80064ba:	230c      	movs	r3, #12
 80064bc:	9a07      	ldr	r2, [sp, #28]
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	f04f 33ff 	mov.w	r3, #4294967295
 80064c4:	9310      	str	r3, [sp, #64]	; 0x40
 80064c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80064c8:	b055      	add	sp, #340	; 0x154
 80064ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ce:	2340      	movs	r3, #64	; 0x40
 80064d0:	f8c9 3014 	str.w	r3, [r9, #20]
 80064d4:	2300      	movs	r3, #0
 80064d6:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 80064da:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 80064de:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 80064e2:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 80064e6:	ac2b      	add	r4, sp, #172	; 0xac
 80064e8:	9428      	str	r4, [sp, #160]	; 0xa0
 80064ea:	9308      	str	r3, [sp, #32]
 80064ec:	930d      	str	r3, [sp, #52]	; 0x34
 80064ee:	9316      	str	r3, [sp, #88]	; 0x58
 80064f0:	931d      	str	r3, [sp, #116]	; 0x74
 80064f2:	9310      	str	r3, [sp, #64]	; 0x40
 80064f4:	465d      	mov	r5, fp
 80064f6:	462b      	mov	r3, r5
 80064f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064fc:	b112      	cbz	r2, 8006504 <_svfprintf_r+0x88>
 80064fe:	2a25      	cmp	r2, #37	; 0x25
 8006500:	f040 80e4 	bne.w	80066cc <_svfprintf_r+0x250>
 8006504:	ebb5 070b 	subs.w	r7, r5, fp
 8006508:	d00e      	beq.n	8006528 <_svfprintf_r+0xac>
 800650a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800650c:	e9c4 b700 	strd	fp, r7, [r4]
 8006510:	443b      	add	r3, r7
 8006512:	932a      	str	r3, [sp, #168]	; 0xa8
 8006514:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006516:	3301      	adds	r3, #1
 8006518:	2b07      	cmp	r3, #7
 800651a:	9329      	str	r3, [sp, #164]	; 0xa4
 800651c:	f300 80d8 	bgt.w	80066d0 <_svfprintf_r+0x254>
 8006520:	3408      	adds	r4, #8
 8006522:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006524:	443b      	add	r3, r7
 8006526:	9310      	str	r3, [sp, #64]	; 0x40
 8006528:	782b      	ldrb	r3, [r5, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	f001 81a4 	beq.w	8007878 <_svfprintf_r+0x13fc>
 8006530:	1c6b      	adds	r3, r5, #1
 8006532:	930e      	str	r3, [sp, #56]	; 0x38
 8006534:	2300      	movs	r3, #0
 8006536:	f04f 35ff 	mov.w	r5, #4294967295
 800653a:	469a      	mov	sl, r3
 800653c:	270a      	movs	r7, #10
 800653e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8006542:	9311      	str	r3, [sp, #68]	; 0x44
 8006544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	930a      	str	r3, [sp, #40]	; 0x28
 800654a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800654c:	3301      	adds	r3, #1
 800654e:	930e      	str	r3, [sp, #56]	; 0x38
 8006550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006552:	3b20      	subs	r3, #32
 8006554:	2b5a      	cmp	r3, #90	; 0x5a
 8006556:	f200 8614 	bhi.w	8007182 <_svfprintf_r+0xd06>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <_svfprintf_r+0xe4>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006763 	.word	0x08006763
 8006564:	08007183 	.word	0x08007183
 8006568:	08007183 	.word	0x08007183
 800656c:	08006775 	.word	0x08006775
 8006570:	08007183 	.word	0x08007183
 8006574:	08007183 	.word	0x08007183
 8006578:	08007183 	.word	0x08007183
 800657c:	08006729 	.word	0x08006729
 8006580:	08007183 	.word	0x08007183
 8006584:	08007183 	.word	0x08007183
 8006588:	0800677b 	.word	0x0800677b
 800658c:	08006791 	.word	0x08006791
 8006590:	08007183 	.word	0x08007183
 8006594:	0800678b 	.word	0x0800678b
 8006598:	08006795 	.word	0x08006795
 800659c:	08007183 	.word	0x08007183
 80065a0:	080067c7 	.word	0x080067c7
 80065a4:	080067cd 	.word	0x080067cd
 80065a8:	080067cd 	.word	0x080067cd
 80065ac:	080067cd 	.word	0x080067cd
 80065b0:	080067cd 	.word	0x080067cd
 80065b4:	080067cd 	.word	0x080067cd
 80065b8:	080067cd 	.word	0x080067cd
 80065bc:	080067cd 	.word	0x080067cd
 80065c0:	080067cd 	.word	0x080067cd
 80065c4:	080067cd 	.word	0x080067cd
 80065c8:	08007183 	.word	0x08007183
 80065cc:	08007183 	.word	0x08007183
 80065d0:	08007183 	.word	0x08007183
 80065d4:	08007183 	.word	0x08007183
 80065d8:	08007183 	.word	0x08007183
 80065dc:	08007183 	.word	0x08007183
 80065e0:	08007183 	.word	0x08007183
 80065e4:	080068bb 	.word	0x080068bb
 80065e8:	08007183 	.word	0x08007183
 80065ec:	08006827 	.word	0x08006827
 80065f0:	08006849 	.word	0x08006849
 80065f4:	080068bb 	.word	0x080068bb
 80065f8:	080068bb 	.word	0x080068bb
 80065fc:	080068bb 	.word	0x080068bb
 8006600:	08007183 	.word	0x08007183
 8006604:	08007183 	.word	0x08007183
 8006608:	08007183 	.word	0x08007183
 800660c:	08007183 	.word	0x08007183
 8006610:	080067ed 	.word	0x080067ed
 8006614:	08007183 	.word	0x08007183
 8006618:	08007183 	.word	0x08007183
 800661c:	08006d89 	.word	0x08006d89
 8006620:	08007183 	.word	0x08007183
 8006624:	08007183 	.word	0x08007183
 8006628:	08007183 	.word	0x08007183
 800662c:	08006e15 	.word	0x08006e15
 8006630:	08007183 	.word	0x08007183
 8006634:	08006ff1 	.word	0x08006ff1
 8006638:	08007183 	.word	0x08007183
 800663c:	08007183 	.word	0x08007183
 8006640:	080066e9 	.word	0x080066e9
 8006644:	08007183 	.word	0x08007183
 8006648:	08007183 	.word	0x08007183
 800664c:	08007183 	.word	0x08007183
 8006650:	08007183 	.word	0x08007183
 8006654:	08007183 	.word	0x08007183
 8006658:	08007183 	.word	0x08007183
 800665c:	08007183 	.word	0x08007183
 8006660:	08007183 	.word	0x08007183
 8006664:	080068bb 	.word	0x080068bb
 8006668:	08007183 	.word	0x08007183
 800666c:	08006827 	.word	0x08006827
 8006670:	0800684d 	.word	0x0800684d
 8006674:	080068bb 	.word	0x080068bb
 8006678:	080068bb 	.word	0x080068bb
 800667c:	080068bb 	.word	0x080068bb
 8006680:	080067f3 	.word	0x080067f3
 8006684:	0800684d 	.word	0x0800684d
 8006688:	0800681b 	.word	0x0800681b
 800668c:	08007183 	.word	0x08007183
 8006690:	0800680d 	.word	0x0800680d
 8006694:	08007183 	.word	0x08007183
 8006698:	08006d43 	.word	0x08006d43
 800669c:	08006d8d 	.word	0x08006d8d
 80066a0:	08006df5 	.word	0x08006df5
 80066a4:	0800681b 	.word	0x0800681b
 80066a8:	08007183 	.word	0x08007183
 80066ac:	08006e15 	.word	0x08006e15
 80066b0:	08006545 	.word	0x08006545
 80066b4:	08006ff5 	.word	0x08006ff5
 80066b8:	08007183 	.word	0x08007183
 80066bc:	08007183 	.word	0x08007183
 80066c0:	08007033 	.word	0x08007033
 80066c4:	08007183 	.word	0x08007183
 80066c8:	08006545 	.word	0x08006545
 80066cc:	461d      	mov	r5, r3
 80066ce:	e712      	b.n	80064f6 <_svfprintf_r+0x7a>
 80066d0:	aa28      	add	r2, sp, #160	; 0xa0
 80066d2:	4649      	mov	r1, r9
 80066d4:	9807      	ldr	r0, [sp, #28]
 80066d6:	f004 fdc1 	bl	800b25c <__ssprint_r>
 80066da:	2800      	cmp	r0, #0
 80066dc:	f040 8157 	bne.w	800698e <_svfprintf_r+0x512>
 80066e0:	ac2b      	add	r4, sp, #172	; 0xac
 80066e2:	e71e      	b.n	8006522 <_svfprintf_r+0xa6>
 80066e4:	461e      	mov	r6, r3
 80066e6:	e72d      	b.n	8006544 <_svfprintf_r+0xc8>
 80066e8:	4bad      	ldr	r3, [pc, #692]	; (80069a0 <_svfprintf_r+0x524>)
 80066ea:	f01a 0f20 	tst.w	sl, #32
 80066ee:	931c      	str	r3, [sp, #112]	; 0x70
 80066f0:	f000 84a2 	beq.w	8007038 <_svfprintf_r+0xbbc>
 80066f4:	3607      	adds	r6, #7
 80066f6:	f026 0607 	bic.w	r6, r6, #7
 80066fa:	f106 0308 	add.w	r3, r6, #8
 80066fe:	930c      	str	r3, [sp, #48]	; 0x30
 8006700:	e9d6 6700 	ldrd	r6, r7, [r6]
 8006704:	f01a 0f01 	tst.w	sl, #1
 8006708:	d00a      	beq.n	8006720 <_svfprintf_r+0x2a4>
 800670a:	ea56 0307 	orrs.w	r3, r6, r7
 800670e:	d007      	beq.n	8006720 <_svfprintf_r+0x2a4>
 8006710:	2330      	movs	r3, #48	; 0x30
 8006712:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8006716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006718:	f04a 0a02 	orr.w	sl, sl, #2
 800671c:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8006720:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8006724:	2302      	movs	r3, #2
 8006726:	e33f      	b.n	8006da8 <_svfprintf_r+0x92c>
 8006728:	9807      	ldr	r0, [sp, #28]
 800672a:	f003 fda5 	bl	800a278 <_localeconv_r>
 800672e:	6843      	ldr	r3, [r0, #4]
 8006730:	4618      	mov	r0, r3
 8006732:	931d      	str	r3, [sp, #116]	; 0x74
 8006734:	f7f9 fd0c 	bl	8000150 <strlen>
 8006738:	9016      	str	r0, [sp, #88]	; 0x58
 800673a:	9807      	ldr	r0, [sp, #28]
 800673c:	f003 fd9c 	bl	800a278 <_localeconv_r>
 8006740:	6883      	ldr	r3, [r0, #8]
 8006742:	930d      	str	r3, [sp, #52]	; 0x34
 8006744:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006746:	2b00      	cmp	r3, #0
 8006748:	f43f aefc 	beq.w	8006544 <_svfprintf_r+0xc8>
 800674c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800674e:	2b00      	cmp	r3, #0
 8006750:	f43f aef8 	beq.w	8006544 <_svfprintf_r+0xc8>
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f43f aef4 	beq.w	8006544 <_svfprintf_r+0xc8>
 800675c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8006760:	e6f0      	b.n	8006544 <_svfprintf_r+0xc8>
 8006762:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8006766:	2b00      	cmp	r3, #0
 8006768:	f47f aeec 	bne.w	8006544 <_svfprintf_r+0xc8>
 800676c:	2320      	movs	r3, #32
 800676e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8006772:	e6e7      	b.n	8006544 <_svfprintf_r+0xc8>
 8006774:	f04a 0a01 	orr.w	sl, sl, #1
 8006778:	e6e4      	b.n	8006544 <_svfprintf_r+0xc8>
 800677a:	6832      	ldr	r2, [r6, #0]
 800677c:	1d33      	adds	r3, r6, #4
 800677e:	2a00      	cmp	r2, #0
 8006780:	9211      	str	r2, [sp, #68]	; 0x44
 8006782:	daaf      	bge.n	80066e4 <_svfprintf_r+0x268>
 8006784:	461e      	mov	r6, r3
 8006786:	4252      	negs	r2, r2
 8006788:	9211      	str	r2, [sp, #68]	; 0x44
 800678a:	f04a 0a04 	orr.w	sl, sl, #4
 800678e:	e6d9      	b.n	8006544 <_svfprintf_r+0xc8>
 8006790:	232b      	movs	r3, #43	; 0x2b
 8006792:	e7ec      	b.n	800676e <_svfprintf_r+0x2f2>
 8006794:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	3301      	adds	r3, #1
 800679c:	2a2a      	cmp	r2, #42	; 0x2a
 800679e:	920a      	str	r2, [sp, #40]	; 0x28
 80067a0:	d10f      	bne.n	80067c2 <_svfprintf_r+0x346>
 80067a2:	6835      	ldr	r5, [r6, #0]
 80067a4:	930e      	str	r3, [sp, #56]	; 0x38
 80067a6:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80067aa:	3604      	adds	r6, #4
 80067ac:	e6ca      	b.n	8006544 <_svfprintf_r+0xc8>
 80067ae:	fb07 2505 	mla	r5, r7, r5, r2
 80067b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067b6:	920a      	str	r2, [sp, #40]	; 0x28
 80067b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ba:	3a30      	subs	r2, #48	; 0x30
 80067bc:	2a09      	cmp	r2, #9
 80067be:	d9f6      	bls.n	80067ae <_svfprintf_r+0x332>
 80067c0:	e6c5      	b.n	800654e <_svfprintf_r+0xd2>
 80067c2:	2500      	movs	r5, #0
 80067c4:	e7f8      	b.n	80067b8 <_svfprintf_r+0x33c>
 80067c6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80067ca:	e6bb      	b.n	8006544 <_svfprintf_r+0xc8>
 80067cc:	2200      	movs	r2, #0
 80067ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067d0:	9211      	str	r2, [sp, #68]	; 0x44
 80067d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80067d6:	3a30      	subs	r2, #48	; 0x30
 80067d8:	fb07 2201 	mla	r2, r7, r1, r2
 80067dc:	9211      	str	r2, [sp, #68]	; 0x44
 80067de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067e2:	920a      	str	r2, [sp, #40]	; 0x28
 80067e4:	3a30      	subs	r2, #48	; 0x30
 80067e6:	2a09      	cmp	r2, #9
 80067e8:	d9f3      	bls.n	80067d2 <_svfprintf_r+0x356>
 80067ea:	e6b0      	b.n	800654e <_svfprintf_r+0xd2>
 80067ec:	f04a 0a08 	orr.w	sl, sl, #8
 80067f0:	e6a8      	b.n	8006544 <_svfprintf_r+0xc8>
 80067f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b68      	cmp	r3, #104	; 0x68
 80067f8:	bf01      	itttt	eq
 80067fa:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 80067fc:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8006800:	3301      	addeq	r3, #1
 8006802:	930e      	streq	r3, [sp, #56]	; 0x38
 8006804:	bf18      	it	ne
 8006806:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800680a:	e69b      	b.n	8006544 <_svfprintf_r+0xc8>
 800680c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b6c      	cmp	r3, #108	; 0x6c
 8006812:	d105      	bne.n	8006820 <_svfprintf_r+0x3a4>
 8006814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006816:	3301      	adds	r3, #1
 8006818:	930e      	str	r3, [sp, #56]	; 0x38
 800681a:	f04a 0a20 	orr.w	sl, sl, #32
 800681e:	e691      	b.n	8006544 <_svfprintf_r+0xc8>
 8006820:	f04a 0a10 	orr.w	sl, sl, #16
 8006824:	e68e      	b.n	8006544 <_svfprintf_r+0xc8>
 8006826:	2000      	movs	r0, #0
 8006828:	1d33      	adds	r3, r6, #4
 800682a:	930c      	str	r3, [sp, #48]	; 0x30
 800682c:	6833      	ldr	r3, [r6, #0]
 800682e:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8006832:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8006836:	4680      	mov	r8, r0
 8006838:	2501      	movs	r5, #1
 800683a:	9012      	str	r0, [sp, #72]	; 0x48
 800683c:	4607      	mov	r7, r0
 800683e:	900b      	str	r0, [sp, #44]	; 0x2c
 8006840:	4606      	mov	r6, r0
 8006842:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8006846:	e2fe      	b.n	8006e46 <_svfprintf_r+0x9ca>
 8006848:	f04a 0a10 	orr.w	sl, sl, #16
 800684c:	f01a 0f20 	tst.w	sl, #32
 8006850:	d020      	beq.n	8006894 <_svfprintf_r+0x418>
 8006852:	3607      	adds	r6, #7
 8006854:	f026 0607 	bic.w	r6, r6, #7
 8006858:	f106 0308 	add.w	r3, r6, #8
 800685c:	930c      	str	r3, [sp, #48]	; 0x30
 800685e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8006862:	2e00      	cmp	r6, #0
 8006864:	f177 0300 	sbcs.w	r3, r7, #0
 8006868:	da05      	bge.n	8006876 <_svfprintf_r+0x3fa>
 800686a:	232d      	movs	r3, #45	; 0x2d
 800686c:	4276      	negs	r6, r6
 800686e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006872:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8006876:	1c6b      	adds	r3, r5, #1
 8006878:	f040 83f1 	bne.w	800705e <_svfprintf_r+0xbe2>
 800687c:	2f00      	cmp	r7, #0
 800687e:	bf08      	it	eq
 8006880:	2e0a      	cmpeq	r6, #10
 8006882:	f080 8423 	bcs.w	80070cc <_svfprintf_r+0xc50>
 8006886:	3630      	adds	r6, #48	; 0x30
 8006888:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 800688c:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 8006890:	f000 bc08 	b.w	80070a4 <_svfprintf_r+0xc28>
 8006894:	1d33      	adds	r3, r6, #4
 8006896:	f01a 0f10 	tst.w	sl, #16
 800689a:	930c      	str	r3, [sp, #48]	; 0x30
 800689c:	d002      	beq.n	80068a4 <_svfprintf_r+0x428>
 800689e:	6836      	ldr	r6, [r6, #0]
 80068a0:	17f7      	asrs	r7, r6, #31
 80068a2:	e7de      	b.n	8006862 <_svfprintf_r+0x3e6>
 80068a4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80068a8:	6836      	ldr	r6, [r6, #0]
 80068aa:	d001      	beq.n	80068b0 <_svfprintf_r+0x434>
 80068ac:	b236      	sxth	r6, r6
 80068ae:	e7f7      	b.n	80068a0 <_svfprintf_r+0x424>
 80068b0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80068b4:	bf18      	it	ne
 80068b6:	b276      	sxtbne	r6, r6
 80068b8:	e7f2      	b.n	80068a0 <_svfprintf_r+0x424>
 80068ba:	3607      	adds	r6, #7
 80068bc:	f026 0607 	bic.w	r6, r6, #7
 80068c0:	f106 0308 	add.w	r3, r6, #8
 80068c4:	930c      	str	r3, [sp, #48]	; 0x30
 80068c6:	6833      	ldr	r3, [r6, #0]
 80068c8:	f04f 32ff 	mov.w	r2, #4294967295
 80068cc:	9314      	str	r3, [sp, #80]	; 0x50
 80068ce:	6873      	ldr	r3, [r6, #4]
 80068d0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80068d2:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80068d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80068d8:	4638      	mov	r0, r7
 80068da:	4b32      	ldr	r3, [pc, #200]	; (80069a4 <_svfprintf_r+0x528>)
 80068dc:	4631      	mov	r1, r6
 80068de:	f7fa f895 	bl	8000a0c <__aeabi_dcmpun>
 80068e2:	bb00      	cbnz	r0, 8006926 <_svfprintf_r+0x4aa>
 80068e4:	f04f 32ff 	mov.w	r2, #4294967295
 80068e8:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <_svfprintf_r+0x528>)
 80068ea:	4638      	mov	r0, r7
 80068ec:	4631      	mov	r1, r6
 80068ee:	f7fa f86f 	bl	80009d0 <__aeabi_dcmple>
 80068f2:	b9c0      	cbnz	r0, 8006926 <_svfprintf_r+0x4aa>
 80068f4:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80068f8:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 80068fc:	f7fa f85e 	bl	80009bc <__aeabi_dcmplt>
 8006900:	b110      	cbz	r0, 8006908 <_svfprintf_r+0x48c>
 8006902:	232d      	movs	r3, #45	; 0x2d
 8006904:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8006908:	4a27      	ldr	r2, [pc, #156]	; (80069a8 <_svfprintf_r+0x52c>)
 800690a:	4b28      	ldr	r3, [pc, #160]	; (80069ac <_svfprintf_r+0x530>)
 800690c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	2947      	cmp	r1, #71	; 0x47
 8006914:	bfcc      	ite	gt
 8006916:	4693      	movgt	fp, r2
 8006918:	469b      	movle	fp, r3
 800691a:	2503      	movs	r5, #3
 800691c:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8006920:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8006924:	e3c4      	b.n	80070b0 <_svfprintf_r+0xc34>
 8006926:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800692a:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 800692e:	f7fa f86d 	bl	8000a0c <__aeabi_dcmpun>
 8006932:	4680      	mov	r8, r0
 8006934:	b140      	cbz	r0, 8006948 <_svfprintf_r+0x4cc>
 8006936:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <_svfprintf_r+0x534>)
 800693a:	2b00      	cmp	r3, #0
 800693c:	bfbc      	itt	lt
 800693e:	232d      	movlt	r3, #45	; 0x2d
 8006940:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8006944:	4b1b      	ldr	r3, [pc, #108]	; (80069b4 <_svfprintf_r+0x538>)
 8006946:	e7e1      	b.n	800690c <_svfprintf_r+0x490>
 8006948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800694a:	f023 0320 	bic.w	r3, r3, #32
 800694e:	2b41      	cmp	r3, #65	; 0x41
 8006950:	930b      	str	r3, [sp, #44]	; 0x2c
 8006952:	d131      	bne.n	80069b8 <_svfprintf_r+0x53c>
 8006954:	2330      	movs	r3, #48	; 0x30
 8006956:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800695a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800695c:	f04a 0a02 	orr.w	sl, sl, #2
 8006960:	2b61      	cmp	r3, #97	; 0x61
 8006962:	bf14      	ite	ne
 8006964:	2358      	movne	r3, #88	; 0x58
 8006966:	2378      	moveq	r3, #120	; 0x78
 8006968:	2d63      	cmp	r5, #99	; 0x63
 800696a:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 800696e:	f340 8111 	ble.w	8006b94 <_svfprintf_r+0x718>
 8006972:	1c69      	adds	r1, r5, #1
 8006974:	9807      	ldr	r0, [sp, #28]
 8006976:	f003 fd05 	bl	800a384 <_malloc_r>
 800697a:	4683      	mov	fp, r0
 800697c:	2800      	cmp	r0, #0
 800697e:	f040 810c 	bne.w	8006b9a <_svfprintf_r+0x71e>
 8006982:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800698a:	f8a9 300c 	strh.w	r3, [r9, #12]
 800698e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006992:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006996:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006998:	bf18      	it	ne
 800699a:	f04f 33ff 	movne.w	r3, #4294967295
 800699e:	e591      	b.n	80064c4 <_svfprintf_r+0x48>
 80069a0:	0800e99d 	.word	0x0800e99d
 80069a4:	7fefffff 	.word	0x7fefffff
 80069a8:	0800e980 	.word	0x0800e980
 80069ac:	0800e97c 	.word	0x0800e97c
 80069b0:	0800e988 	.word	0x0800e988
 80069b4:	0800e984 	.word	0x0800e984
 80069b8:	1c69      	adds	r1, r5, #1
 80069ba:	f000 80f0 	beq.w	8006b9e <_svfprintf_r+0x722>
 80069be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069c0:	2b47      	cmp	r3, #71	; 0x47
 80069c2:	d102      	bne.n	80069ca <_svfprintf_r+0x54e>
 80069c4:	2d00      	cmp	r5, #0
 80069c6:	f000 80ec 	beq.w	8006ba2 <_svfprintf_r+0x726>
 80069ca:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 80069ce:	9315      	str	r3, [sp, #84]	; 0x54
 80069d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069d2:	1e1e      	subs	r6, r3, #0
 80069d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069d6:	9308      	str	r3, [sp, #32]
 80069d8:	bfb7      	itett	lt
 80069da:	4633      	movlt	r3, r6
 80069dc:	2300      	movge	r3, #0
 80069de:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 80069e2:	232d      	movlt	r3, #45	; 0x2d
 80069e4:	9319      	str	r3, [sp, #100]	; 0x64
 80069e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e8:	2b41      	cmp	r3, #65	; 0x41
 80069ea:	f040 80eb 	bne.w	8006bc4 <_svfprintf_r+0x748>
 80069ee:	aa22      	add	r2, sp, #136	; 0x88
 80069f0:	9808      	ldr	r0, [sp, #32]
 80069f2:	4631      	mov	r1, r6
 80069f4:	f004 fb98 	bl	800b128 <frexp>
 80069f8:	2200      	movs	r2, #0
 80069fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80069fe:	f7f9 fd6b 	bl	80004d8 <__aeabi_dmul>
 8006a02:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006a06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a0a:	f7f9 ffcd 	bl	80009a8 <__aeabi_dcmpeq>
 8006a0e:	b108      	cbz	r0, 8006a14 <_svfprintf_r+0x598>
 8006a10:	2301      	movs	r3, #1
 8006a12:	9322      	str	r3, [sp, #136]	; 0x88
 8006a14:	4fac      	ldr	r7, [pc, #688]	; (8006cc8 <_svfprintf_r+0x84c>)
 8006a16:	4bad      	ldr	r3, [pc, #692]	; (8006ccc <_svfprintf_r+0x850>)
 8006a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a1a:	465e      	mov	r6, fp
 8006a1c:	2a61      	cmp	r2, #97	; 0x61
 8006a1e:	bf08      	it	eq
 8006a20:	461f      	moveq	r7, r3
 8006a22:	9712      	str	r7, [sp, #72]	; 0x48
 8006a24:	1e6f      	subs	r7, r5, #1
 8006a26:	2200      	movs	r2, #0
 8006a28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a2c:	4ba8      	ldr	r3, [pc, #672]	; (8006cd0 <_svfprintf_r+0x854>)
 8006a2e:	f7f9 fd53 	bl	80004d8 <__aeabi_dmul>
 8006a32:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a36:	f7f9 ffff 	bl	8000a38 <__aeabi_d2iz>
 8006a3a:	901e      	str	r0, [sp, #120]	; 0x78
 8006a3c:	f7f9 fce2 	bl	8000404 <__aeabi_i2d>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a48:	f7f9 fb8e 	bl	8000168 <__aeabi_dsub>
 8006a4c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a54:	5c9b      	ldrb	r3, [r3, r2]
 8006a56:	1c7a      	adds	r2, r7, #1
 8006a58:	f806 3b01 	strb.w	r3, [r6], #1
 8006a5c:	971f      	str	r7, [sp, #124]	; 0x7c
 8006a5e:	d006      	beq.n	8006a6e <_svfprintf_r+0x5f2>
 8006a60:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006a64:	3f01      	subs	r7, #1
 8006a66:	f7f9 ff9f 	bl	80009a8 <__aeabi_dcmpeq>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d0db      	beq.n	8006a26 <_svfprintf_r+0x5aa>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a74:	4b97      	ldr	r3, [pc, #604]	; (8006cd4 <_svfprintf_r+0x858>)
 8006a76:	f7f9 ffbf 	bl	80009f8 <__aeabi_dcmpgt>
 8006a7a:	b960      	cbnz	r0, 8006a96 <_svfprintf_r+0x61a>
 8006a7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a80:	2200      	movs	r2, #0
 8006a82:	4b94      	ldr	r3, [pc, #592]	; (8006cd4 <_svfprintf_r+0x858>)
 8006a84:	f7f9 ff90 	bl	80009a8 <__aeabi_dcmpeq>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	f000 8096 	beq.w	8006bba <_svfprintf_r+0x73e>
 8006a8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a90:	07db      	lsls	r3, r3, #31
 8006a92:	f140 8092 	bpl.w	8006bba <_svfprintf_r+0x73e>
 8006a96:	2030      	movs	r0, #48	; 0x30
 8006a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a9a:	9626      	str	r6, [sp, #152]	; 0x98
 8006a9c:	7bd9      	ldrb	r1, [r3, #15]
 8006a9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006aa0:	1e53      	subs	r3, r2, #1
 8006aa2:	9326      	str	r3, [sp, #152]	; 0x98
 8006aa4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	d07d      	beq.n	8006ba8 <_svfprintf_r+0x72c>
 8006aac:	2b39      	cmp	r3, #57	; 0x39
 8006aae:	bf0b      	itete	eq
 8006ab0:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 8006ab2:	3301      	addne	r3, #1
 8006ab4:	7a9b      	ldrbeq	r3, [r3, #10]
 8006ab6:	b2db      	uxtbne	r3, r3
 8006ab8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006abc:	4633      	mov	r3, r6
 8006abe:	eba3 030b 	sub.w	r3, r3, fp
 8006ac2:	9308      	str	r3, [sp, #32]
 8006ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006ac8:	2b47      	cmp	r3, #71	; 0x47
 8006aca:	f040 80c7 	bne.w	8006c5c <_svfprintf_r+0x7e0>
 8006ace:	1cf7      	adds	r7, r6, #3
 8006ad0:	db02      	blt.n	8006ad8 <_svfprintf_r+0x65c>
 8006ad2:	42b5      	cmp	r5, r6
 8006ad4:	f280 80ed 	bge.w	8006cb2 <_svfprintf_r+0x836>
 8006ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ada:	3b02      	subs	r3, #2
 8006adc:	930a      	str	r3, [sp, #40]	; 0x28
 8006ade:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ae0:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8006ae4:	f021 0120 	bic.w	r1, r1, #32
 8006ae8:	2941      	cmp	r1, #65	; 0x41
 8006aea:	bf08      	it	eq
 8006aec:	320f      	addeq	r2, #15
 8006aee:	f106 33ff 	add.w	r3, r6, #4294967295
 8006af2:	bf06      	itte	eq
 8006af4:	b2d2      	uxtbeq	r2, r2
 8006af6:	2101      	moveq	r1, #1
 8006af8:	2100      	movne	r1, #0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8006b00:	bfb4      	ite	lt
 8006b02:	222d      	movlt	r2, #45	; 0x2d
 8006b04:	222b      	movge	r2, #43	; 0x2b
 8006b06:	9322      	str	r3, [sp, #136]	; 0x88
 8006b08:	bfb8      	it	lt
 8006b0a:	f1c6 0301 	rsblt	r3, r6, #1
 8006b0e:	2b09      	cmp	r3, #9
 8006b10:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8006b14:	f340 80b9 	ble.w	8006c8a <_svfprintf_r+0x80e>
 8006b18:	250a      	movs	r5, #10
 8006b1a:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8006b1e:	fb93 f0f5 	sdiv	r0, r3, r5
 8006b22:	fb05 3310 	mls	r3, r5, r0, r3
 8006b26:	2809      	cmp	r0, #9
 8006b28:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8006b2c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b30:	f102 31ff 	add.w	r1, r2, #4294967295
 8006b34:	4603      	mov	r3, r0
 8006b36:	f300 80a1 	bgt.w	8006c7c <_svfprintf_r+0x800>
 8006b3a:	3330      	adds	r3, #48	; 0x30
 8006b3c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006b40:	3a02      	subs	r2, #2
 8006b42:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8006b46:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8006b4a:	4282      	cmp	r2, r0
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	f0c0 8097 	bcc.w	8006c80 <_svfprintf_r+0x804>
 8006b52:	9a08      	ldr	r2, [sp, #32]
 8006b54:	ab24      	add	r3, sp, #144	; 0x90
 8006b56:	1acb      	subs	r3, r1, r3
 8006b58:	2a01      	cmp	r2, #1
 8006b5a:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b5c:	eb03 0502 	add.w	r5, r3, r2
 8006b60:	dc02      	bgt.n	8006b68 <_svfprintf_r+0x6ec>
 8006b62:	f01a 0f01 	tst.w	sl, #1
 8006b66:	d001      	beq.n	8006b6c <_svfprintf_r+0x6f0>
 8006b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b6a:	441d      	add	r5, r3
 8006b6c:	2700      	movs	r7, #0
 8006b6e:	463e      	mov	r6, r7
 8006b70:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8006b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b78:	9315      	str	r3, [sp, #84]	; 0x54
 8006b7a:	970b      	str	r7, [sp, #44]	; 0x2c
 8006b7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 830b 	beq.w	800719a <_svfprintf_r+0xd1e>
 8006b84:	232d      	movs	r3, #45	; 0x2d
 8006b86:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8006b90:	9312      	str	r3, [sp, #72]	; 0x48
 8006b92:	e158      	b.n	8006e46 <_svfprintf_r+0x9ca>
 8006b94:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8006b98:	e717      	b.n	80069ca <_svfprintf_r+0x54e>
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	e715      	b.n	80069ca <_svfprintf_r+0x54e>
 8006b9e:	2506      	movs	r5, #6
 8006ba0:	e713      	b.n	80069ca <_svfprintf_r+0x54e>
 8006ba2:	46a8      	mov	r8, r5
 8006ba4:	2501      	movs	r5, #1
 8006ba6:	e710      	b.n	80069ca <_svfprintf_r+0x54e>
 8006ba8:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006bac:	e777      	b.n	8006a9e <_svfprintf_r+0x622>
 8006bae:	f803 1b01 	strb.w	r1, [r3], #1
 8006bb2:	1af2      	subs	r2, r6, r3
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	dafa      	bge.n	8006bae <_svfprintf_r+0x732>
 8006bb8:	e781      	b.n	8006abe <_svfprintf_r+0x642>
 8006bba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006bbc:	4633      	mov	r3, r6
 8006bbe:	2130      	movs	r1, #48	; 0x30
 8006bc0:	4416      	add	r6, r2
 8006bc2:	e7f6      	b.n	8006bb2 <_svfprintf_r+0x736>
 8006bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc6:	2b46      	cmp	r3, #70	; 0x46
 8006bc8:	d004      	beq.n	8006bd4 <_svfprintf_r+0x758>
 8006bca:	2b45      	cmp	r3, #69	; 0x45
 8006bcc:	d140      	bne.n	8006c50 <_svfprintf_r+0x7d4>
 8006bce:	1c6f      	adds	r7, r5, #1
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e001      	b.n	8006bd8 <_svfprintf_r+0x75c>
 8006bd4:	462f      	mov	r7, r5
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	aa26      	add	r2, sp, #152	; 0x98
 8006bda:	9204      	str	r2, [sp, #16]
 8006bdc:	aa23      	add	r2, sp, #140	; 0x8c
 8006bde:	9203      	str	r2, [sp, #12]
 8006be0:	aa22      	add	r2, sp, #136	; 0x88
 8006be2:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	9a08      	ldr	r2, [sp, #32]
 8006bea:	4633      	mov	r3, r6
 8006bec:	9807      	ldr	r0, [sp, #28]
 8006bee:	f002 f9ef 	bl	8008fd0 <_dtoa_r>
 8006bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bf4:	4683      	mov	fp, r0
 8006bf6:	2b47      	cmp	r3, #71	; 0x47
 8006bf8:	d102      	bne.n	8006c00 <_svfprintf_r+0x784>
 8006bfa:	f01a 0f01 	tst.w	sl, #1
 8006bfe:	d02b      	beq.n	8006c58 <_svfprintf_r+0x7dc>
 8006c00:	eb0b 0307 	add.w	r3, fp, r7
 8006c04:	9312      	str	r3, [sp, #72]	; 0x48
 8006c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c08:	2b46      	cmp	r3, #70	; 0x46
 8006c0a:	d111      	bne.n	8006c30 <_svfprintf_r+0x7b4>
 8006c0c:	f89b 3000 	ldrb.w	r3, [fp]
 8006c10:	2b30      	cmp	r3, #48	; 0x30
 8006c12:	d109      	bne.n	8006c28 <_svfprintf_r+0x7ac>
 8006c14:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006c18:	9808      	ldr	r0, [sp, #32]
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	f7f9 fec4 	bl	80009a8 <__aeabi_dcmpeq>
 8006c20:	b910      	cbnz	r0, 8006c28 <_svfprintf_r+0x7ac>
 8006c22:	f1c7 0701 	rsb	r7, r7, #1
 8006c26:	9722      	str	r7, [sp, #136]	; 0x88
 8006c28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c2c:	441a      	add	r2, r3
 8006c2e:	9212      	str	r2, [sp, #72]	; 0x48
 8006c30:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006c34:	9808      	ldr	r0, [sp, #32]
 8006c36:	4631      	mov	r1, r6
 8006c38:	f7f9 feb6 	bl	80009a8 <__aeabi_dcmpeq>
 8006c3c:	b950      	cbnz	r0, 8006c54 <_svfprintf_r+0x7d8>
 8006c3e:	2230      	movs	r2, #48	; 0x30
 8006c40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c42:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006c44:	4299      	cmp	r1, r3
 8006c46:	d907      	bls.n	8006c58 <_svfprintf_r+0x7dc>
 8006c48:	1c59      	adds	r1, r3, #1
 8006c4a:	9126      	str	r1, [sp, #152]	; 0x98
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e7f7      	b.n	8006c40 <_svfprintf_r+0x7c4>
 8006c50:	462f      	mov	r7, r5
 8006c52:	e7bd      	b.n	8006bd0 <_svfprintf_r+0x754>
 8006c54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c56:	9326      	str	r3, [sp, #152]	; 0x98
 8006c58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c5a:	e730      	b.n	8006abe <_svfprintf_r+0x642>
 8006c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c5e:	2b46      	cmp	r3, #70	; 0x46
 8006c60:	f47f af3d 	bne.w	8006ade <_svfprintf_r+0x662>
 8006c64:	2e00      	cmp	r6, #0
 8006c66:	dd1d      	ble.n	8006ca4 <_svfprintf_r+0x828>
 8006c68:	b915      	cbnz	r5, 8006c70 <_svfprintf_r+0x7f4>
 8006c6a:	f01a 0f01 	tst.w	sl, #1
 8006c6e:	d03d      	beq.n	8006cec <_svfprintf_r+0x870>
 8006c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c72:	18f3      	adds	r3, r6, r3
 8006c74:	441d      	add	r5, r3
 8006c76:	2366      	movs	r3, #102	; 0x66
 8006c78:	930a      	str	r3, [sp, #40]	; 0x28
 8006c7a:	e03c      	b.n	8006cf6 <_svfprintf_r+0x87a>
 8006c7c:	460a      	mov	r2, r1
 8006c7e:	e74e      	b.n	8006b1e <_svfprintf_r+0x6a2>
 8006c80:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006c84:	f803 1b01 	strb.w	r1, [r3], #1
 8006c88:	e75f      	b.n	8006b4a <_svfprintf_r+0x6ce>
 8006c8a:	b941      	cbnz	r1, 8006c9e <_svfprintf_r+0x822>
 8006c8c:	2230      	movs	r2, #48	; 0x30
 8006c8e:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 8006c92:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 8006c96:	3330      	adds	r3, #48	; 0x30
 8006c98:	1c51      	adds	r1, r2, #1
 8006c9a:	7013      	strb	r3, [r2, #0]
 8006c9c:	e759      	b.n	8006b52 <_svfprintf_r+0x6d6>
 8006c9e:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8006ca2:	e7f8      	b.n	8006c96 <_svfprintf_r+0x81a>
 8006ca4:	b915      	cbnz	r5, 8006cac <_svfprintf_r+0x830>
 8006ca6:	f01a 0f01 	tst.w	sl, #1
 8006caa:	d021      	beq.n	8006cf0 <_svfprintf_r+0x874>
 8006cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cae:	3301      	adds	r3, #1
 8006cb0:	e7e0      	b.n	8006c74 <_svfprintf_r+0x7f8>
 8006cb2:	9b08      	ldr	r3, [sp, #32]
 8006cb4:	42b3      	cmp	r3, r6
 8006cb6:	dc0f      	bgt.n	8006cd8 <_svfprintf_r+0x85c>
 8006cb8:	f01a 0f01 	tst.w	sl, #1
 8006cbc:	d02e      	beq.n	8006d1c <_svfprintf_r+0x8a0>
 8006cbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cc0:	18f5      	adds	r5, r6, r3
 8006cc2:	2367      	movs	r3, #103	; 0x67
 8006cc4:	e7d8      	b.n	8006c78 <_svfprintf_r+0x7fc>
 8006cc6:	bf00      	nop
 8006cc8:	0800e99d 	.word	0x0800e99d
 8006ccc:	0800e98c 	.word	0x0800e98c
 8006cd0:	40300000 	.word	0x40300000
 8006cd4:	3fe00000 	.word	0x3fe00000
 8006cd8:	9b08      	ldr	r3, [sp, #32]
 8006cda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006cdc:	2e00      	cmp	r6, #0
 8006cde:	eb03 0502 	add.w	r5, r3, r2
 8006ce2:	dcee      	bgt.n	8006cc2 <_svfprintf_r+0x846>
 8006ce4:	f1c6 0301 	rsb	r3, r6, #1
 8006ce8:	441d      	add	r5, r3
 8006cea:	e7ea      	b.n	8006cc2 <_svfprintf_r+0x846>
 8006cec:	4635      	mov	r5, r6
 8006cee:	e7c2      	b.n	8006c76 <_svfprintf_r+0x7fa>
 8006cf0:	2366      	movs	r3, #102	; 0x66
 8006cf2:	2501      	movs	r5, #1
 8006cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8006cf6:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8006cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cfc:	d01f      	beq.n	8006d3e <_svfprintf_r+0x8c2>
 8006cfe:	2700      	movs	r7, #0
 8006d00:	2e00      	cmp	r6, #0
 8006d02:	970b      	str	r7, [sp, #44]	; 0x2c
 8006d04:	f77f af3a 	ble.w	8006b7c <_svfprintf_r+0x700>
 8006d08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2bff      	cmp	r3, #255	; 0xff
 8006d0e:	d107      	bne.n	8006d20 <_svfprintf_r+0x8a4>
 8006d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d14:	443b      	add	r3, r7
 8006d16:	fb02 5503 	mla	r5, r2, r3, r5
 8006d1a:	e72f      	b.n	8006b7c <_svfprintf_r+0x700>
 8006d1c:	4635      	mov	r5, r6
 8006d1e:	e7d0      	b.n	8006cc2 <_svfprintf_r+0x846>
 8006d20:	42b3      	cmp	r3, r6
 8006d22:	daf5      	bge.n	8006d10 <_svfprintf_r+0x894>
 8006d24:	1af6      	subs	r6, r6, r3
 8006d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d28:	785b      	ldrb	r3, [r3, #1]
 8006d2a:	b133      	cbz	r3, 8006d3a <_svfprintf_r+0x8be>
 8006d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d2e:	3301      	adds	r3, #1
 8006d30:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d34:	3301      	adds	r3, #1
 8006d36:	930d      	str	r3, [sp, #52]	; 0x34
 8006d38:	e7e6      	b.n	8006d08 <_svfprintf_r+0x88c>
 8006d3a:	3701      	adds	r7, #1
 8006d3c:	e7e4      	b.n	8006d08 <_svfprintf_r+0x88c>
 8006d3e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006d40:	e71c      	b.n	8006b7c <_svfprintf_r+0x700>
 8006d42:	4632      	mov	r2, r6
 8006d44:	f852 3b04 	ldr.w	r3, [r2], #4
 8006d48:	f01a 0f20 	tst.w	sl, #32
 8006d4c:	920c      	str	r2, [sp, #48]	; 0x30
 8006d4e:	d009      	beq.n	8006d64 <_svfprintf_r+0x8e8>
 8006d50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d52:	4610      	mov	r0, r2
 8006d54:	17d1      	asrs	r1, r2, #31
 8006d56:	e9c3 0100 	strd	r0, r1, [r3]
 8006d5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006d5c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8006d60:	f7ff bbc8 	b.w	80064f4 <_svfprintf_r+0x78>
 8006d64:	f01a 0f10 	tst.w	sl, #16
 8006d68:	d002      	beq.n	8006d70 <_svfprintf_r+0x8f4>
 8006d6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e7f4      	b.n	8006d5a <_svfprintf_r+0x8de>
 8006d70:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006d74:	d002      	beq.n	8006d7c <_svfprintf_r+0x900>
 8006d76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e7ee      	b.n	8006d5a <_svfprintf_r+0x8de>
 8006d7c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006d80:	d0f3      	beq.n	8006d6a <_svfprintf_r+0x8ee>
 8006d82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	e7e8      	b.n	8006d5a <_svfprintf_r+0x8de>
 8006d88:	f04a 0a10 	orr.w	sl, sl, #16
 8006d8c:	f01a 0f20 	tst.w	sl, #32
 8006d90:	d01e      	beq.n	8006dd0 <_svfprintf_r+0x954>
 8006d92:	3607      	adds	r6, #7
 8006d94:	f026 0607 	bic.w	r6, r6, #7
 8006d98:	f106 0308 	add.w	r3, r6, #8
 8006d9c:	930c      	str	r3, [sp, #48]	; 0x30
 8006d9e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8006da2:	2300      	movs	r3, #0
 8006da4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8006da8:	2200      	movs	r2, #0
 8006daa:	1c69      	adds	r1, r5, #1
 8006dac:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8006db0:	f000 8158 	beq.w	8007064 <_svfprintf_r+0xbe8>
 8006db4:	4652      	mov	r2, sl
 8006db6:	ea56 0107 	orrs.w	r1, r6, r7
 8006dba:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8006dbe:	f040 8151 	bne.w	8007064 <_svfprintf_r+0xbe8>
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	f000 81d3 	beq.w	800716e <_svfprintf_r+0xcf2>
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	f040 814e 	bne.w	800706a <_svfprintf_r+0xbee>
 8006dce:	e55a      	b.n	8006886 <_svfprintf_r+0x40a>
 8006dd0:	1d33      	adds	r3, r6, #4
 8006dd2:	f01a 0f10 	tst.w	sl, #16
 8006dd6:	930c      	str	r3, [sp, #48]	; 0x30
 8006dd8:	d001      	beq.n	8006dde <_svfprintf_r+0x962>
 8006dda:	6836      	ldr	r6, [r6, #0]
 8006ddc:	e003      	b.n	8006de6 <_svfprintf_r+0x96a>
 8006dde:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006de2:	d002      	beq.n	8006dea <_svfprintf_r+0x96e>
 8006de4:	8836      	ldrh	r6, [r6, #0]
 8006de6:	2700      	movs	r7, #0
 8006de8:	e7db      	b.n	8006da2 <_svfprintf_r+0x926>
 8006dea:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006dee:	d0f4      	beq.n	8006dda <_svfprintf_r+0x95e>
 8006df0:	7836      	ldrb	r6, [r6, #0]
 8006df2:	e7f8      	b.n	8006de6 <_svfprintf_r+0x96a>
 8006df4:	1d33      	adds	r3, r6, #4
 8006df6:	930c      	str	r3, [sp, #48]	; 0x30
 8006df8:	f647 0330 	movw	r3, #30768	; 0x7830
 8006dfc:	2278      	movs	r2, #120	; 0x78
 8006dfe:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8006e02:	4baf      	ldr	r3, [pc, #700]	; (80070c0 <_svfprintf_r+0xc44>)
 8006e04:	6836      	ldr	r6, [r6, #0]
 8006e06:	931c      	str	r3, [sp, #112]	; 0x70
 8006e08:	2700      	movs	r7, #0
 8006e0a:	f04a 0a02 	orr.w	sl, sl, #2
 8006e0e:	2302      	movs	r3, #2
 8006e10:	920a      	str	r2, [sp, #40]	; 0x28
 8006e12:	e7c9      	b.n	8006da8 <_svfprintf_r+0x92c>
 8006e14:	1d33      	adds	r3, r6, #4
 8006e16:	f8d6 b000 	ldr.w	fp, [r6]
 8006e1a:	2600      	movs	r6, #0
 8006e1c:	1c68      	adds	r0, r5, #1
 8006e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e20:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 8006e24:	f000 80de 	beq.w	8006fe4 <_svfprintf_r+0xb68>
 8006e28:	462a      	mov	r2, r5
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4658      	mov	r0, fp
 8006e2e:	f003 fcdf 	bl	800a7f0 <memchr>
 8006e32:	4680      	mov	r8, r0
 8006e34:	2800      	cmp	r0, #0
 8006e36:	f43f ad73 	beq.w	8006920 <_svfprintf_r+0x4a4>
 8006e3a:	46b0      	mov	r8, r6
 8006e3c:	4637      	mov	r7, r6
 8006e3e:	eba0 050b 	sub.w	r5, r0, fp
 8006e42:	9612      	str	r6, [sp, #72]	; 0x48
 8006e44:	960b      	str	r6, [sp, #44]	; 0x2c
 8006e46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e48:	42ab      	cmp	r3, r5
 8006e4a:	bfb8      	it	lt
 8006e4c:	462b      	movlt	r3, r5
 8006e4e:	9315      	str	r3, [sp, #84]	; 0x54
 8006e50:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8006e54:	b113      	cbz	r3, 8006e5c <_svfprintf_r+0x9e0>
 8006e56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e58:	3301      	adds	r3, #1
 8006e5a:	9315      	str	r3, [sp, #84]	; 0x54
 8006e5c:	f01a 0302 	ands.w	r3, sl, #2
 8006e60:	931e      	str	r3, [sp, #120]	; 0x78
 8006e62:	bf1e      	ittt	ne
 8006e64:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8006e66:	3302      	addne	r3, #2
 8006e68:	9315      	strne	r3, [sp, #84]	; 0x54
 8006e6a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8006e6e:	931f      	str	r3, [sp, #124]	; 0x7c
 8006e70:	d121      	bne.n	8006eb6 <_svfprintf_r+0xa3a>
 8006e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e76:	1a9b      	subs	r3, r3, r2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	9319      	str	r3, [sp, #100]	; 0x64
 8006e7c:	dd1b      	ble.n	8006eb6 <_svfprintf_r+0xa3a>
 8006e7e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006e82:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006e84:	3201      	adds	r2, #1
 8006e86:	2810      	cmp	r0, #16
 8006e88:	488e      	ldr	r0, [pc, #568]	; (80070c4 <_svfprintf_r+0xc48>)
 8006e8a:	f104 0108 	add.w	r1, r4, #8
 8006e8e:	6020      	str	r0, [r4, #0]
 8006e90:	f300 8187 	bgt.w	80071a2 <_svfprintf_r+0xd26>
 8006e94:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006e96:	2a07      	cmp	r2, #7
 8006e98:	4403      	add	r3, r0
 8006e9a:	6060      	str	r0, [r4, #4]
 8006e9c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006ea0:	f340 8194 	ble.w	80071cc <_svfprintf_r+0xd50>
 8006ea4:	aa28      	add	r2, sp, #160	; 0xa0
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	9807      	ldr	r0, [sp, #28]
 8006eaa:	f004 f9d7 	bl	800b25c <__ssprint_r>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f040 84c0 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8006eb4:	ac2b      	add	r4, sp, #172	; 0xac
 8006eb6:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8006eba:	b173      	cbz	r3, 8006eda <_svfprintf_r+0xa5e>
 8006ebc:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	6063      	str	r3, [r4, #4]
 8006ec6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006ec8:	3301      	adds	r3, #1
 8006eca:	932a      	str	r3, [sp, #168]	; 0xa8
 8006ecc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006ece:	3301      	adds	r3, #1
 8006ed0:	2b07      	cmp	r3, #7
 8006ed2:	9329      	str	r3, [sp, #164]	; 0xa4
 8006ed4:	f300 817c 	bgt.w	80071d0 <_svfprintf_r+0xd54>
 8006ed8:	3408      	adds	r4, #8
 8006eda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006edc:	b16b      	cbz	r3, 8006efa <_svfprintf_r+0xa7e>
 8006ede:	ab21      	add	r3, sp, #132	; 0x84
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	6063      	str	r3, [r4, #4]
 8006ee6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006ee8:	3302      	adds	r3, #2
 8006eea:	932a      	str	r3, [sp, #168]	; 0xa8
 8006eec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006eee:	3301      	adds	r3, #1
 8006ef0:	2b07      	cmp	r3, #7
 8006ef2:	9329      	str	r3, [sp, #164]	; 0xa4
 8006ef4:	f300 8176 	bgt.w	80071e4 <_svfprintf_r+0xd68>
 8006ef8:	3408      	adds	r4, #8
 8006efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006efc:	2b80      	cmp	r3, #128	; 0x80
 8006efe:	d121      	bne.n	8006f44 <_svfprintf_r+0xac8>
 8006f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	9319      	str	r3, [sp, #100]	; 0x64
 8006f0a:	dd1b      	ble.n	8006f44 <_svfprintf_r+0xac8>
 8006f0c:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006f10:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006f12:	3201      	adds	r2, #1
 8006f14:	2810      	cmp	r0, #16
 8006f16:	486c      	ldr	r0, [pc, #432]	; (80070c8 <_svfprintf_r+0xc4c>)
 8006f18:	f104 0108 	add.w	r1, r4, #8
 8006f1c:	6020      	str	r0, [r4, #0]
 8006f1e:	f300 816b 	bgt.w	80071f8 <_svfprintf_r+0xd7c>
 8006f22:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006f24:	2a07      	cmp	r2, #7
 8006f26:	4403      	add	r3, r0
 8006f28:	6060      	str	r0, [r4, #4]
 8006f2a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006f2e:	f340 8178 	ble.w	8007222 <_svfprintf_r+0xda6>
 8006f32:	aa28      	add	r2, sp, #160	; 0xa0
 8006f34:	4649      	mov	r1, r9
 8006f36:	9807      	ldr	r0, [sp, #28]
 8006f38:	f004 f990 	bl	800b25c <__ssprint_r>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f040 8479 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8006f42:	ac2b      	add	r4, sp, #172	; 0xac
 8006f44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f46:	1b5b      	subs	r3, r3, r5
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f4c:	dd1b      	ble.n	8006f86 <_svfprintf_r+0xb0a>
 8006f4e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006f52:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f54:	3201      	adds	r2, #1
 8006f56:	2810      	cmp	r0, #16
 8006f58:	485b      	ldr	r0, [pc, #364]	; (80070c8 <_svfprintf_r+0xc4c>)
 8006f5a:	f104 0108 	add.w	r1, r4, #8
 8006f5e:	6020      	str	r0, [r4, #0]
 8006f60:	f300 8161 	bgt.w	8007226 <_svfprintf_r+0xdaa>
 8006f64:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f66:	2a07      	cmp	r2, #7
 8006f68:	4403      	add	r3, r0
 8006f6a:	6060      	str	r0, [r4, #4]
 8006f6c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006f70:	f340 816e 	ble.w	8007250 <_svfprintf_r+0xdd4>
 8006f74:	aa28      	add	r2, sp, #160	; 0xa0
 8006f76:	4649      	mov	r1, r9
 8006f78:	9807      	ldr	r0, [sp, #28]
 8006f7a:	f004 f96f 	bl	800b25c <__ssprint_r>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f040 8458 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8006f84:	ac2b      	add	r4, sp, #172	; 0xac
 8006f86:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006f88:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006f8c:	9312      	str	r3, [sp, #72]	; 0x48
 8006f8e:	f040 8161 	bne.w	8007254 <_svfprintf_r+0xdd8>
 8006f92:	e9c4 b500 	strd	fp, r5, [r4]
 8006f96:	441d      	add	r5, r3
 8006f98:	952a      	str	r5, [sp, #168]	; 0xa8
 8006f9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	2b07      	cmp	r3, #7
 8006fa0:	9329      	str	r3, [sp, #164]	; 0xa4
 8006fa2:	f300 819d 	bgt.w	80072e0 <_svfprintf_r+0xe64>
 8006fa6:	3408      	adds	r4, #8
 8006fa8:	f01a 0f04 	tst.w	sl, #4
 8006fac:	f040 8424 	bne.w	80077f8 <_svfprintf_r+0x137c>
 8006fb0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006fb4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006fb6:	428a      	cmp	r2, r1
 8006fb8:	bfac      	ite	ge
 8006fba:	189b      	addge	r3, r3, r2
 8006fbc:	185b      	addlt	r3, r3, r1
 8006fbe:	9310      	str	r3, [sp, #64]	; 0x40
 8006fc0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006fc2:	b13b      	cbz	r3, 8006fd4 <_svfprintf_r+0xb58>
 8006fc4:	aa28      	add	r2, sp, #160	; 0xa0
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	9807      	ldr	r0, [sp, #28]
 8006fca:	f004 f947 	bl	800b25c <__ssprint_r>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f040 8430 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	9329      	str	r3, [sp, #164]	; 0xa4
 8006fd8:	f1b8 0f00 	cmp.w	r8, #0
 8006fdc:	f040 8446 	bne.w	800786c <_svfprintf_r+0x13f0>
 8006fe0:	ac2b      	add	r4, sp, #172	; 0xac
 8006fe2:	e6ba      	b.n	8006d5a <_svfprintf_r+0x8de>
 8006fe4:	4658      	mov	r0, fp
 8006fe6:	f7f9 f8b3 	bl	8000150 <strlen>
 8006fea:	46b0      	mov	r8, r6
 8006fec:	4605      	mov	r5, r0
 8006fee:	e497      	b.n	8006920 <_svfprintf_r+0x4a4>
 8006ff0:	f04a 0a10 	orr.w	sl, sl, #16
 8006ff4:	f01a 0f20 	tst.w	sl, #32
 8006ff8:	d009      	beq.n	800700e <_svfprintf_r+0xb92>
 8006ffa:	3607      	adds	r6, #7
 8006ffc:	f026 0607 	bic.w	r6, r6, #7
 8007000:	f106 0308 	add.w	r3, r6, #8
 8007004:	930c      	str	r3, [sp, #48]	; 0x30
 8007006:	e9d6 6700 	ldrd	r6, r7, [r6]
 800700a:	2301      	movs	r3, #1
 800700c:	e6cc      	b.n	8006da8 <_svfprintf_r+0x92c>
 800700e:	1d33      	adds	r3, r6, #4
 8007010:	f01a 0f10 	tst.w	sl, #16
 8007014:	930c      	str	r3, [sp, #48]	; 0x30
 8007016:	d001      	beq.n	800701c <_svfprintf_r+0xba0>
 8007018:	6836      	ldr	r6, [r6, #0]
 800701a:	e003      	b.n	8007024 <_svfprintf_r+0xba8>
 800701c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007020:	d002      	beq.n	8007028 <_svfprintf_r+0xbac>
 8007022:	8836      	ldrh	r6, [r6, #0]
 8007024:	2700      	movs	r7, #0
 8007026:	e7f0      	b.n	800700a <_svfprintf_r+0xb8e>
 8007028:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800702c:	d0f4      	beq.n	8007018 <_svfprintf_r+0xb9c>
 800702e:	7836      	ldrb	r6, [r6, #0]
 8007030:	e7f8      	b.n	8007024 <_svfprintf_r+0xba8>
 8007032:	4b23      	ldr	r3, [pc, #140]	; (80070c0 <_svfprintf_r+0xc44>)
 8007034:	f7ff bb59 	b.w	80066ea <_svfprintf_r+0x26e>
 8007038:	1d33      	adds	r3, r6, #4
 800703a:	f01a 0f10 	tst.w	sl, #16
 800703e:	930c      	str	r3, [sp, #48]	; 0x30
 8007040:	d001      	beq.n	8007046 <_svfprintf_r+0xbca>
 8007042:	6836      	ldr	r6, [r6, #0]
 8007044:	e003      	b.n	800704e <_svfprintf_r+0xbd2>
 8007046:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800704a:	d003      	beq.n	8007054 <_svfprintf_r+0xbd8>
 800704c:	8836      	ldrh	r6, [r6, #0]
 800704e:	2700      	movs	r7, #0
 8007050:	f7ff bb58 	b.w	8006704 <_svfprintf_r+0x288>
 8007054:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007058:	d0f3      	beq.n	8007042 <_svfprintf_r+0xbc6>
 800705a:	7836      	ldrb	r6, [r6, #0]
 800705c:	e7f7      	b.n	800704e <_svfprintf_r+0xbd2>
 800705e:	4652      	mov	r2, sl
 8007060:	2301      	movs	r3, #1
 8007062:	e6a8      	b.n	8006db6 <_svfprintf_r+0x93a>
 8007064:	2b01      	cmp	r3, #1
 8007066:	f43f ac09 	beq.w	800687c <_svfprintf_r+0x400>
 800706a:	2b02      	cmp	r3, #2
 800706c:	d06d      	beq.n	800714a <_svfprintf_r+0xcce>
 800706e:	ab54      	add	r3, sp, #336	; 0x150
 8007070:	08f1      	lsrs	r1, r6, #3
 8007072:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8007076:	08f8      	lsrs	r0, r7, #3
 8007078:	f006 0207 	and.w	r2, r6, #7
 800707c:	4607      	mov	r7, r0
 800707e:	460e      	mov	r6, r1
 8007080:	3230      	adds	r2, #48	; 0x30
 8007082:	ea56 0107 	orrs.w	r1, r6, r7
 8007086:	f103 3bff 	add.w	fp, r3, #4294967295
 800708a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800708e:	d114      	bne.n	80070ba <_svfprintf_r+0xc3e>
 8007090:	f01a 0f01 	tst.w	sl, #1
 8007094:	d006      	beq.n	80070a4 <_svfprintf_r+0xc28>
 8007096:	2a30      	cmp	r2, #48	; 0x30
 8007098:	d004      	beq.n	80070a4 <_svfprintf_r+0xc28>
 800709a:	2230      	movs	r2, #48	; 0x30
 800709c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80070a0:	f1a3 0b02 	sub.w	fp, r3, #2
 80070a4:	f04f 0800 	mov.w	r8, #0
 80070a8:	ab54      	add	r3, sp, #336	; 0x150
 80070aa:	9512      	str	r5, [sp, #72]	; 0x48
 80070ac:	eba3 050b 	sub.w	r5, r3, fp
 80070b0:	4647      	mov	r7, r8
 80070b2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80070b6:	4646      	mov	r6, r8
 80070b8:	e6c5      	b.n	8006e46 <_svfprintf_r+0x9ca>
 80070ba:	465b      	mov	r3, fp
 80070bc:	e7d8      	b.n	8007070 <_svfprintf_r+0xbf4>
 80070be:	bf00      	nop
 80070c0:	0800e98c 	.word	0x0800e98c
 80070c4:	0800e9b0 	.word	0x0800e9b0
 80070c8:	0800e9c0 	.word	0x0800e9c0
 80070cc:	2300      	movs	r3, #0
 80070ce:	9308      	str	r3, [sp, #32]
 80070d0:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 80070d4:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 80070d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80070da:	220a      	movs	r2, #10
 80070dc:	2300      	movs	r3, #0
 80070de:	4630      	mov	r0, r6
 80070e0:	4639      	mov	r1, r7
 80070e2:	f7fa f88b 	bl	80011fc <__aeabi_uldivmod>
 80070e6:	9b08      	ldr	r3, [sp, #32]
 80070e8:	3230      	adds	r2, #48	; 0x30
 80070ea:	3301      	adds	r3, #1
 80070ec:	9308      	str	r3, [sp, #32]
 80070ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070f0:	f108 3bff 	add.w	fp, r8, #4294967295
 80070f4:	f808 2c01 	strb.w	r2, [r8, #-1]
 80070f8:	b1d3      	cbz	r3, 8007130 <_svfprintf_r+0xcb4>
 80070fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070fc:	9a08      	ldr	r2, [sp, #32]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d115      	bne.n	8007130 <_svfprintf_r+0xcb4>
 8007104:	2aff      	cmp	r2, #255	; 0xff
 8007106:	d013      	beq.n	8007130 <_svfprintf_r+0xcb4>
 8007108:	2f00      	cmp	r7, #0
 800710a:	bf08      	it	eq
 800710c:	2e0a      	cmpeq	r6, #10
 800710e:	d30f      	bcc.n	8007130 <_svfprintf_r+0xcb4>
 8007110:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007112:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007114:	ebab 0b03 	sub.w	fp, fp, r3
 8007118:	461a      	mov	r2, r3
 800711a:	4658      	mov	r0, fp
 800711c:	f004 f889 	bl	800b232 <strncpy>
 8007120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007122:	785b      	ldrb	r3, [r3, #1]
 8007124:	b11b      	cbz	r3, 800712e <_svfprintf_r+0xcb2>
 8007126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007128:	3301      	adds	r3, #1
 800712a:	930d      	str	r3, [sp, #52]	; 0x34
 800712c:	2300      	movs	r3, #0
 800712e:	9308      	str	r3, [sp, #32]
 8007130:	2300      	movs	r3, #0
 8007132:	4630      	mov	r0, r6
 8007134:	4639      	mov	r1, r7
 8007136:	220a      	movs	r2, #10
 8007138:	f7fa f860 	bl	80011fc <__aeabi_uldivmod>
 800713c:	4606      	mov	r6, r0
 800713e:	460f      	mov	r7, r1
 8007140:	ea56 0307 	orrs.w	r3, r6, r7
 8007144:	d0ae      	beq.n	80070a4 <_svfprintf_r+0xc28>
 8007146:	46d8      	mov	r8, fp
 8007148:	e7c7      	b.n	80070da <_svfprintf_r+0xc5e>
 800714a:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 800714e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007150:	f006 030f 	and.w	r3, r6, #15
 8007154:	5cd3      	ldrb	r3, [r2, r3]
 8007156:	093a      	lsrs	r2, r7, #4
 8007158:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800715c:	0933      	lsrs	r3, r6, #4
 800715e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8007162:	461e      	mov	r6, r3
 8007164:	4617      	mov	r7, r2
 8007166:	ea56 0307 	orrs.w	r3, r6, r7
 800716a:	d1f0      	bne.n	800714e <_svfprintf_r+0xcd2>
 800716c:	e79a      	b.n	80070a4 <_svfprintf_r+0xc28>
 800716e:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 8007172:	2b00      	cmp	r3, #0
 8007174:	d196      	bne.n	80070a4 <_svfprintf_r+0xc28>
 8007176:	07d2      	lsls	r2, r2, #31
 8007178:	bf44      	itt	mi
 800717a:	2330      	movmi	r3, #48	; 0x30
 800717c:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8007180:	e790      	b.n	80070a4 <_svfprintf_r+0xc28>
 8007182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8377 	beq.w	8007878 <_svfprintf_r+0x13fc>
 800718a:	2000      	movs	r0, #0
 800718c:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8007190:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8007194:	960c      	str	r6, [sp, #48]	; 0x30
 8007196:	f7ff bb4e 	b.w	8006836 <_svfprintf_r+0x3ba>
 800719a:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800719e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071a0:	e4f6      	b.n	8006b90 <_svfprintf_r+0x714>
 80071a2:	2010      	movs	r0, #16
 80071a4:	2a07      	cmp	r2, #7
 80071a6:	4403      	add	r3, r0
 80071a8:	6060      	str	r0, [r4, #4]
 80071aa:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80071ae:	dd08      	ble.n	80071c2 <_svfprintf_r+0xd46>
 80071b0:	aa28      	add	r2, sp, #160	; 0xa0
 80071b2:	4649      	mov	r1, r9
 80071b4:	9807      	ldr	r0, [sp, #28]
 80071b6:	f004 f851 	bl	800b25c <__ssprint_r>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	f040 833a 	bne.w	8007834 <_svfprintf_r+0x13b8>
 80071c0:	a92b      	add	r1, sp, #172	; 0xac
 80071c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071c4:	460c      	mov	r4, r1
 80071c6:	3b10      	subs	r3, #16
 80071c8:	9319      	str	r3, [sp, #100]	; 0x64
 80071ca:	e658      	b.n	8006e7e <_svfprintf_r+0xa02>
 80071cc:	460c      	mov	r4, r1
 80071ce:	e672      	b.n	8006eb6 <_svfprintf_r+0xa3a>
 80071d0:	aa28      	add	r2, sp, #160	; 0xa0
 80071d2:	4649      	mov	r1, r9
 80071d4:	9807      	ldr	r0, [sp, #28]
 80071d6:	f004 f841 	bl	800b25c <__ssprint_r>
 80071da:	2800      	cmp	r0, #0
 80071dc:	f040 832a 	bne.w	8007834 <_svfprintf_r+0x13b8>
 80071e0:	ac2b      	add	r4, sp, #172	; 0xac
 80071e2:	e67a      	b.n	8006eda <_svfprintf_r+0xa5e>
 80071e4:	aa28      	add	r2, sp, #160	; 0xa0
 80071e6:	4649      	mov	r1, r9
 80071e8:	9807      	ldr	r0, [sp, #28]
 80071ea:	f004 f837 	bl	800b25c <__ssprint_r>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	f040 8320 	bne.w	8007834 <_svfprintf_r+0x13b8>
 80071f4:	ac2b      	add	r4, sp, #172	; 0xac
 80071f6:	e680      	b.n	8006efa <_svfprintf_r+0xa7e>
 80071f8:	2010      	movs	r0, #16
 80071fa:	2a07      	cmp	r2, #7
 80071fc:	4403      	add	r3, r0
 80071fe:	6060      	str	r0, [r4, #4]
 8007200:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007204:	dd08      	ble.n	8007218 <_svfprintf_r+0xd9c>
 8007206:	aa28      	add	r2, sp, #160	; 0xa0
 8007208:	4649      	mov	r1, r9
 800720a:	9807      	ldr	r0, [sp, #28]
 800720c:	f004 f826 	bl	800b25c <__ssprint_r>
 8007210:	2800      	cmp	r0, #0
 8007212:	f040 830f 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007216:	a92b      	add	r1, sp, #172	; 0xac
 8007218:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800721a:	460c      	mov	r4, r1
 800721c:	3b10      	subs	r3, #16
 800721e:	9319      	str	r3, [sp, #100]	; 0x64
 8007220:	e674      	b.n	8006f0c <_svfprintf_r+0xa90>
 8007222:	460c      	mov	r4, r1
 8007224:	e68e      	b.n	8006f44 <_svfprintf_r+0xac8>
 8007226:	2010      	movs	r0, #16
 8007228:	2a07      	cmp	r2, #7
 800722a:	4403      	add	r3, r0
 800722c:	6060      	str	r0, [r4, #4]
 800722e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007232:	dd08      	ble.n	8007246 <_svfprintf_r+0xdca>
 8007234:	aa28      	add	r2, sp, #160	; 0xa0
 8007236:	4649      	mov	r1, r9
 8007238:	9807      	ldr	r0, [sp, #28]
 800723a:	f004 f80f 	bl	800b25c <__ssprint_r>
 800723e:	2800      	cmp	r0, #0
 8007240:	f040 82f8 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007244:	a92b      	add	r1, sp, #172	; 0xac
 8007246:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007248:	460c      	mov	r4, r1
 800724a:	3b10      	subs	r3, #16
 800724c:	9312      	str	r3, [sp, #72]	; 0x48
 800724e:	e67e      	b.n	8006f4e <_svfprintf_r+0xad2>
 8007250:	460c      	mov	r4, r1
 8007252:	e698      	b.n	8006f86 <_svfprintf_r+0xb0a>
 8007254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007256:	2b65      	cmp	r3, #101	; 0x65
 8007258:	f340 8234 	ble.w	80076c4 <_svfprintf_r+0x1248>
 800725c:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007260:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8007264:	f7f9 fba0 	bl	80009a8 <__aeabi_dcmpeq>
 8007268:	2800      	cmp	r0, #0
 800726a:	d069      	beq.n	8007340 <_svfprintf_r+0xec4>
 800726c:	4b6e      	ldr	r3, [pc, #440]	; (8007428 <_svfprintf_r+0xfac>)
 800726e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	2301      	movs	r3, #1
 8007274:	441d      	add	r5, r3
 8007276:	6063      	str	r3, [r4, #4]
 8007278:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800727a:	952a      	str	r5, [sp, #168]	; 0xa8
 800727c:	3301      	adds	r3, #1
 800727e:	2b07      	cmp	r3, #7
 8007280:	9329      	str	r3, [sp, #164]	; 0xa4
 8007282:	dc37      	bgt.n	80072f4 <_svfprintf_r+0xe78>
 8007284:	3408      	adds	r4, #8
 8007286:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007288:	9a08      	ldr	r2, [sp, #32]
 800728a:	4293      	cmp	r3, r2
 800728c:	db03      	blt.n	8007296 <_svfprintf_r+0xe1a>
 800728e:	f01a 0f01 	tst.w	sl, #1
 8007292:	f43f ae89 	beq.w	8006fa8 <_svfprintf_r+0xb2c>
 8007296:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800729a:	6023      	str	r3, [r4, #0]
 800729c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800729e:	6063      	str	r3, [r4, #4]
 80072a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80072a2:	4413      	add	r3, r2
 80072a4:	932a      	str	r3, [sp, #168]	; 0xa8
 80072a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80072a8:	3301      	adds	r3, #1
 80072aa:	2b07      	cmp	r3, #7
 80072ac:	9329      	str	r3, [sp, #164]	; 0xa4
 80072ae:	dc2b      	bgt.n	8007308 <_svfprintf_r+0xe8c>
 80072b0:	3408      	adds	r4, #8
 80072b2:	9b08      	ldr	r3, [sp, #32]
 80072b4:	1e5d      	subs	r5, r3, #1
 80072b6:	2d00      	cmp	r5, #0
 80072b8:	f77f ae76 	ble.w	8006fa8 <_svfprintf_r+0xb2c>
 80072bc:	2710      	movs	r7, #16
 80072be:	4e5b      	ldr	r6, [pc, #364]	; (800742c <_svfprintf_r+0xfb0>)
 80072c0:	2d10      	cmp	r5, #16
 80072c2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80072c6:	f104 0108 	add.w	r1, r4, #8
 80072ca:	f103 0301 	add.w	r3, r3, #1
 80072ce:	6026      	str	r6, [r4, #0]
 80072d0:	dc24      	bgt.n	800731c <_svfprintf_r+0xea0>
 80072d2:	6065      	str	r5, [r4, #4]
 80072d4:	2b07      	cmp	r3, #7
 80072d6:	4415      	add	r5, r2
 80072d8:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80072dc:	f340 8289 	ble.w	80077f2 <_svfprintf_r+0x1376>
 80072e0:	aa28      	add	r2, sp, #160	; 0xa0
 80072e2:	4649      	mov	r1, r9
 80072e4:	9807      	ldr	r0, [sp, #28]
 80072e6:	f003 ffb9 	bl	800b25c <__ssprint_r>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	f040 82a2 	bne.w	8007834 <_svfprintf_r+0x13b8>
 80072f0:	ac2b      	add	r4, sp, #172	; 0xac
 80072f2:	e659      	b.n	8006fa8 <_svfprintf_r+0xb2c>
 80072f4:	aa28      	add	r2, sp, #160	; 0xa0
 80072f6:	4649      	mov	r1, r9
 80072f8:	9807      	ldr	r0, [sp, #28]
 80072fa:	f003 ffaf 	bl	800b25c <__ssprint_r>
 80072fe:	2800      	cmp	r0, #0
 8007300:	f040 8298 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007304:	ac2b      	add	r4, sp, #172	; 0xac
 8007306:	e7be      	b.n	8007286 <_svfprintf_r+0xe0a>
 8007308:	aa28      	add	r2, sp, #160	; 0xa0
 800730a:	4649      	mov	r1, r9
 800730c:	9807      	ldr	r0, [sp, #28]
 800730e:	f003 ffa5 	bl	800b25c <__ssprint_r>
 8007312:	2800      	cmp	r0, #0
 8007314:	f040 828e 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007318:	ac2b      	add	r4, sp, #172	; 0xac
 800731a:	e7ca      	b.n	80072b2 <_svfprintf_r+0xe36>
 800731c:	3210      	adds	r2, #16
 800731e:	2b07      	cmp	r3, #7
 8007320:	6067      	str	r7, [r4, #4]
 8007322:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8007326:	dd08      	ble.n	800733a <_svfprintf_r+0xebe>
 8007328:	aa28      	add	r2, sp, #160	; 0xa0
 800732a:	4649      	mov	r1, r9
 800732c:	9807      	ldr	r0, [sp, #28]
 800732e:	f003 ff95 	bl	800b25c <__ssprint_r>
 8007332:	2800      	cmp	r0, #0
 8007334:	f040 827e 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007338:	a92b      	add	r1, sp, #172	; 0xac
 800733a:	3d10      	subs	r5, #16
 800733c:	460c      	mov	r4, r1
 800733e:	e7bf      	b.n	80072c0 <_svfprintf_r+0xe44>
 8007340:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007342:	2b00      	cmp	r3, #0
 8007344:	dc74      	bgt.n	8007430 <_svfprintf_r+0xfb4>
 8007346:	4b38      	ldr	r3, [pc, #224]	; (8007428 <_svfprintf_r+0xfac>)
 8007348:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	2301      	movs	r3, #1
 800734e:	441d      	add	r5, r3
 8007350:	6063      	str	r3, [r4, #4]
 8007352:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007354:	952a      	str	r5, [sp, #168]	; 0xa8
 8007356:	3301      	adds	r3, #1
 8007358:	2b07      	cmp	r3, #7
 800735a:	9329      	str	r3, [sp, #164]	; 0xa4
 800735c:	dc3e      	bgt.n	80073dc <_svfprintf_r+0xf60>
 800735e:	3408      	adds	r4, #8
 8007360:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007362:	b92b      	cbnz	r3, 8007370 <_svfprintf_r+0xef4>
 8007364:	9b08      	ldr	r3, [sp, #32]
 8007366:	b91b      	cbnz	r3, 8007370 <_svfprintf_r+0xef4>
 8007368:	f01a 0f01 	tst.w	sl, #1
 800736c:	f43f ae1c 	beq.w	8006fa8 <_svfprintf_r+0xb2c>
 8007370:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007372:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007378:	6063      	str	r3, [r4, #4]
 800737a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800737c:	4413      	add	r3, r2
 800737e:	932a      	str	r3, [sp, #168]	; 0xa8
 8007380:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007382:	3301      	adds	r3, #1
 8007384:	2b07      	cmp	r3, #7
 8007386:	9329      	str	r3, [sp, #164]	; 0xa4
 8007388:	dc32      	bgt.n	80073f0 <_svfprintf_r+0xf74>
 800738a:	3408      	adds	r4, #8
 800738c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800738e:	2d00      	cmp	r5, #0
 8007390:	da1b      	bge.n	80073ca <_svfprintf_r+0xf4e>
 8007392:	4623      	mov	r3, r4
 8007394:	2710      	movs	r7, #16
 8007396:	4e25      	ldr	r6, [pc, #148]	; (800742c <_svfprintf_r+0xfb0>)
 8007398:	426d      	negs	r5, r5
 800739a:	2d10      	cmp	r5, #16
 800739c:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 80073a0:	f104 0408 	add.w	r4, r4, #8
 80073a4:	f102 0201 	add.w	r2, r2, #1
 80073a8:	601e      	str	r6, [r3, #0]
 80073aa:	dc2b      	bgt.n	8007404 <_svfprintf_r+0xf88>
 80073ac:	605d      	str	r5, [r3, #4]
 80073ae:	2a07      	cmp	r2, #7
 80073b0:	440d      	add	r5, r1
 80073b2:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 80073b6:	dd08      	ble.n	80073ca <_svfprintf_r+0xf4e>
 80073b8:	aa28      	add	r2, sp, #160	; 0xa0
 80073ba:	4649      	mov	r1, r9
 80073bc:	9807      	ldr	r0, [sp, #28]
 80073be:	f003 ff4d 	bl	800b25c <__ssprint_r>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	f040 8236 	bne.w	8007834 <_svfprintf_r+0x13b8>
 80073c8:	ac2b      	add	r4, sp, #172	; 0xac
 80073ca:	9b08      	ldr	r3, [sp, #32]
 80073cc:	9a08      	ldr	r2, [sp, #32]
 80073ce:	6063      	str	r3, [r4, #4]
 80073d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80073d2:	f8c4 b000 	str.w	fp, [r4]
 80073d6:	4413      	add	r3, r2
 80073d8:	932a      	str	r3, [sp, #168]	; 0xa8
 80073da:	e5de      	b.n	8006f9a <_svfprintf_r+0xb1e>
 80073dc:	aa28      	add	r2, sp, #160	; 0xa0
 80073de:	4649      	mov	r1, r9
 80073e0:	9807      	ldr	r0, [sp, #28]
 80073e2:	f003 ff3b 	bl	800b25c <__ssprint_r>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f040 8224 	bne.w	8007834 <_svfprintf_r+0x13b8>
 80073ec:	ac2b      	add	r4, sp, #172	; 0xac
 80073ee:	e7b7      	b.n	8007360 <_svfprintf_r+0xee4>
 80073f0:	aa28      	add	r2, sp, #160	; 0xa0
 80073f2:	4649      	mov	r1, r9
 80073f4:	9807      	ldr	r0, [sp, #28]
 80073f6:	f003 ff31 	bl	800b25c <__ssprint_r>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	f040 821a 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007400:	ac2b      	add	r4, sp, #172	; 0xac
 8007402:	e7c3      	b.n	800738c <_svfprintf_r+0xf10>
 8007404:	3110      	adds	r1, #16
 8007406:	2a07      	cmp	r2, #7
 8007408:	605f      	str	r7, [r3, #4]
 800740a:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 800740e:	dd08      	ble.n	8007422 <_svfprintf_r+0xfa6>
 8007410:	aa28      	add	r2, sp, #160	; 0xa0
 8007412:	4649      	mov	r1, r9
 8007414:	9807      	ldr	r0, [sp, #28]
 8007416:	f003 ff21 	bl	800b25c <__ssprint_r>
 800741a:	2800      	cmp	r0, #0
 800741c:	f040 820a 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007420:	ac2b      	add	r4, sp, #172	; 0xac
 8007422:	3d10      	subs	r5, #16
 8007424:	4623      	mov	r3, r4
 8007426:	e7b8      	b.n	800739a <_svfprintf_r+0xf1e>
 8007428:	0800e9ae 	.word	0x0800e9ae
 800742c:	0800e9c0 	.word	0x0800e9c0
 8007430:	9b08      	ldr	r3, [sp, #32]
 8007432:	42b3      	cmp	r3, r6
 8007434:	bfa8      	it	ge
 8007436:	4633      	movge	r3, r6
 8007438:	2b00      	cmp	r3, #0
 800743a:	461d      	mov	r5, r3
 800743c:	dd0b      	ble.n	8007456 <_svfprintf_r+0xfda>
 800743e:	e9c4 b300 	strd	fp, r3, [r4]
 8007442:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007444:	442b      	add	r3, r5
 8007446:	932a      	str	r3, [sp, #168]	; 0xa8
 8007448:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800744a:	3301      	adds	r3, #1
 800744c:	2b07      	cmp	r3, #7
 800744e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007450:	f300 8086 	bgt.w	8007560 <_svfprintf_r+0x10e4>
 8007454:	3408      	adds	r4, #8
 8007456:	2d00      	cmp	r5, #0
 8007458:	bfb4      	ite	lt
 800745a:	4635      	movlt	r5, r6
 800745c:	1b75      	subge	r5, r6, r5
 800745e:	2d00      	cmp	r5, #0
 8007460:	dd19      	ble.n	8007496 <_svfprintf_r+0x101a>
 8007462:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8007466:	4896      	ldr	r0, [pc, #600]	; (80076c0 <_svfprintf_r+0x1244>)
 8007468:	2d10      	cmp	r5, #16
 800746a:	f103 0301 	add.w	r3, r3, #1
 800746e:	f104 0108 	add.w	r1, r4, #8
 8007472:	6020      	str	r0, [r4, #0]
 8007474:	dc7e      	bgt.n	8007574 <_svfprintf_r+0x10f8>
 8007476:	6065      	str	r5, [r4, #4]
 8007478:	2b07      	cmp	r3, #7
 800747a:	4415      	add	r5, r2
 800747c:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8007480:	f340 808b 	ble.w	800759a <_svfprintf_r+0x111e>
 8007484:	aa28      	add	r2, sp, #160	; 0xa0
 8007486:	4649      	mov	r1, r9
 8007488:	9807      	ldr	r0, [sp, #28]
 800748a:	f003 fee7 	bl	800b25c <__ssprint_r>
 800748e:	2800      	cmp	r0, #0
 8007490:	f040 81d0 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007494:	ac2b      	add	r4, sp, #172	; 0xac
 8007496:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800749a:	445e      	add	r6, fp
 800749c:	d009      	beq.n	80074b2 <_svfprintf_r+0x1036>
 800749e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d17c      	bne.n	800759e <_svfprintf_r+0x1122>
 80074a4:	2f00      	cmp	r7, #0
 80074a6:	d17c      	bne.n	80075a2 <_svfprintf_r+0x1126>
 80074a8:	9b08      	ldr	r3, [sp, #32]
 80074aa:	445b      	add	r3, fp
 80074ac:	429e      	cmp	r6, r3
 80074ae:	bf28      	it	cs
 80074b0:	461e      	movcs	r6, r3
 80074b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074b4:	9a08      	ldr	r2, [sp, #32]
 80074b6:	4293      	cmp	r3, r2
 80074b8:	db02      	blt.n	80074c0 <_svfprintf_r+0x1044>
 80074ba:	f01a 0f01 	tst.w	sl, #1
 80074be:	d00e      	beq.n	80074de <_svfprintf_r+0x1062>
 80074c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80074c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074c8:	6063      	str	r3, [r4, #4]
 80074ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80074cc:	4413      	add	r3, r2
 80074ce:	932a      	str	r3, [sp, #168]	; 0xa8
 80074d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80074d2:	3301      	adds	r3, #1
 80074d4:	2b07      	cmp	r3, #7
 80074d6:	9329      	str	r3, [sp, #164]	; 0xa4
 80074d8:	f300 80dd 	bgt.w	8007696 <_svfprintf_r+0x121a>
 80074dc:	3408      	adds	r4, #8
 80074de:	9b08      	ldr	r3, [sp, #32]
 80074e0:	9a08      	ldr	r2, [sp, #32]
 80074e2:	eb0b 0503 	add.w	r5, fp, r3
 80074e6:	1bab      	subs	r3, r5, r6
 80074e8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80074ea:	1b55      	subs	r5, r2, r5
 80074ec:	429d      	cmp	r5, r3
 80074ee:	bfa8      	it	ge
 80074f0:	461d      	movge	r5, r3
 80074f2:	2d00      	cmp	r5, #0
 80074f4:	dd0b      	ble.n	800750e <_svfprintf_r+0x1092>
 80074f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80074f8:	e9c4 6500 	strd	r6, r5, [r4]
 80074fc:	442b      	add	r3, r5
 80074fe:	932a      	str	r3, [sp, #168]	; 0xa8
 8007500:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007502:	3301      	adds	r3, #1
 8007504:	2b07      	cmp	r3, #7
 8007506:	9329      	str	r3, [sp, #164]	; 0xa4
 8007508:	f300 80cf 	bgt.w	80076aa <_svfprintf_r+0x122e>
 800750c:	3408      	adds	r4, #8
 800750e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007510:	9a08      	ldr	r2, [sp, #32]
 8007512:	2d00      	cmp	r5, #0
 8007514:	eba2 0303 	sub.w	r3, r2, r3
 8007518:	bfb4      	ite	lt
 800751a:	461d      	movlt	r5, r3
 800751c:	1b5d      	subge	r5, r3, r5
 800751e:	2d00      	cmp	r5, #0
 8007520:	f77f ad42 	ble.w	8006fa8 <_svfprintf_r+0xb2c>
 8007524:	2710      	movs	r7, #16
 8007526:	4e66      	ldr	r6, [pc, #408]	; (80076c0 <_svfprintf_r+0x1244>)
 8007528:	2d10      	cmp	r5, #16
 800752a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800752e:	f104 0108 	add.w	r1, r4, #8
 8007532:	f103 0301 	add.w	r3, r3, #1
 8007536:	6026      	str	r6, [r4, #0]
 8007538:	f77f aecb 	ble.w	80072d2 <_svfprintf_r+0xe56>
 800753c:	3210      	adds	r2, #16
 800753e:	2b07      	cmp	r3, #7
 8007540:	6067      	str	r7, [r4, #4]
 8007542:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8007546:	dd08      	ble.n	800755a <_svfprintf_r+0x10de>
 8007548:	aa28      	add	r2, sp, #160	; 0xa0
 800754a:	4649      	mov	r1, r9
 800754c:	9807      	ldr	r0, [sp, #28]
 800754e:	f003 fe85 	bl	800b25c <__ssprint_r>
 8007552:	2800      	cmp	r0, #0
 8007554:	f040 816e 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007558:	a92b      	add	r1, sp, #172	; 0xac
 800755a:	3d10      	subs	r5, #16
 800755c:	460c      	mov	r4, r1
 800755e:	e7e3      	b.n	8007528 <_svfprintf_r+0x10ac>
 8007560:	aa28      	add	r2, sp, #160	; 0xa0
 8007562:	4649      	mov	r1, r9
 8007564:	9807      	ldr	r0, [sp, #28]
 8007566:	f003 fe79 	bl	800b25c <__ssprint_r>
 800756a:	2800      	cmp	r0, #0
 800756c:	f040 8162 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007570:	ac2b      	add	r4, sp, #172	; 0xac
 8007572:	e770      	b.n	8007456 <_svfprintf_r+0xfda>
 8007574:	2010      	movs	r0, #16
 8007576:	2b07      	cmp	r3, #7
 8007578:	4402      	add	r2, r0
 800757a:	6060      	str	r0, [r4, #4]
 800757c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8007580:	dd08      	ble.n	8007594 <_svfprintf_r+0x1118>
 8007582:	aa28      	add	r2, sp, #160	; 0xa0
 8007584:	4649      	mov	r1, r9
 8007586:	9807      	ldr	r0, [sp, #28]
 8007588:	f003 fe68 	bl	800b25c <__ssprint_r>
 800758c:	2800      	cmp	r0, #0
 800758e:	f040 8151 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007592:	a92b      	add	r1, sp, #172	; 0xac
 8007594:	3d10      	subs	r5, #16
 8007596:	460c      	mov	r4, r1
 8007598:	e763      	b.n	8007462 <_svfprintf_r+0xfe6>
 800759a:	460c      	mov	r4, r1
 800759c:	e77b      	b.n	8007496 <_svfprintf_r+0x101a>
 800759e:	2f00      	cmp	r7, #0
 80075a0:	d049      	beq.n	8007636 <_svfprintf_r+0x11ba>
 80075a2:	3f01      	subs	r7, #1
 80075a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80075ac:	6063      	str	r3, [r4, #4]
 80075ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80075b0:	4413      	add	r3, r2
 80075b2:	932a      	str	r3, [sp, #168]	; 0xa8
 80075b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80075b6:	3301      	adds	r3, #1
 80075b8:	2b07      	cmp	r3, #7
 80075ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80075bc:	dc42      	bgt.n	8007644 <_svfprintf_r+0x11c8>
 80075be:	3408      	adds	r4, #8
 80075c0:	9b08      	ldr	r3, [sp, #32]
 80075c2:	445b      	add	r3, fp
 80075c4:	1b9a      	subs	r2, r3, r6
 80075c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	4293      	cmp	r3, r2
 80075cc:	bfa8      	it	ge
 80075ce:	4613      	movge	r3, r2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	461d      	mov	r5, r3
 80075d4:	dd0a      	ble.n	80075ec <_svfprintf_r+0x1170>
 80075d6:	e9c4 6300 	strd	r6, r3, [r4]
 80075da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80075dc:	442b      	add	r3, r5
 80075de:	932a      	str	r3, [sp, #168]	; 0xa8
 80075e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80075e2:	3301      	adds	r3, #1
 80075e4:	2b07      	cmp	r3, #7
 80075e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80075e8:	dc36      	bgt.n	8007658 <_svfprintf_r+0x11dc>
 80075ea:	3408      	adds	r4, #8
 80075ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	bfb4      	ite	lt
 80075f4:	461d      	movlt	r5, r3
 80075f6:	1b5d      	subge	r5, r3, r5
 80075f8:	2d00      	cmp	r5, #0
 80075fa:	dd18      	ble.n	800762e <_svfprintf_r+0x11b2>
 80075fc:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8007600:	482f      	ldr	r0, [pc, #188]	; (80076c0 <_svfprintf_r+0x1244>)
 8007602:	2d10      	cmp	r5, #16
 8007604:	f102 0201 	add.w	r2, r2, #1
 8007608:	f104 0108 	add.w	r1, r4, #8
 800760c:	6020      	str	r0, [r4, #0]
 800760e:	dc2d      	bgt.n	800766c <_svfprintf_r+0x11f0>
 8007610:	442b      	add	r3, r5
 8007612:	2a07      	cmp	r2, #7
 8007614:	6065      	str	r5, [r4, #4]
 8007616:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800761a:	dd3a      	ble.n	8007692 <_svfprintf_r+0x1216>
 800761c:	aa28      	add	r2, sp, #160	; 0xa0
 800761e:	4649      	mov	r1, r9
 8007620:	9807      	ldr	r0, [sp, #28]
 8007622:	f003 fe1b 	bl	800b25c <__ssprint_r>
 8007626:	2800      	cmp	r0, #0
 8007628:	f040 8104 	bne.w	8007834 <_svfprintf_r+0x13b8>
 800762c:	ac2b      	add	r4, sp, #172	; 0xac
 800762e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	441e      	add	r6, r3
 8007634:	e733      	b.n	800749e <_svfprintf_r+0x1022>
 8007636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007638:	3b01      	subs	r3, #1
 800763a:	930d      	str	r3, [sp, #52]	; 0x34
 800763c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800763e:	3b01      	subs	r3, #1
 8007640:	930b      	str	r3, [sp, #44]	; 0x2c
 8007642:	e7af      	b.n	80075a4 <_svfprintf_r+0x1128>
 8007644:	aa28      	add	r2, sp, #160	; 0xa0
 8007646:	4649      	mov	r1, r9
 8007648:	9807      	ldr	r0, [sp, #28]
 800764a:	f003 fe07 	bl	800b25c <__ssprint_r>
 800764e:	2800      	cmp	r0, #0
 8007650:	f040 80f0 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007654:	ac2b      	add	r4, sp, #172	; 0xac
 8007656:	e7b3      	b.n	80075c0 <_svfprintf_r+0x1144>
 8007658:	aa28      	add	r2, sp, #160	; 0xa0
 800765a:	4649      	mov	r1, r9
 800765c:	9807      	ldr	r0, [sp, #28]
 800765e:	f003 fdfd 	bl	800b25c <__ssprint_r>
 8007662:	2800      	cmp	r0, #0
 8007664:	f040 80e6 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007668:	ac2b      	add	r4, sp, #172	; 0xac
 800766a:	e7bf      	b.n	80075ec <_svfprintf_r+0x1170>
 800766c:	2010      	movs	r0, #16
 800766e:	2a07      	cmp	r2, #7
 8007670:	4403      	add	r3, r0
 8007672:	6060      	str	r0, [r4, #4]
 8007674:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007678:	dd08      	ble.n	800768c <_svfprintf_r+0x1210>
 800767a:	aa28      	add	r2, sp, #160	; 0xa0
 800767c:	4649      	mov	r1, r9
 800767e:	9807      	ldr	r0, [sp, #28]
 8007680:	f003 fdec 	bl	800b25c <__ssprint_r>
 8007684:	2800      	cmp	r0, #0
 8007686:	f040 80d5 	bne.w	8007834 <_svfprintf_r+0x13b8>
 800768a:	a92b      	add	r1, sp, #172	; 0xac
 800768c:	3d10      	subs	r5, #16
 800768e:	460c      	mov	r4, r1
 8007690:	e7b4      	b.n	80075fc <_svfprintf_r+0x1180>
 8007692:	460c      	mov	r4, r1
 8007694:	e7cb      	b.n	800762e <_svfprintf_r+0x11b2>
 8007696:	aa28      	add	r2, sp, #160	; 0xa0
 8007698:	4649      	mov	r1, r9
 800769a:	9807      	ldr	r0, [sp, #28]
 800769c:	f003 fdde 	bl	800b25c <__ssprint_r>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	f040 80c7 	bne.w	8007834 <_svfprintf_r+0x13b8>
 80076a6:	ac2b      	add	r4, sp, #172	; 0xac
 80076a8:	e719      	b.n	80074de <_svfprintf_r+0x1062>
 80076aa:	aa28      	add	r2, sp, #160	; 0xa0
 80076ac:	4649      	mov	r1, r9
 80076ae:	9807      	ldr	r0, [sp, #28]
 80076b0:	f003 fdd4 	bl	800b25c <__ssprint_r>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f040 80bd 	bne.w	8007834 <_svfprintf_r+0x13b8>
 80076ba:	ac2b      	add	r4, sp, #172	; 0xac
 80076bc:	e727      	b.n	800750e <_svfprintf_r+0x1092>
 80076be:	bf00      	nop
 80076c0:	0800e9c0 	.word	0x0800e9c0
 80076c4:	9a08      	ldr	r2, [sp, #32]
 80076c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80076c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80076ca:	2a01      	cmp	r2, #1
 80076cc:	f105 0501 	add.w	r5, r5, #1
 80076d0:	f103 0301 	add.w	r3, r3, #1
 80076d4:	f104 0608 	add.w	r6, r4, #8
 80076d8:	dc02      	bgt.n	80076e0 <_svfprintf_r+0x1264>
 80076da:	f01a 0f01 	tst.w	sl, #1
 80076de:	d07d      	beq.n	80077dc <_svfprintf_r+0x1360>
 80076e0:	2201      	movs	r2, #1
 80076e2:	2b07      	cmp	r3, #7
 80076e4:	f8c4 b000 	str.w	fp, [r4]
 80076e8:	6062      	str	r2, [r4, #4]
 80076ea:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80076ee:	dd08      	ble.n	8007702 <_svfprintf_r+0x1286>
 80076f0:	aa28      	add	r2, sp, #160	; 0xa0
 80076f2:	4649      	mov	r1, r9
 80076f4:	9807      	ldr	r0, [sp, #28]
 80076f6:	f003 fdb1 	bl	800b25c <__ssprint_r>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f040 809a 	bne.w	8007834 <_svfprintf_r+0x13b8>
 8007700:	ae2b      	add	r6, sp, #172	; 0xac
 8007702:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007704:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007706:	6033      	str	r3, [r6, #0]
 8007708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800770a:	6073      	str	r3, [r6, #4]
 800770c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800770e:	4413      	add	r3, r2
 8007710:	932a      	str	r3, [sp, #168]	; 0xa8
 8007712:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007714:	3301      	adds	r3, #1
 8007716:	2b07      	cmp	r3, #7
 8007718:	9329      	str	r3, [sp, #164]	; 0xa4
 800771a:	dc31      	bgt.n	8007780 <_svfprintf_r+0x1304>
 800771c:	3608      	adds	r6, #8
 800771e:	9b08      	ldr	r3, [sp, #32]
 8007720:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8007724:	1e5c      	subs	r4, r3, #1
 8007726:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800772a:	f7f9 f93d 	bl	80009a8 <__aeabi_dcmpeq>
 800772e:	2800      	cmp	r0, #0
 8007730:	d12f      	bne.n	8007792 <_svfprintf_r+0x1316>
 8007732:	f10b 0301 	add.w	r3, fp, #1
 8007736:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8007738:	e9c6 3400 	strd	r3, r4, [r6]
 800773c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800773e:	9908      	ldr	r1, [sp, #32]
 8007740:	3201      	adds	r2, #1
 8007742:	3b01      	subs	r3, #1
 8007744:	440b      	add	r3, r1
 8007746:	2a07      	cmp	r2, #7
 8007748:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800774c:	dd4f      	ble.n	80077ee <_svfprintf_r+0x1372>
 800774e:	aa28      	add	r2, sp, #160	; 0xa0
 8007750:	4649      	mov	r1, r9
 8007752:	9807      	ldr	r0, [sp, #28]
 8007754:	f003 fd82 	bl	800b25c <__ssprint_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	d16b      	bne.n	8007834 <_svfprintf_r+0x13b8>
 800775c:	ae2b      	add	r6, sp, #172	; 0xac
 800775e:	ab24      	add	r3, sp, #144	; 0x90
 8007760:	6033      	str	r3, [r6, #0]
 8007762:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007764:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007766:	6073      	str	r3, [r6, #4]
 8007768:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800776a:	4413      	add	r3, r2
 800776c:	932a      	str	r3, [sp, #168]	; 0xa8
 800776e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007770:	3301      	adds	r3, #1
 8007772:	2b07      	cmp	r3, #7
 8007774:	9329      	str	r3, [sp, #164]	; 0xa4
 8007776:	f73f adb3 	bgt.w	80072e0 <_svfprintf_r+0xe64>
 800777a:	f106 0408 	add.w	r4, r6, #8
 800777e:	e413      	b.n	8006fa8 <_svfprintf_r+0xb2c>
 8007780:	aa28      	add	r2, sp, #160	; 0xa0
 8007782:	4649      	mov	r1, r9
 8007784:	9807      	ldr	r0, [sp, #28]
 8007786:	f003 fd69 	bl	800b25c <__ssprint_r>
 800778a:	2800      	cmp	r0, #0
 800778c:	d152      	bne.n	8007834 <_svfprintf_r+0x13b8>
 800778e:	ae2b      	add	r6, sp, #172	; 0xac
 8007790:	e7c5      	b.n	800771e <_svfprintf_r+0x12a2>
 8007792:	2c00      	cmp	r4, #0
 8007794:	dde3      	ble.n	800775e <_svfprintf_r+0x12e2>
 8007796:	2710      	movs	r7, #16
 8007798:	4d3d      	ldr	r5, [pc, #244]	; (8007890 <_svfprintf_r+0x1414>)
 800779a:	2c10      	cmp	r4, #16
 800779c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80077a0:	f106 0108 	add.w	r1, r6, #8
 80077a4:	f103 0301 	add.w	r3, r3, #1
 80077a8:	6035      	str	r5, [r6, #0]
 80077aa:	dc07      	bgt.n	80077bc <_svfprintf_r+0x1340>
 80077ac:	6074      	str	r4, [r6, #4]
 80077ae:	2b07      	cmp	r3, #7
 80077b0:	4414      	add	r4, r2
 80077b2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 80077b6:	dcca      	bgt.n	800774e <_svfprintf_r+0x12d2>
 80077b8:	460e      	mov	r6, r1
 80077ba:	e7d0      	b.n	800775e <_svfprintf_r+0x12e2>
 80077bc:	3210      	adds	r2, #16
 80077be:	2b07      	cmp	r3, #7
 80077c0:	6077      	str	r7, [r6, #4]
 80077c2:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80077c6:	dd06      	ble.n	80077d6 <_svfprintf_r+0x135a>
 80077c8:	aa28      	add	r2, sp, #160	; 0xa0
 80077ca:	4649      	mov	r1, r9
 80077cc:	9807      	ldr	r0, [sp, #28]
 80077ce:	f003 fd45 	bl	800b25c <__ssprint_r>
 80077d2:	bb78      	cbnz	r0, 8007834 <_svfprintf_r+0x13b8>
 80077d4:	a92b      	add	r1, sp, #172	; 0xac
 80077d6:	3c10      	subs	r4, #16
 80077d8:	460e      	mov	r6, r1
 80077da:	e7de      	b.n	800779a <_svfprintf_r+0x131e>
 80077dc:	2201      	movs	r2, #1
 80077de:	2b07      	cmp	r3, #7
 80077e0:	f8c4 b000 	str.w	fp, [r4]
 80077e4:	6062      	str	r2, [r4, #4]
 80077e6:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80077ea:	ddb8      	ble.n	800775e <_svfprintf_r+0x12e2>
 80077ec:	e7af      	b.n	800774e <_svfprintf_r+0x12d2>
 80077ee:	3608      	adds	r6, #8
 80077f0:	e7b5      	b.n	800775e <_svfprintf_r+0x12e2>
 80077f2:	460c      	mov	r4, r1
 80077f4:	f7ff bbd8 	b.w	8006fa8 <_svfprintf_r+0xb2c>
 80077f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077fc:	1a9d      	subs	r5, r3, r2
 80077fe:	2d00      	cmp	r5, #0
 8007800:	f77f abd6 	ble.w	8006fb0 <_svfprintf_r+0xb34>
 8007804:	2710      	movs	r7, #16
 8007806:	4e23      	ldr	r6, [pc, #140]	; (8007894 <_svfprintf_r+0x1418>)
 8007808:	2d10      	cmp	r5, #16
 800780a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800780e:	6026      	str	r6, [r4, #0]
 8007810:	f103 0301 	add.w	r3, r3, #1
 8007814:	dc18      	bgt.n	8007848 <_svfprintf_r+0x13cc>
 8007816:	6065      	str	r5, [r4, #4]
 8007818:	2b07      	cmp	r3, #7
 800781a:	4415      	add	r5, r2
 800781c:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8007820:	f77f abc6 	ble.w	8006fb0 <_svfprintf_r+0xb34>
 8007824:	aa28      	add	r2, sp, #160	; 0xa0
 8007826:	4649      	mov	r1, r9
 8007828:	9807      	ldr	r0, [sp, #28]
 800782a:	f003 fd17 	bl	800b25c <__ssprint_r>
 800782e:	2800      	cmp	r0, #0
 8007830:	f43f abbe 	beq.w	8006fb0 <_svfprintf_r+0xb34>
 8007834:	f1b8 0f00 	cmp.w	r8, #0
 8007838:	f43f a8a9 	beq.w	800698e <_svfprintf_r+0x512>
 800783c:	4641      	mov	r1, r8
 800783e:	9807      	ldr	r0, [sp, #28]
 8007840:	f002 faf2 	bl	8009e28 <_free_r>
 8007844:	f7ff b8a3 	b.w	800698e <_svfprintf_r+0x512>
 8007848:	3210      	adds	r2, #16
 800784a:	2b07      	cmp	r3, #7
 800784c:	6067      	str	r7, [r4, #4]
 800784e:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8007852:	dc02      	bgt.n	800785a <_svfprintf_r+0x13de>
 8007854:	3408      	adds	r4, #8
 8007856:	3d10      	subs	r5, #16
 8007858:	e7d6      	b.n	8007808 <_svfprintf_r+0x138c>
 800785a:	aa28      	add	r2, sp, #160	; 0xa0
 800785c:	4649      	mov	r1, r9
 800785e:	9807      	ldr	r0, [sp, #28]
 8007860:	f003 fcfc 	bl	800b25c <__ssprint_r>
 8007864:	2800      	cmp	r0, #0
 8007866:	d1e5      	bne.n	8007834 <_svfprintf_r+0x13b8>
 8007868:	ac2b      	add	r4, sp, #172	; 0xac
 800786a:	e7f4      	b.n	8007856 <_svfprintf_r+0x13da>
 800786c:	4641      	mov	r1, r8
 800786e:	9807      	ldr	r0, [sp, #28]
 8007870:	f002 fada 	bl	8009e28 <_free_r>
 8007874:	f7ff bbb4 	b.w	8006fe0 <_svfprintf_r+0xb64>
 8007878:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800787a:	2b00      	cmp	r3, #0
 800787c:	f43f a887 	beq.w	800698e <_svfprintf_r+0x512>
 8007880:	aa28      	add	r2, sp, #160	; 0xa0
 8007882:	4649      	mov	r1, r9
 8007884:	9807      	ldr	r0, [sp, #28]
 8007886:	f003 fce9 	bl	800b25c <__ssprint_r>
 800788a:	f7ff b880 	b.w	800698e <_svfprintf_r+0x512>
 800788e:	bf00      	nop
 8007890:	0800e9c0 	.word	0x0800e9c0
 8007894:	0800e9b0 	.word	0x0800e9b0

08007898 <_vfprintf_r>:
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	b0d5      	sub	sp, #340	; 0x154
 800789e:	4689      	mov	r9, r1
 80078a0:	9207      	str	r2, [sp, #28]
 80078a2:	461c      	mov	r4, r3
 80078a4:	461e      	mov	r6, r3
 80078a6:	4683      	mov	fp, r0
 80078a8:	f002 fce6 	bl	800a278 <_localeconv_r>
 80078ac:	6803      	ldr	r3, [r0, #0]
 80078ae:	4618      	mov	r0, r3
 80078b0:	931a      	str	r3, [sp, #104]	; 0x68
 80078b2:	f7f8 fc4d 	bl	8000150 <strlen>
 80078b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80078b8:	f1bb 0f00 	cmp.w	fp, #0
 80078bc:	d005      	beq.n	80078ca <_vfprintf_r+0x32>
 80078be:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80078c2:	b913      	cbnz	r3, 80078ca <_vfprintf_r+0x32>
 80078c4:	4658      	mov	r0, fp
 80078c6:	f002 fa1f 	bl	8009d08 <__sinit>
 80078ca:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80078ce:	07d8      	lsls	r0, r3, #31
 80078d0:	d407      	bmi.n	80078e2 <_vfprintf_r+0x4a>
 80078d2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80078d6:	0599      	lsls	r1, r3, #22
 80078d8:	d403      	bmi.n	80078e2 <_vfprintf_r+0x4a>
 80078da:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80078de:	f002 fcdb 	bl	800a298 <__retarget_lock_acquire_recursive>
 80078e2:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 80078e6:	049a      	lsls	r2, r3, #18
 80078e8:	d409      	bmi.n	80078fe <_vfprintf_r+0x66>
 80078ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078ee:	f8a9 300c 	strh.w	r3, [r9, #12]
 80078f2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80078f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078fa:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 80078fe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007902:	071f      	lsls	r7, r3, #28
 8007904:	d502      	bpl.n	800790c <_vfprintf_r+0x74>
 8007906:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800790a:	b9a3      	cbnz	r3, 8007936 <_vfprintf_r+0x9e>
 800790c:	4649      	mov	r1, r9
 800790e:	4658      	mov	r0, fp
 8007910:	f001 fa66 	bl	8008de0 <__swsetup_r>
 8007914:	b178      	cbz	r0, 8007936 <_vfprintf_r+0x9e>
 8007916:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800791a:	07dd      	lsls	r5, r3, #31
 800791c:	d407      	bmi.n	800792e <_vfprintf_r+0x96>
 800791e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007922:	059c      	lsls	r4, r3, #22
 8007924:	d403      	bmi.n	800792e <_vfprintf_r+0x96>
 8007926:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800792a:	f002 fcb6 	bl	800a29a <__retarget_lock_release_recursive>
 800792e:	f04f 33ff 	mov.w	r3, #4294967295
 8007932:	9310      	str	r3, [sp, #64]	; 0x40
 8007934:	e01a      	b.n	800796c <_vfprintf_r+0xd4>
 8007936:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800793a:	f003 021a 	and.w	r2, r3, #26
 800793e:	2a0a      	cmp	r2, #10
 8007940:	d118      	bne.n	8007974 <_vfprintf_r+0xdc>
 8007942:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8007946:	2a00      	cmp	r2, #0
 8007948:	db14      	blt.n	8007974 <_vfprintf_r+0xdc>
 800794a:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 800794e:	07d0      	lsls	r0, r2, #31
 8007950:	d405      	bmi.n	800795e <_vfprintf_r+0xc6>
 8007952:	0599      	lsls	r1, r3, #22
 8007954:	d403      	bmi.n	800795e <_vfprintf_r+0xc6>
 8007956:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800795a:	f002 fc9e 	bl	800a29a <__retarget_lock_release_recursive>
 800795e:	4623      	mov	r3, r4
 8007960:	9a07      	ldr	r2, [sp, #28]
 8007962:	4649      	mov	r1, r9
 8007964:	4658      	mov	r0, fp
 8007966:	f001 f9fb 	bl	8008d60 <__sbprintf>
 800796a:	9010      	str	r0, [sp, #64]	; 0x40
 800796c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800796e:	b055      	add	sp, #340	; 0x154
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007974:	2300      	movs	r3, #0
 8007976:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 800797a:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 800797e:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 8007982:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8007986:	ac2b      	add	r4, sp, #172	; 0xac
 8007988:	9428      	str	r4, [sp, #160]	; 0xa0
 800798a:	9308      	str	r3, [sp, #32]
 800798c:	930c      	str	r3, [sp, #48]	; 0x30
 800798e:	9316      	str	r3, [sp, #88]	; 0x58
 8007990:	931d      	str	r3, [sp, #116]	; 0x74
 8007992:	9310      	str	r3, [sp, #64]	; 0x40
 8007994:	9d07      	ldr	r5, [sp, #28]
 8007996:	462b      	mov	r3, r5
 8007998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800799c:	b112      	cbz	r2, 80079a4 <_vfprintf_r+0x10c>
 800799e:	2a25      	cmp	r2, #37	; 0x25
 80079a0:	f040 80e4 	bne.w	8007b6c <_vfprintf_r+0x2d4>
 80079a4:	9b07      	ldr	r3, [sp, #28]
 80079a6:	1aef      	subs	r7, r5, r3
 80079a8:	d00e      	beq.n	80079c8 <_vfprintf_r+0x130>
 80079aa:	e9c4 3700 	strd	r3, r7, [r4]
 80079ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80079b0:	443b      	add	r3, r7
 80079b2:	932a      	str	r3, [sp, #168]	; 0xa8
 80079b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80079b6:	3301      	adds	r3, #1
 80079b8:	2b07      	cmp	r3, #7
 80079ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80079bc:	f300 80d8 	bgt.w	8007b70 <_vfprintf_r+0x2d8>
 80079c0:	3408      	adds	r4, #8
 80079c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079c4:	443b      	add	r3, r7
 80079c6:	9310      	str	r3, [sp, #64]	; 0x40
 80079c8:	782b      	ldrb	r3, [r5, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f001 81b5 	beq.w	8008d3a <_vfprintf_r+0x14a2>
 80079d0:	1c6b      	adds	r3, r5, #1
 80079d2:	930e      	str	r3, [sp, #56]	; 0x38
 80079d4:	2300      	movs	r3, #0
 80079d6:	f04f 35ff 	mov.w	r5, #4294967295
 80079da:	469a      	mov	sl, r3
 80079dc:	270a      	movs	r7, #10
 80079de:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80079e2:	9311      	str	r3, [sp, #68]	; 0x44
 80079e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	930a      	str	r3, [sp, #40]	; 0x28
 80079ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079ec:	3301      	adds	r3, #1
 80079ee:	930e      	str	r3, [sp, #56]	; 0x38
 80079f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f2:	3b20      	subs	r3, #32
 80079f4:	2b5a      	cmp	r3, #90	; 0x5a
 80079f6:	f200 8627 	bhi.w	8008648 <_vfprintf_r+0xdb0>
 80079fa:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <_vfprintf_r+0x168>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007c03 	.word	0x08007c03
 8007a04:	08008649 	.word	0x08008649
 8007a08:	08008649 	.word	0x08008649
 8007a0c:	08007c15 	.word	0x08007c15
 8007a10:	08008649 	.word	0x08008649
 8007a14:	08008649 	.word	0x08008649
 8007a18:	08008649 	.word	0x08008649
 8007a1c:	08007bc9 	.word	0x08007bc9
 8007a20:	08008649 	.word	0x08008649
 8007a24:	08008649 	.word	0x08008649
 8007a28:	08007c1b 	.word	0x08007c1b
 8007a2c:	08007c31 	.word	0x08007c31
 8007a30:	08008649 	.word	0x08008649
 8007a34:	08007c2b 	.word	0x08007c2b
 8007a38:	08007c35 	.word	0x08007c35
 8007a3c:	08008649 	.word	0x08008649
 8007a40:	08007c67 	.word	0x08007c67
 8007a44:	08007c6d 	.word	0x08007c6d
 8007a48:	08007c6d 	.word	0x08007c6d
 8007a4c:	08007c6d 	.word	0x08007c6d
 8007a50:	08007c6d 	.word	0x08007c6d
 8007a54:	08007c6d 	.word	0x08007c6d
 8007a58:	08007c6d 	.word	0x08007c6d
 8007a5c:	08007c6d 	.word	0x08007c6d
 8007a60:	08007c6d 	.word	0x08007c6d
 8007a64:	08007c6d 	.word	0x08007c6d
 8007a68:	08008649 	.word	0x08008649
 8007a6c:	08008649 	.word	0x08008649
 8007a70:	08008649 	.word	0x08008649
 8007a74:	08008649 	.word	0x08008649
 8007a78:	08008649 	.word	0x08008649
 8007a7c:	08008649 	.word	0x08008649
 8007a80:	08008649 	.word	0x08008649
 8007a84:	08007d59 	.word	0x08007d59
 8007a88:	08008649 	.word	0x08008649
 8007a8c:	08007cc7 	.word	0x08007cc7
 8007a90:	08007ce9 	.word	0x08007ce9
 8007a94:	08007d59 	.word	0x08007d59
 8007a98:	08007d59 	.word	0x08007d59
 8007a9c:	08007d59 	.word	0x08007d59
 8007aa0:	08008649 	.word	0x08008649
 8007aa4:	08008649 	.word	0x08008649
 8007aa8:	08008649 	.word	0x08008649
 8007aac:	08008649 	.word	0x08008649
 8007ab0:	08007c8d 	.word	0x08007c8d
 8007ab4:	08008649 	.word	0x08008649
 8007ab8:	08008649 	.word	0x08008649
 8007abc:	0800823d 	.word	0x0800823d
 8007ac0:	08008649 	.word	0x08008649
 8007ac4:	08008649 	.word	0x08008649
 8007ac8:	08008649 	.word	0x08008649
 8007acc:	080082c9 	.word	0x080082c9
 8007ad0:	08008649 	.word	0x08008649
 8007ad4:	080084a9 	.word	0x080084a9
 8007ad8:	08008649 	.word	0x08008649
 8007adc:	08008649 	.word	0x08008649
 8007ae0:	08007b89 	.word	0x08007b89
 8007ae4:	08008649 	.word	0x08008649
 8007ae8:	08008649 	.word	0x08008649
 8007aec:	08008649 	.word	0x08008649
 8007af0:	08008649 	.word	0x08008649
 8007af4:	08008649 	.word	0x08008649
 8007af8:	08008649 	.word	0x08008649
 8007afc:	08008649 	.word	0x08008649
 8007b00:	08008649 	.word	0x08008649
 8007b04:	08007d59 	.word	0x08007d59
 8007b08:	08008649 	.word	0x08008649
 8007b0c:	08007cc7 	.word	0x08007cc7
 8007b10:	08007ced 	.word	0x08007ced
 8007b14:	08007d59 	.word	0x08007d59
 8007b18:	08007d59 	.word	0x08007d59
 8007b1c:	08007d59 	.word	0x08007d59
 8007b20:	08007c93 	.word	0x08007c93
 8007b24:	08007ced 	.word	0x08007ced
 8007b28:	08007cbb 	.word	0x08007cbb
 8007b2c:	08008649 	.word	0x08008649
 8007b30:	08007cad 	.word	0x08007cad
 8007b34:	08008649 	.word	0x08008649
 8007b38:	080081f7 	.word	0x080081f7
 8007b3c:	08008241 	.word	0x08008241
 8007b40:	080082a9 	.word	0x080082a9
 8007b44:	08007cbb 	.word	0x08007cbb
 8007b48:	08008649 	.word	0x08008649
 8007b4c:	080082c9 	.word	0x080082c9
 8007b50:	080079e5 	.word	0x080079e5
 8007b54:	080084ad 	.word	0x080084ad
 8007b58:	08008649 	.word	0x08008649
 8007b5c:	08008649 	.word	0x08008649
 8007b60:	080084eb 	.word	0x080084eb
 8007b64:	08008649 	.word	0x08008649
 8007b68:	080079e5 	.word	0x080079e5
 8007b6c:	461d      	mov	r5, r3
 8007b6e:	e712      	b.n	8007996 <_vfprintf_r+0xfe>
 8007b70:	aa28      	add	r2, sp, #160	; 0xa0
 8007b72:	4649      	mov	r1, r9
 8007b74:	4658      	mov	r0, fp
 8007b76:	f003 fbf6 	bl	800b366 <__sprint_r>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	f040 8157 	bne.w	8007e2e <_vfprintf_r+0x596>
 8007b80:	ac2b      	add	r4, sp, #172	; 0xac
 8007b82:	e71e      	b.n	80079c2 <_vfprintf_r+0x12a>
 8007b84:	461e      	mov	r6, r3
 8007b86:	e72d      	b.n	80079e4 <_vfprintf_r+0x14c>
 8007b88:	4bb2      	ldr	r3, [pc, #712]	; (8007e54 <_vfprintf_r+0x5bc>)
 8007b8a:	f01a 0f20 	tst.w	sl, #32
 8007b8e:	931c      	str	r3, [sp, #112]	; 0x70
 8007b90:	f000 84ae 	beq.w	80084f0 <_vfprintf_r+0xc58>
 8007b94:	3607      	adds	r6, #7
 8007b96:	f026 0607 	bic.w	r6, r6, #7
 8007b9a:	f106 0308 	add.w	r3, r6, #8
 8007b9e:	930d      	str	r3, [sp, #52]	; 0x34
 8007ba0:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007ba4:	f01a 0f01 	tst.w	sl, #1
 8007ba8:	d00a      	beq.n	8007bc0 <_vfprintf_r+0x328>
 8007baa:	ea56 0307 	orrs.w	r3, r6, r7
 8007bae:	d007      	beq.n	8007bc0 <_vfprintf_r+0x328>
 8007bb0:	2330      	movs	r3, #48	; 0x30
 8007bb2:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8007bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb8:	f04a 0a02 	orr.w	sl, sl, #2
 8007bbc:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8007bc0:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e349      	b.n	800825c <_vfprintf_r+0x9c4>
 8007bc8:	4658      	mov	r0, fp
 8007bca:	f002 fb55 	bl	800a278 <_localeconv_r>
 8007bce:	6843      	ldr	r3, [r0, #4]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	931d      	str	r3, [sp, #116]	; 0x74
 8007bd4:	f7f8 fabc 	bl	8000150 <strlen>
 8007bd8:	9016      	str	r0, [sp, #88]	; 0x58
 8007bda:	4658      	mov	r0, fp
 8007bdc:	f002 fb4c 	bl	800a278 <_localeconv_r>
 8007be0:	6883      	ldr	r3, [r0, #8]
 8007be2:	930c      	str	r3, [sp, #48]	; 0x30
 8007be4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f43f aefc 	beq.w	80079e4 <_vfprintf_r+0x14c>
 8007bec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f43f aef8 	beq.w	80079e4 <_vfprintf_r+0x14c>
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f43f aef4 	beq.w	80079e4 <_vfprintf_r+0x14c>
 8007bfc:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8007c00:	e6f0      	b.n	80079e4 <_vfprintf_r+0x14c>
 8007c02:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f47f aeec 	bne.w	80079e4 <_vfprintf_r+0x14c>
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8007c12:	e6e7      	b.n	80079e4 <_vfprintf_r+0x14c>
 8007c14:	f04a 0a01 	orr.w	sl, sl, #1
 8007c18:	e6e4      	b.n	80079e4 <_vfprintf_r+0x14c>
 8007c1a:	6832      	ldr	r2, [r6, #0]
 8007c1c:	1d33      	adds	r3, r6, #4
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	9211      	str	r2, [sp, #68]	; 0x44
 8007c22:	daaf      	bge.n	8007b84 <_vfprintf_r+0x2ec>
 8007c24:	461e      	mov	r6, r3
 8007c26:	4252      	negs	r2, r2
 8007c28:	9211      	str	r2, [sp, #68]	; 0x44
 8007c2a:	f04a 0a04 	orr.w	sl, sl, #4
 8007c2e:	e6d9      	b.n	80079e4 <_vfprintf_r+0x14c>
 8007c30:	232b      	movs	r3, #43	; 0x2b
 8007c32:	e7ec      	b.n	8007c0e <_vfprintf_r+0x376>
 8007c34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c38:	7812      	ldrb	r2, [r2, #0]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	2a2a      	cmp	r2, #42	; 0x2a
 8007c3e:	920a      	str	r2, [sp, #40]	; 0x28
 8007c40:	d10f      	bne.n	8007c62 <_vfprintf_r+0x3ca>
 8007c42:	6835      	ldr	r5, [r6, #0]
 8007c44:	930e      	str	r3, [sp, #56]	; 0x38
 8007c46:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8007c4a:	3604      	adds	r6, #4
 8007c4c:	e6ca      	b.n	80079e4 <_vfprintf_r+0x14c>
 8007c4e:	fb07 2505 	mla	r5, r7, r5, r2
 8007c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c56:	920a      	str	r2, [sp, #40]	; 0x28
 8007c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c5a:	3a30      	subs	r2, #48	; 0x30
 8007c5c:	2a09      	cmp	r2, #9
 8007c5e:	d9f6      	bls.n	8007c4e <_vfprintf_r+0x3b6>
 8007c60:	e6c5      	b.n	80079ee <_vfprintf_r+0x156>
 8007c62:	2500      	movs	r5, #0
 8007c64:	e7f8      	b.n	8007c58 <_vfprintf_r+0x3c0>
 8007c66:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8007c6a:	e6bb      	b.n	80079e4 <_vfprintf_r+0x14c>
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c70:	9211      	str	r2, [sp, #68]	; 0x44
 8007c72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c74:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007c76:	3a30      	subs	r2, #48	; 0x30
 8007c78:	fb07 2201 	mla	r2, r7, r1, r2
 8007c7c:	9211      	str	r2, [sp, #68]	; 0x44
 8007c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c82:	920a      	str	r2, [sp, #40]	; 0x28
 8007c84:	3a30      	subs	r2, #48	; 0x30
 8007c86:	2a09      	cmp	r2, #9
 8007c88:	d9f3      	bls.n	8007c72 <_vfprintf_r+0x3da>
 8007c8a:	e6b0      	b.n	80079ee <_vfprintf_r+0x156>
 8007c8c:	f04a 0a08 	orr.w	sl, sl, #8
 8007c90:	e6a8      	b.n	80079e4 <_vfprintf_r+0x14c>
 8007c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b68      	cmp	r3, #104	; 0x68
 8007c98:	bf01      	itttt	eq
 8007c9a:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8007c9c:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8007ca0:	3301      	addeq	r3, #1
 8007ca2:	930e      	streq	r3, [sp, #56]	; 0x38
 8007ca4:	bf18      	it	ne
 8007ca6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8007caa:	e69b      	b.n	80079e4 <_vfprintf_r+0x14c>
 8007cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b6c      	cmp	r3, #108	; 0x6c
 8007cb2:	d105      	bne.n	8007cc0 <_vfprintf_r+0x428>
 8007cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	930e      	str	r3, [sp, #56]	; 0x38
 8007cba:	f04a 0a20 	orr.w	sl, sl, #32
 8007cbe:	e691      	b.n	80079e4 <_vfprintf_r+0x14c>
 8007cc0:	f04a 0a10 	orr.w	sl, sl, #16
 8007cc4:	e68e      	b.n	80079e4 <_vfprintf_r+0x14c>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	1d33      	adds	r3, r6, #4
 8007cca:	930d      	str	r3, [sp, #52]	; 0x34
 8007ccc:	6833      	ldr	r3, [r6, #0]
 8007cce:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8007cd2:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8007cd6:	ab3b      	add	r3, sp, #236	; 0xec
 8007cd8:	4680      	mov	r8, r0
 8007cda:	2501      	movs	r5, #1
 8007cdc:	9012      	str	r0, [sp, #72]	; 0x48
 8007cde:	4607      	mov	r7, r0
 8007ce0:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	9307      	str	r3, [sp, #28]
 8007ce6:	e308      	b.n	80082fa <_vfprintf_r+0xa62>
 8007ce8:	f04a 0a10 	orr.w	sl, sl, #16
 8007cec:	f01a 0f20 	tst.w	sl, #32
 8007cf0:	d01f      	beq.n	8007d32 <_vfprintf_r+0x49a>
 8007cf2:	3607      	adds	r6, #7
 8007cf4:	f026 0607 	bic.w	r6, r6, #7
 8007cf8:	f106 0308 	add.w	r3, r6, #8
 8007cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8007cfe:	e9d6 6700 	ldrd	r6, r7, [r6]
 8007d02:	2e00      	cmp	r6, #0
 8007d04:	f177 0300 	sbcs.w	r3, r7, #0
 8007d08:	da05      	bge.n	8007d16 <_vfprintf_r+0x47e>
 8007d0a:	232d      	movs	r3, #45	; 0x2d
 8007d0c:	4276      	negs	r6, r6
 8007d0e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8007d12:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8007d16:	1c6b      	adds	r3, r5, #1
 8007d18:	f040 83fd 	bne.w	8008516 <_vfprintf_r+0xc7e>
 8007d1c:	2f00      	cmp	r7, #0
 8007d1e:	bf08      	it	eq
 8007d20:	2e0a      	cmpeq	r6, #10
 8007d22:	f080 8425 	bcs.w	8008570 <_vfprintf_r+0xcd8>
 8007d26:	3630      	adds	r6, #48	; 0x30
 8007d28:	ab54      	add	r3, sp, #336	; 0x150
 8007d2a:	f803 6d01 	strb.w	r6, [r3, #-1]!
 8007d2e:	f000 bc15 	b.w	800855c <_vfprintf_r+0xcc4>
 8007d32:	1d33      	adds	r3, r6, #4
 8007d34:	f01a 0f10 	tst.w	sl, #16
 8007d38:	930d      	str	r3, [sp, #52]	; 0x34
 8007d3a:	d002      	beq.n	8007d42 <_vfprintf_r+0x4aa>
 8007d3c:	6836      	ldr	r6, [r6, #0]
 8007d3e:	17f7      	asrs	r7, r6, #31
 8007d40:	e7df      	b.n	8007d02 <_vfprintf_r+0x46a>
 8007d42:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007d46:	6836      	ldr	r6, [r6, #0]
 8007d48:	d001      	beq.n	8007d4e <_vfprintf_r+0x4b6>
 8007d4a:	b236      	sxth	r6, r6
 8007d4c:	e7f7      	b.n	8007d3e <_vfprintf_r+0x4a6>
 8007d4e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007d52:	bf18      	it	ne
 8007d54:	b276      	sxtbne	r6, r6
 8007d56:	e7f2      	b.n	8007d3e <_vfprintf_r+0x4a6>
 8007d58:	3607      	adds	r6, #7
 8007d5a:	f026 0607 	bic.w	r6, r6, #7
 8007d5e:	f106 0308 	add.w	r3, r6, #8
 8007d62:	930d      	str	r3, [sp, #52]	; 0x34
 8007d64:	6833      	ldr	r3, [r6, #0]
 8007d66:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6a:	9314      	str	r3, [sp, #80]	; 0x50
 8007d6c:	6873      	ldr	r3, [r6, #4]
 8007d6e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007d70:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8007d74:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d76:	4638      	mov	r0, r7
 8007d78:	4b37      	ldr	r3, [pc, #220]	; (8007e58 <_vfprintf_r+0x5c0>)
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	f7f8 fe46 	bl	8000a0c <__aeabi_dcmpun>
 8007d80:	bb08      	cbnz	r0, 8007dc6 <_vfprintf_r+0x52e>
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295
 8007d86:	4b34      	ldr	r3, [pc, #208]	; (8007e58 <_vfprintf_r+0x5c0>)
 8007d88:	4638      	mov	r0, r7
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	f7f8 fe20 	bl	80009d0 <__aeabi_dcmple>
 8007d90:	b9c8      	cbnz	r0, 8007dc6 <_vfprintf_r+0x52e>
 8007d92:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007d96:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8007d9a:	f7f8 fe0f 	bl	80009bc <__aeabi_dcmplt>
 8007d9e:	b110      	cbz	r0, 8007da6 <_vfprintf_r+0x50e>
 8007da0:	232d      	movs	r3, #45	; 0x2d
 8007da2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8007da6:	4a2d      	ldr	r2, [pc, #180]	; (8007e5c <_vfprintf_r+0x5c4>)
 8007da8:	4b2d      	ldr	r3, [pc, #180]	; (8007e60 <_vfprintf_r+0x5c8>)
 8007daa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007dac:	f04f 0800 	mov.w	r8, #0
 8007db0:	2947      	cmp	r1, #71	; 0x47
 8007db2:	bfd8      	it	le
 8007db4:	461a      	movle	r2, r3
 8007db6:	2503      	movs	r5, #3
 8007db8:	9207      	str	r2, [sp, #28]
 8007dba:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007dbe:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8007dc2:	f000 bc19 	b.w	80085f8 <_vfprintf_r+0xd60>
 8007dc6:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8007dca:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8007dce:	f7f8 fe1d 	bl	8000a0c <__aeabi_dcmpun>
 8007dd2:	4680      	mov	r8, r0
 8007dd4:	b140      	cbz	r0, 8007de8 <_vfprintf_r+0x550>
 8007dd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007dd8:	4a22      	ldr	r2, [pc, #136]	; (8007e64 <_vfprintf_r+0x5cc>)
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bfbc      	itt	lt
 8007dde:	232d      	movlt	r3, #45	; 0x2d
 8007de0:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 8007de4:	4b20      	ldr	r3, [pc, #128]	; (8007e68 <_vfprintf_r+0x5d0>)
 8007de6:	e7e0      	b.n	8007daa <_vfprintf_r+0x512>
 8007de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dea:	f023 0320 	bic.w	r3, r3, #32
 8007dee:	2b41      	cmp	r3, #65	; 0x41
 8007df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007df2:	d13b      	bne.n	8007e6c <_vfprintf_r+0x5d4>
 8007df4:	2330      	movs	r3, #48	; 0x30
 8007df6:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8007dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dfc:	f04a 0a02 	orr.w	sl, sl, #2
 8007e00:	2b61      	cmp	r3, #97	; 0x61
 8007e02:	bf14      	ite	ne
 8007e04:	2358      	movne	r3, #88	; 0x58
 8007e06:	2378      	moveq	r3, #120	; 0x78
 8007e08:	2d63      	cmp	r5, #99	; 0x63
 8007e0a:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8007e0e:	f340 811b 	ble.w	8008048 <_vfprintf_r+0x7b0>
 8007e12:	1c69      	adds	r1, r5, #1
 8007e14:	4658      	mov	r0, fp
 8007e16:	f002 fab5 	bl	800a384 <_malloc_r>
 8007e1a:	9007      	str	r0, [sp, #28]
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	f040 8116 	bne.w	800804e <_vfprintf_r+0x7b6>
 8007e22:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e2a:	f8a9 300c 	strh.w	r3, [r9, #12]
 8007e2e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8007e32:	07d8      	lsls	r0, r3, #31
 8007e34:	d407      	bmi.n	8007e46 <_vfprintf_r+0x5ae>
 8007e36:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007e3a:	0599      	lsls	r1, r3, #22
 8007e3c:	d403      	bmi.n	8007e46 <_vfprintf_r+0x5ae>
 8007e3e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8007e42:	f002 fa2a 	bl	800a29a <__retarget_lock_release_recursive>
 8007e46:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007e4a:	065a      	lsls	r2, r3, #25
 8007e4c:	f57f ad8e 	bpl.w	800796c <_vfprintf_r+0xd4>
 8007e50:	e56d      	b.n	800792e <_vfprintf_r+0x96>
 8007e52:	bf00      	nop
 8007e54:	0800e99d 	.word	0x0800e99d
 8007e58:	7fefffff 	.word	0x7fefffff
 8007e5c:	0800e980 	.word	0x0800e980
 8007e60:	0800e97c 	.word	0x0800e97c
 8007e64:	0800e988 	.word	0x0800e988
 8007e68:	0800e984 	.word	0x0800e984
 8007e6c:	1c6a      	adds	r2, r5, #1
 8007e6e:	f000 80f1 	beq.w	8008054 <_vfprintf_r+0x7bc>
 8007e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e74:	2b47      	cmp	r3, #71	; 0x47
 8007e76:	d102      	bne.n	8007e7e <_vfprintf_r+0x5e6>
 8007e78:	2d00      	cmp	r5, #0
 8007e7a:	f000 80ed 	beq.w	8008058 <_vfprintf_r+0x7c0>
 8007e7e:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8007e82:	9315      	str	r3, [sp, #84]	; 0x54
 8007e84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e86:	1e1e      	subs	r6, r3, #0
 8007e88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e8a:	9308      	str	r3, [sp, #32]
 8007e8c:	bfb7      	itett	lt
 8007e8e:	4633      	movlt	r3, r6
 8007e90:	2300      	movge	r3, #0
 8007e92:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 8007e96:	232d      	movlt	r3, #45	; 0x2d
 8007e98:	9319      	str	r3, [sp, #100]	; 0x64
 8007e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e9c:	2b41      	cmp	r3, #65	; 0x41
 8007e9e:	f040 80ec 	bne.w	800807a <_vfprintf_r+0x7e2>
 8007ea2:	aa22      	add	r2, sp, #136	; 0x88
 8007ea4:	9808      	ldr	r0, [sp, #32]
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	f003 f93e 	bl	800b128 <frexp>
 8007eac:	2200      	movs	r2, #0
 8007eae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007eb2:	f7f8 fb11 	bl	80004d8 <__aeabi_dmul>
 8007eb6:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007eba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ebe:	f7f8 fd73 	bl	80009a8 <__aeabi_dcmpeq>
 8007ec2:	b108      	cbz	r0, 8007ec8 <_vfprintf_r+0x630>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	9322      	str	r3, [sp, #136]	; 0x88
 8007ec8:	4fa7      	ldr	r7, [pc, #668]	; (8008168 <_vfprintf_r+0x8d0>)
 8007eca:	4ba8      	ldr	r3, [pc, #672]	; (800816c <_vfprintf_r+0x8d4>)
 8007ecc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ece:	9e07      	ldr	r6, [sp, #28]
 8007ed0:	2a61      	cmp	r2, #97	; 0x61
 8007ed2:	bf08      	it	eq
 8007ed4:	461f      	moveq	r7, r3
 8007ed6:	9712      	str	r7, [sp, #72]	; 0x48
 8007ed8:	1e6f      	subs	r7, r5, #1
 8007eda:	2200      	movs	r2, #0
 8007edc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ee0:	4ba3      	ldr	r3, [pc, #652]	; (8008170 <_vfprintf_r+0x8d8>)
 8007ee2:	f7f8 faf9 	bl	80004d8 <__aeabi_dmul>
 8007ee6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007eea:	f7f8 fda5 	bl	8000a38 <__aeabi_d2iz>
 8007eee:	901e      	str	r0, [sp, #120]	; 0x78
 8007ef0:	f7f8 fa88 	bl	8000404 <__aeabi_i2d>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007efc:	f7f8 f934 	bl	8000168 <__aeabi_dsub>
 8007f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007f04:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f08:	5c9b      	ldrb	r3, [r3, r2]
 8007f0a:	971f      	str	r7, [sp, #124]	; 0x7c
 8007f0c:	f806 3b01 	strb.w	r3, [r6], #1
 8007f10:	1c7b      	adds	r3, r7, #1
 8007f12:	d006      	beq.n	8007f22 <_vfprintf_r+0x68a>
 8007f14:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8007f18:	3f01      	subs	r7, #1
 8007f1a:	f7f8 fd45 	bl	80009a8 <__aeabi_dcmpeq>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d0db      	beq.n	8007eda <_vfprintf_r+0x642>
 8007f22:	2200      	movs	r2, #0
 8007f24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f28:	4b92      	ldr	r3, [pc, #584]	; (8008174 <_vfprintf_r+0x8dc>)
 8007f2a:	f7f8 fd65 	bl	80009f8 <__aeabi_dcmpgt>
 8007f2e:	b960      	cbnz	r0, 8007f4a <_vfprintf_r+0x6b2>
 8007f30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f34:	2200      	movs	r2, #0
 8007f36:	4b8f      	ldr	r3, [pc, #572]	; (8008174 <_vfprintf_r+0x8dc>)
 8007f38:	f7f8 fd36 	bl	80009a8 <__aeabi_dcmpeq>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	f000 8097 	beq.w	8008070 <_vfprintf_r+0x7d8>
 8007f42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007f44:	07df      	lsls	r7, r3, #31
 8007f46:	f140 8093 	bpl.w	8008070 <_vfprintf_r+0x7d8>
 8007f4a:	2030      	movs	r0, #48	; 0x30
 8007f4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f4e:	9626      	str	r6, [sp, #152]	; 0x98
 8007f50:	7bd9      	ldrb	r1, [r3, #15]
 8007f52:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f54:	1e53      	subs	r3, r2, #1
 8007f56:	9326      	str	r3, [sp, #152]	; 0x98
 8007f58:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8007f5c:	428b      	cmp	r3, r1
 8007f5e:	d07e      	beq.n	800805e <_vfprintf_r+0x7c6>
 8007f60:	2b39      	cmp	r3, #57	; 0x39
 8007f62:	bf0b      	itete	eq
 8007f64:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 8007f66:	3301      	addne	r3, #1
 8007f68:	7a9b      	ldrbeq	r3, [r3, #10]
 8007f6a:	b2db      	uxtbne	r3, r3
 8007f6c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f70:	4633      	mov	r3, r6
 8007f72:	9a07      	ldr	r2, [sp, #28]
 8007f74:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	9308      	str	r3, [sp, #32]
 8007f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f7c:	2b47      	cmp	r3, #71	; 0x47
 8007f7e:	f040 80c8 	bne.w	8008112 <_vfprintf_r+0x87a>
 8007f82:	1cf0      	adds	r0, r6, #3
 8007f84:	db02      	blt.n	8007f8c <_vfprintf_r+0x6f4>
 8007f86:	42b5      	cmp	r5, r6
 8007f88:	f280 80f6 	bge.w	8008178 <_vfprintf_r+0x8e0>
 8007f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8e:	3b02      	subs	r3, #2
 8007f90:	930a      	str	r3, [sp, #40]	; 0x28
 8007f92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f94:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8007f98:	f021 0120 	bic.w	r1, r1, #32
 8007f9c:	2941      	cmp	r1, #65	; 0x41
 8007f9e:	bf08      	it	eq
 8007fa0:	320f      	addeq	r2, #15
 8007fa2:	f106 33ff 	add.w	r3, r6, #4294967295
 8007fa6:	bf06      	itte	eq
 8007fa8:	b2d2      	uxtbeq	r2, r2
 8007faa:	2101      	moveq	r1, #1
 8007fac:	2100      	movne	r1, #0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8007fb4:	bfb4      	ite	lt
 8007fb6:	222d      	movlt	r2, #45	; 0x2d
 8007fb8:	222b      	movge	r2, #43	; 0x2b
 8007fba:	9322      	str	r3, [sp, #136]	; 0x88
 8007fbc:	bfb8      	it	lt
 8007fbe:	f1c6 0301 	rsblt	r3, r6, #1
 8007fc2:	2b09      	cmp	r3, #9
 8007fc4:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8007fc8:	f340 80ba 	ble.w	8008140 <_vfprintf_r+0x8a8>
 8007fcc:	250a      	movs	r5, #10
 8007fce:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8007fd2:	fb93 f0f5 	sdiv	r0, r3, r5
 8007fd6:	fb05 3310 	mls	r3, r5, r0, r3
 8007fda:	2809      	cmp	r0, #9
 8007fdc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8007fe0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007fe4:	f102 31ff 	add.w	r1, r2, #4294967295
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f300 80a2 	bgt.w	8008132 <_vfprintf_r+0x89a>
 8007fee:	3330      	adds	r3, #48	; 0x30
 8007ff0:	f801 3c01 	strb.w	r3, [r1, #-1]
 8007ff4:	3a02      	subs	r2, #2
 8007ff6:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8007ffa:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8007ffe:	4282      	cmp	r2, r0
 8008000:	4619      	mov	r1, r3
 8008002:	f0c0 8098 	bcc.w	8008136 <_vfprintf_r+0x89e>
 8008006:	9a08      	ldr	r2, [sp, #32]
 8008008:	ab24      	add	r3, sp, #144	; 0x90
 800800a:	1acb      	subs	r3, r1, r3
 800800c:	2a01      	cmp	r2, #1
 800800e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008010:	eb03 0502 	add.w	r5, r3, r2
 8008014:	dc02      	bgt.n	800801c <_vfprintf_r+0x784>
 8008016:	f01a 0f01 	tst.w	sl, #1
 800801a:	d001      	beq.n	8008020 <_vfprintf_r+0x788>
 800801c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800801e:	441d      	add	r5, r3
 8008020:	2700      	movs	r7, #0
 8008022:	463e      	mov	r6, r7
 8008024:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8008028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800802c:	9315      	str	r3, [sp, #84]	; 0x54
 800802e:	970b      	str	r7, [sp, #44]	; 0x2c
 8008030:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 8314 	beq.w	8008660 <_vfprintf_r+0xdc8>
 8008038:	232d      	movs	r3, #45	; 0x2d
 800803a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800803e:	2300      	movs	r3, #0
 8008040:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8008044:	9312      	str	r3, [sp, #72]	; 0x48
 8008046:	e158      	b.n	80082fa <_vfprintf_r+0xa62>
 8008048:	ab3b      	add	r3, sp, #236	; 0xec
 800804a:	9307      	str	r3, [sp, #28]
 800804c:	e717      	b.n	8007e7e <_vfprintf_r+0x5e6>
 800804e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008052:	e714      	b.n	8007e7e <_vfprintf_r+0x5e6>
 8008054:	2506      	movs	r5, #6
 8008056:	e712      	b.n	8007e7e <_vfprintf_r+0x5e6>
 8008058:	46a8      	mov	r8, r5
 800805a:	2501      	movs	r5, #1
 800805c:	e70f      	b.n	8007e7e <_vfprintf_r+0x5e6>
 800805e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8008062:	e776      	b.n	8007f52 <_vfprintf_r+0x6ba>
 8008064:	f803 1b01 	strb.w	r1, [r3], #1
 8008068:	1af2      	subs	r2, r6, r3
 800806a:	2a00      	cmp	r2, #0
 800806c:	dafa      	bge.n	8008064 <_vfprintf_r+0x7cc>
 800806e:	e780      	b.n	8007f72 <_vfprintf_r+0x6da>
 8008070:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008072:	4633      	mov	r3, r6
 8008074:	2130      	movs	r1, #48	; 0x30
 8008076:	4416      	add	r6, r2
 8008078:	e7f6      	b.n	8008068 <_vfprintf_r+0x7d0>
 800807a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800807c:	2b46      	cmp	r3, #70	; 0x46
 800807e:	d004      	beq.n	800808a <_vfprintf_r+0x7f2>
 8008080:	2b45      	cmp	r3, #69	; 0x45
 8008082:	d140      	bne.n	8008106 <_vfprintf_r+0x86e>
 8008084:	1c6f      	adds	r7, r5, #1
 8008086:	2302      	movs	r3, #2
 8008088:	e001      	b.n	800808e <_vfprintf_r+0x7f6>
 800808a:	462f      	mov	r7, r5
 800808c:	2303      	movs	r3, #3
 800808e:	aa26      	add	r2, sp, #152	; 0x98
 8008090:	9204      	str	r2, [sp, #16]
 8008092:	aa23      	add	r2, sp, #140	; 0x8c
 8008094:	9203      	str	r2, [sp, #12]
 8008096:	aa22      	add	r2, sp, #136	; 0x88
 8008098:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	9a08      	ldr	r2, [sp, #32]
 80080a0:	4633      	mov	r3, r6
 80080a2:	4658      	mov	r0, fp
 80080a4:	f000 ff94 	bl	8008fd0 <_dtoa_r>
 80080a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080aa:	9007      	str	r0, [sp, #28]
 80080ac:	2b47      	cmp	r3, #71	; 0x47
 80080ae:	d102      	bne.n	80080b6 <_vfprintf_r+0x81e>
 80080b0:	f01a 0f01 	tst.w	sl, #1
 80080b4:	d02b      	beq.n	800810e <_vfprintf_r+0x876>
 80080b6:	9b07      	ldr	r3, [sp, #28]
 80080b8:	443b      	add	r3, r7
 80080ba:	9312      	str	r3, [sp, #72]	; 0x48
 80080bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080be:	2b46      	cmp	r3, #70	; 0x46
 80080c0:	d111      	bne.n	80080e6 <_vfprintf_r+0x84e>
 80080c2:	9b07      	ldr	r3, [sp, #28]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b30      	cmp	r3, #48	; 0x30
 80080c8:	d109      	bne.n	80080de <_vfprintf_r+0x846>
 80080ca:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80080ce:	9808      	ldr	r0, [sp, #32]
 80080d0:	4631      	mov	r1, r6
 80080d2:	f7f8 fc69 	bl	80009a8 <__aeabi_dcmpeq>
 80080d6:	b910      	cbnz	r0, 80080de <_vfprintf_r+0x846>
 80080d8:	f1c7 0701 	rsb	r7, r7, #1
 80080dc:	9722      	str	r7, [sp, #136]	; 0x88
 80080de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080e2:	441a      	add	r2, r3
 80080e4:	9212      	str	r2, [sp, #72]	; 0x48
 80080e6:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80080ea:	9808      	ldr	r0, [sp, #32]
 80080ec:	4631      	mov	r1, r6
 80080ee:	f7f8 fc5b 	bl	80009a8 <__aeabi_dcmpeq>
 80080f2:	b950      	cbnz	r0, 800810a <_vfprintf_r+0x872>
 80080f4:	2230      	movs	r2, #48	; 0x30
 80080f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80080fa:	4299      	cmp	r1, r3
 80080fc:	d907      	bls.n	800810e <_vfprintf_r+0x876>
 80080fe:	1c59      	adds	r1, r3, #1
 8008100:	9126      	str	r1, [sp, #152]	; 0x98
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e7f7      	b.n	80080f6 <_vfprintf_r+0x85e>
 8008106:	462f      	mov	r7, r5
 8008108:	e7bd      	b.n	8008086 <_vfprintf_r+0x7ee>
 800810a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800810c:	9326      	str	r3, [sp, #152]	; 0x98
 800810e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008110:	e72f      	b.n	8007f72 <_vfprintf_r+0x6da>
 8008112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008114:	2b46      	cmp	r3, #70	; 0x46
 8008116:	f47f af3c 	bne.w	8007f92 <_vfprintf_r+0x6fa>
 800811a:	2e00      	cmp	r6, #0
 800811c:	dd1d      	ble.n	800815a <_vfprintf_r+0x8c2>
 800811e:	b915      	cbnz	r5, 8008126 <_vfprintf_r+0x88e>
 8008120:	f01a 0f01 	tst.w	sl, #1
 8008124:	d03c      	beq.n	80081a0 <_vfprintf_r+0x908>
 8008126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008128:	18f3      	adds	r3, r6, r3
 800812a:	441d      	add	r5, r3
 800812c:	2366      	movs	r3, #102	; 0x66
 800812e:	930a      	str	r3, [sp, #40]	; 0x28
 8008130:	e03b      	b.n	80081aa <_vfprintf_r+0x912>
 8008132:	460a      	mov	r2, r1
 8008134:	e74d      	b.n	8007fd2 <_vfprintf_r+0x73a>
 8008136:	f812 1b01 	ldrb.w	r1, [r2], #1
 800813a:	f803 1b01 	strb.w	r1, [r3], #1
 800813e:	e75e      	b.n	8007ffe <_vfprintf_r+0x766>
 8008140:	b941      	cbnz	r1, 8008154 <_vfprintf_r+0x8bc>
 8008142:	2230      	movs	r2, #48	; 0x30
 8008144:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 8008148:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 800814c:	3330      	adds	r3, #48	; 0x30
 800814e:	1c51      	adds	r1, r2, #1
 8008150:	7013      	strb	r3, [r2, #0]
 8008152:	e758      	b.n	8008006 <_vfprintf_r+0x76e>
 8008154:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8008158:	e7f8      	b.n	800814c <_vfprintf_r+0x8b4>
 800815a:	b915      	cbnz	r5, 8008162 <_vfprintf_r+0x8ca>
 800815c:	f01a 0f01 	tst.w	sl, #1
 8008160:	d020      	beq.n	80081a4 <_vfprintf_r+0x90c>
 8008162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008164:	3301      	adds	r3, #1
 8008166:	e7e0      	b.n	800812a <_vfprintf_r+0x892>
 8008168:	0800e99d 	.word	0x0800e99d
 800816c:	0800e98c 	.word	0x0800e98c
 8008170:	40300000 	.word	0x40300000
 8008174:	3fe00000 	.word	0x3fe00000
 8008178:	9b08      	ldr	r3, [sp, #32]
 800817a:	42b3      	cmp	r3, r6
 800817c:	dc06      	bgt.n	800818c <_vfprintf_r+0x8f4>
 800817e:	f01a 0f01 	tst.w	sl, #1
 8008182:	d025      	beq.n	80081d0 <_vfprintf_r+0x938>
 8008184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008186:	18f5      	adds	r5, r6, r3
 8008188:	2367      	movs	r3, #103	; 0x67
 800818a:	e7d0      	b.n	800812e <_vfprintf_r+0x896>
 800818c:	9b08      	ldr	r3, [sp, #32]
 800818e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008190:	2e00      	cmp	r6, #0
 8008192:	eb03 0502 	add.w	r5, r3, r2
 8008196:	dcf7      	bgt.n	8008188 <_vfprintf_r+0x8f0>
 8008198:	f1c6 0301 	rsb	r3, r6, #1
 800819c:	441d      	add	r5, r3
 800819e:	e7f3      	b.n	8008188 <_vfprintf_r+0x8f0>
 80081a0:	4635      	mov	r5, r6
 80081a2:	e7c3      	b.n	800812c <_vfprintf_r+0x894>
 80081a4:	2366      	movs	r3, #102	; 0x66
 80081a6:	2501      	movs	r5, #1
 80081a8:	930a      	str	r3, [sp, #40]	; 0x28
 80081aa:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 80081ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80081b0:	d01f      	beq.n	80081f2 <_vfprintf_r+0x95a>
 80081b2:	2700      	movs	r7, #0
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	970b      	str	r7, [sp, #44]	; 0x2c
 80081b8:	f77f af3a 	ble.w	8008030 <_vfprintf_r+0x798>
 80081bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2bff      	cmp	r3, #255	; 0xff
 80081c2:	d107      	bne.n	80081d4 <_vfprintf_r+0x93c>
 80081c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80081c8:	443b      	add	r3, r7
 80081ca:	fb02 5503 	mla	r5, r2, r3, r5
 80081ce:	e72f      	b.n	8008030 <_vfprintf_r+0x798>
 80081d0:	4635      	mov	r5, r6
 80081d2:	e7d9      	b.n	8008188 <_vfprintf_r+0x8f0>
 80081d4:	42b3      	cmp	r3, r6
 80081d6:	daf5      	bge.n	80081c4 <_vfprintf_r+0x92c>
 80081d8:	1af6      	subs	r6, r6, r3
 80081da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081dc:	785b      	ldrb	r3, [r3, #1]
 80081de:	b133      	cbz	r3, 80081ee <_vfprintf_r+0x956>
 80081e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e2:	3301      	adds	r3, #1
 80081e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80081e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081e8:	3301      	adds	r3, #1
 80081ea:	930c      	str	r3, [sp, #48]	; 0x30
 80081ec:	e7e6      	b.n	80081bc <_vfprintf_r+0x924>
 80081ee:	3701      	adds	r7, #1
 80081f0:	e7e4      	b.n	80081bc <_vfprintf_r+0x924>
 80081f2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80081f4:	e71c      	b.n	8008030 <_vfprintf_r+0x798>
 80081f6:	4632      	mov	r2, r6
 80081f8:	f852 3b04 	ldr.w	r3, [r2], #4
 80081fc:	f01a 0f20 	tst.w	sl, #32
 8008200:	920d      	str	r2, [sp, #52]	; 0x34
 8008202:	d009      	beq.n	8008218 <_vfprintf_r+0x980>
 8008204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008206:	4610      	mov	r0, r2
 8008208:	17d1      	asrs	r1, r2, #31
 800820a:	e9c3 0100 	strd	r0, r1, [r3]
 800820e:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	; 0x34
 8008212:	9307      	str	r3, [sp, #28]
 8008214:	f7ff bbbe 	b.w	8007994 <_vfprintf_r+0xfc>
 8008218:	f01a 0f10 	tst.w	sl, #16
 800821c:	d002      	beq.n	8008224 <_vfprintf_r+0x98c>
 800821e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	e7f4      	b.n	800820e <_vfprintf_r+0x976>
 8008224:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008228:	d002      	beq.n	8008230 <_vfprintf_r+0x998>
 800822a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800822c:	801a      	strh	r2, [r3, #0]
 800822e:	e7ee      	b.n	800820e <_vfprintf_r+0x976>
 8008230:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008234:	d0f3      	beq.n	800821e <_vfprintf_r+0x986>
 8008236:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	e7e8      	b.n	800820e <_vfprintf_r+0x976>
 800823c:	f04a 0a10 	orr.w	sl, sl, #16
 8008240:	f01a 0f20 	tst.w	sl, #32
 8008244:	d01e      	beq.n	8008284 <_vfprintf_r+0x9ec>
 8008246:	3607      	adds	r6, #7
 8008248:	f026 0607 	bic.w	r6, r6, #7
 800824c:	f106 0308 	add.w	r3, r6, #8
 8008250:	930d      	str	r3, [sp, #52]	; 0x34
 8008252:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008256:	2300      	movs	r3, #0
 8008258:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800825c:	2200      	movs	r2, #0
 800825e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8008262:	1c6a      	adds	r2, r5, #1
 8008264:	f000 815a 	beq.w	800851c <_vfprintf_r+0xc84>
 8008268:	4652      	mov	r2, sl
 800826a:	ea56 0107 	orrs.w	r1, r6, r7
 800826e:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8008272:	f040 8153 	bne.w	800851c <_vfprintf_r+0xc84>
 8008276:	2d00      	cmp	r5, #0
 8008278:	f000 81d9 	beq.w	800862e <_vfprintf_r+0xd96>
 800827c:	2b01      	cmp	r3, #1
 800827e:	f040 8150 	bne.w	8008522 <_vfprintf_r+0xc8a>
 8008282:	e550      	b.n	8007d26 <_vfprintf_r+0x48e>
 8008284:	1d33      	adds	r3, r6, #4
 8008286:	f01a 0f10 	tst.w	sl, #16
 800828a:	930d      	str	r3, [sp, #52]	; 0x34
 800828c:	d001      	beq.n	8008292 <_vfprintf_r+0x9fa>
 800828e:	6836      	ldr	r6, [r6, #0]
 8008290:	e003      	b.n	800829a <_vfprintf_r+0xa02>
 8008292:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008296:	d002      	beq.n	800829e <_vfprintf_r+0xa06>
 8008298:	8836      	ldrh	r6, [r6, #0]
 800829a:	2700      	movs	r7, #0
 800829c:	e7db      	b.n	8008256 <_vfprintf_r+0x9be>
 800829e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80082a2:	d0f4      	beq.n	800828e <_vfprintf_r+0x9f6>
 80082a4:	7836      	ldrb	r6, [r6, #0]
 80082a6:	e7f8      	b.n	800829a <_vfprintf_r+0xa02>
 80082a8:	1d33      	adds	r3, r6, #4
 80082aa:	930d      	str	r3, [sp, #52]	; 0x34
 80082ac:	f647 0330 	movw	r3, #30768	; 0x7830
 80082b0:	2278      	movs	r2, #120	; 0x78
 80082b2:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 80082b6:	4bab      	ldr	r3, [pc, #684]	; (8008564 <_vfprintf_r+0xccc>)
 80082b8:	6836      	ldr	r6, [r6, #0]
 80082ba:	931c      	str	r3, [sp, #112]	; 0x70
 80082bc:	2700      	movs	r7, #0
 80082be:	f04a 0a02 	orr.w	sl, sl, #2
 80082c2:	2302      	movs	r3, #2
 80082c4:	920a      	str	r2, [sp, #40]	; 0x28
 80082c6:	e7c9      	b.n	800825c <_vfprintf_r+0x9c4>
 80082c8:	1d33      	adds	r3, r6, #4
 80082ca:	930d      	str	r3, [sp, #52]	; 0x34
 80082cc:	6833      	ldr	r3, [r6, #0]
 80082ce:	2600      	movs	r6, #0
 80082d0:	1c69      	adds	r1, r5, #1
 80082d2:	9307      	str	r3, [sp, #28]
 80082d4:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 80082d8:	f000 80e0 	beq.w	800849c <_vfprintf_r+0xc04>
 80082dc:	462a      	mov	r2, r5
 80082de:	4631      	mov	r1, r6
 80082e0:	4618      	mov	r0, r3
 80082e2:	f002 fa85 	bl	800a7f0 <memchr>
 80082e6:	4680      	mov	r8, r0
 80082e8:	2800      	cmp	r0, #0
 80082ea:	f43f ad68 	beq.w	8007dbe <_vfprintf_r+0x526>
 80082ee:	46b0      	mov	r8, r6
 80082f0:	4637      	mov	r7, r6
 80082f2:	9b07      	ldr	r3, [sp, #28]
 80082f4:	9612      	str	r6, [sp, #72]	; 0x48
 80082f6:	1ac5      	subs	r5, r0, r3
 80082f8:	960b      	str	r6, [sp, #44]	; 0x2c
 80082fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082fc:	42ab      	cmp	r3, r5
 80082fe:	bfb8      	it	lt
 8008300:	462b      	movlt	r3, r5
 8008302:	9315      	str	r3, [sp, #84]	; 0x54
 8008304:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8008308:	b113      	cbz	r3, 8008310 <_vfprintf_r+0xa78>
 800830a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800830c:	3301      	adds	r3, #1
 800830e:	9315      	str	r3, [sp, #84]	; 0x54
 8008310:	f01a 0302 	ands.w	r3, sl, #2
 8008314:	931e      	str	r3, [sp, #120]	; 0x78
 8008316:	bf1e      	ittt	ne
 8008318:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 800831a:	3302      	addne	r3, #2
 800831c:	9315      	strne	r3, [sp, #84]	; 0x54
 800831e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8008322:	931f      	str	r3, [sp, #124]	; 0x7c
 8008324:	d121      	bne.n	800836a <_vfprintf_r+0xad2>
 8008326:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008328:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	2b00      	cmp	r3, #0
 800832e:	9319      	str	r3, [sp, #100]	; 0x64
 8008330:	dd1b      	ble.n	800836a <_vfprintf_r+0xad2>
 8008332:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8008336:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008338:	3201      	adds	r2, #1
 800833a:	2810      	cmp	r0, #16
 800833c:	488a      	ldr	r0, [pc, #552]	; (8008568 <_vfprintf_r+0xcd0>)
 800833e:	f104 0108 	add.w	r1, r4, #8
 8008342:	6020      	str	r0, [r4, #0]
 8008344:	f300 8190 	bgt.w	8008668 <_vfprintf_r+0xdd0>
 8008348:	9819      	ldr	r0, [sp, #100]	; 0x64
 800834a:	2a07      	cmp	r2, #7
 800834c:	4403      	add	r3, r0
 800834e:	6060      	str	r0, [r4, #4]
 8008350:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008354:	f340 819d 	ble.w	8008692 <_vfprintf_r+0xdfa>
 8008358:	aa28      	add	r2, sp, #160	; 0xa0
 800835a:	4649      	mov	r1, r9
 800835c:	4658      	mov	r0, fp
 800835e:	f003 f802 	bl	800b366 <__sprint_r>
 8008362:	2800      	cmp	r0, #0
 8008364:	f040 84c7 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008368:	ac2b      	add	r4, sp, #172	; 0xac
 800836a:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 800836e:	b173      	cbz	r3, 800838e <_vfprintf_r+0xaf6>
 8008370:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	2301      	movs	r3, #1
 8008378:	6063      	str	r3, [r4, #4]
 800837a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800837c:	3301      	adds	r3, #1
 800837e:	932a      	str	r3, [sp, #168]	; 0xa8
 8008380:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008382:	3301      	adds	r3, #1
 8008384:	2b07      	cmp	r3, #7
 8008386:	9329      	str	r3, [sp, #164]	; 0xa4
 8008388:	f300 8185 	bgt.w	8008696 <_vfprintf_r+0xdfe>
 800838c:	3408      	adds	r4, #8
 800838e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008390:	b16b      	cbz	r3, 80083ae <_vfprintf_r+0xb16>
 8008392:	ab21      	add	r3, sp, #132	; 0x84
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	2302      	movs	r3, #2
 8008398:	6063      	str	r3, [r4, #4]
 800839a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800839c:	3302      	adds	r3, #2
 800839e:	932a      	str	r3, [sp, #168]	; 0xa8
 80083a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80083a2:	3301      	adds	r3, #1
 80083a4:	2b07      	cmp	r3, #7
 80083a6:	9329      	str	r3, [sp, #164]	; 0xa4
 80083a8:	f300 817f 	bgt.w	80086aa <_vfprintf_r+0xe12>
 80083ac:	3408      	adds	r4, #8
 80083ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083b0:	2b80      	cmp	r3, #128	; 0x80
 80083b2:	d121      	bne.n	80083f8 <_vfprintf_r+0xb60>
 80083b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	9319      	str	r3, [sp, #100]	; 0x64
 80083be:	dd1b      	ble.n	80083f8 <_vfprintf_r+0xb60>
 80083c0:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 80083c4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80083c6:	3201      	adds	r2, #1
 80083c8:	2810      	cmp	r0, #16
 80083ca:	4868      	ldr	r0, [pc, #416]	; (800856c <_vfprintf_r+0xcd4>)
 80083cc:	f104 0108 	add.w	r1, r4, #8
 80083d0:	6020      	str	r0, [r4, #0]
 80083d2:	f300 8174 	bgt.w	80086be <_vfprintf_r+0xe26>
 80083d6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80083d8:	2a07      	cmp	r2, #7
 80083da:	4403      	add	r3, r0
 80083dc:	6060      	str	r0, [r4, #4]
 80083de:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80083e2:	f340 8181 	ble.w	80086e8 <_vfprintf_r+0xe50>
 80083e6:	aa28      	add	r2, sp, #160	; 0xa0
 80083e8:	4649      	mov	r1, r9
 80083ea:	4658      	mov	r0, fp
 80083ec:	f002 ffbb 	bl	800b366 <__sprint_r>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	f040 8480 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 80083f6:	ac2b      	add	r4, sp, #172	; 0xac
 80083f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083fa:	1b5b      	subs	r3, r3, r5
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	9312      	str	r3, [sp, #72]	; 0x48
 8008400:	dd1b      	ble.n	800843a <_vfprintf_r+0xba2>
 8008402:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8008406:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008408:	3201      	adds	r2, #1
 800840a:	2810      	cmp	r0, #16
 800840c:	4857      	ldr	r0, [pc, #348]	; (800856c <_vfprintf_r+0xcd4>)
 800840e:	f104 0108 	add.w	r1, r4, #8
 8008412:	6020      	str	r0, [r4, #0]
 8008414:	f300 816a 	bgt.w	80086ec <_vfprintf_r+0xe54>
 8008418:	9812      	ldr	r0, [sp, #72]	; 0x48
 800841a:	2a07      	cmp	r2, #7
 800841c:	4403      	add	r3, r0
 800841e:	6060      	str	r0, [r4, #4]
 8008420:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008424:	f340 8177 	ble.w	8008716 <_vfprintf_r+0xe7e>
 8008428:	aa28      	add	r2, sp, #160	; 0xa0
 800842a:	4649      	mov	r1, r9
 800842c:	4658      	mov	r0, fp
 800842e:	f002 ff9a 	bl	800b366 <__sprint_r>
 8008432:	2800      	cmp	r0, #0
 8008434:	f040 845f 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008438:	ac2b      	add	r4, sp, #172	; 0xac
 800843a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800843c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008440:	9312      	str	r3, [sp, #72]	; 0x48
 8008442:	f040 816a 	bne.w	800871a <_vfprintf_r+0xe82>
 8008446:	9b07      	ldr	r3, [sp, #28]
 8008448:	e9c4 3500 	strd	r3, r5, [r4]
 800844c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800844e:	441d      	add	r5, r3
 8008450:	952a      	str	r5, [sp, #168]	; 0xa8
 8008452:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008454:	3301      	adds	r3, #1
 8008456:	2b07      	cmp	r3, #7
 8008458:	9329      	str	r3, [sp, #164]	; 0xa4
 800845a:	f300 81a4 	bgt.w	80087a6 <_vfprintf_r+0xf0e>
 800845e:	3408      	adds	r4, #8
 8008460:	f01a 0f04 	tst.w	sl, #4
 8008464:	f040 8429 	bne.w	8008cba <_vfprintf_r+0x1422>
 8008468:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800846c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800846e:	428a      	cmp	r2, r1
 8008470:	bfac      	ite	ge
 8008472:	189b      	addge	r3, r3, r2
 8008474:	185b      	addlt	r3, r3, r1
 8008476:	9310      	str	r3, [sp, #64]	; 0x40
 8008478:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800847a:	b13b      	cbz	r3, 800848c <_vfprintf_r+0xbf4>
 800847c:	aa28      	add	r2, sp, #160	; 0xa0
 800847e:	4649      	mov	r1, r9
 8008480:	4658      	mov	r0, fp
 8008482:	f002 ff70 	bl	800b366 <__sprint_r>
 8008486:	2800      	cmp	r0, #0
 8008488:	f040 8435 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 800848c:	2300      	movs	r3, #0
 800848e:	9329      	str	r3, [sp, #164]	; 0xa4
 8008490:	f1b8 0f00 	cmp.w	r8, #0
 8008494:	f040 844b 	bne.w	8008d2e <_vfprintf_r+0x1496>
 8008498:	ac2b      	add	r4, sp, #172	; 0xac
 800849a:	e6b8      	b.n	800820e <_vfprintf_r+0x976>
 800849c:	9807      	ldr	r0, [sp, #28]
 800849e:	f7f7 fe57 	bl	8000150 <strlen>
 80084a2:	46b0      	mov	r8, r6
 80084a4:	4605      	mov	r5, r0
 80084a6:	e48a      	b.n	8007dbe <_vfprintf_r+0x526>
 80084a8:	f04a 0a10 	orr.w	sl, sl, #16
 80084ac:	f01a 0f20 	tst.w	sl, #32
 80084b0:	d009      	beq.n	80084c6 <_vfprintf_r+0xc2e>
 80084b2:	3607      	adds	r6, #7
 80084b4:	f026 0607 	bic.w	r6, r6, #7
 80084b8:	f106 0308 	add.w	r3, r6, #8
 80084bc:	930d      	str	r3, [sp, #52]	; 0x34
 80084be:	e9d6 6700 	ldrd	r6, r7, [r6]
 80084c2:	2301      	movs	r3, #1
 80084c4:	e6ca      	b.n	800825c <_vfprintf_r+0x9c4>
 80084c6:	1d33      	adds	r3, r6, #4
 80084c8:	f01a 0f10 	tst.w	sl, #16
 80084cc:	930d      	str	r3, [sp, #52]	; 0x34
 80084ce:	d001      	beq.n	80084d4 <_vfprintf_r+0xc3c>
 80084d0:	6836      	ldr	r6, [r6, #0]
 80084d2:	e003      	b.n	80084dc <_vfprintf_r+0xc44>
 80084d4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80084d8:	d002      	beq.n	80084e0 <_vfprintf_r+0xc48>
 80084da:	8836      	ldrh	r6, [r6, #0]
 80084dc:	2700      	movs	r7, #0
 80084de:	e7f0      	b.n	80084c2 <_vfprintf_r+0xc2a>
 80084e0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80084e4:	d0f4      	beq.n	80084d0 <_vfprintf_r+0xc38>
 80084e6:	7836      	ldrb	r6, [r6, #0]
 80084e8:	e7f8      	b.n	80084dc <_vfprintf_r+0xc44>
 80084ea:	4b1e      	ldr	r3, [pc, #120]	; (8008564 <_vfprintf_r+0xccc>)
 80084ec:	f7ff bb4d 	b.w	8007b8a <_vfprintf_r+0x2f2>
 80084f0:	1d33      	adds	r3, r6, #4
 80084f2:	f01a 0f10 	tst.w	sl, #16
 80084f6:	930d      	str	r3, [sp, #52]	; 0x34
 80084f8:	d001      	beq.n	80084fe <_vfprintf_r+0xc66>
 80084fa:	6836      	ldr	r6, [r6, #0]
 80084fc:	e003      	b.n	8008506 <_vfprintf_r+0xc6e>
 80084fe:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008502:	d003      	beq.n	800850c <_vfprintf_r+0xc74>
 8008504:	8836      	ldrh	r6, [r6, #0]
 8008506:	2700      	movs	r7, #0
 8008508:	f7ff bb4c 	b.w	8007ba4 <_vfprintf_r+0x30c>
 800850c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008510:	d0f3      	beq.n	80084fa <_vfprintf_r+0xc62>
 8008512:	7836      	ldrb	r6, [r6, #0]
 8008514:	e7f7      	b.n	8008506 <_vfprintf_r+0xc6e>
 8008516:	4652      	mov	r2, sl
 8008518:	2301      	movs	r3, #1
 800851a:	e6a6      	b.n	800826a <_vfprintf_r+0x9d2>
 800851c:	2b01      	cmp	r3, #1
 800851e:	f43f abfd 	beq.w	8007d1c <_vfprintf_r+0x484>
 8008522:	2b02      	cmp	r3, #2
 8008524:	ab54      	add	r3, sp, #336	; 0x150
 8008526:	d06f      	beq.n	8008608 <_vfprintf_r+0xd70>
 8008528:	08f1      	lsrs	r1, r6, #3
 800852a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800852e:	1e5a      	subs	r2, r3, #1
 8008530:	08f8      	lsrs	r0, r7, #3
 8008532:	9207      	str	r2, [sp, #28]
 8008534:	4607      	mov	r7, r0
 8008536:	f006 0207 	and.w	r2, r6, #7
 800853a:	460e      	mov	r6, r1
 800853c:	3230      	adds	r2, #48	; 0x30
 800853e:	ea56 0107 	orrs.w	r1, r6, r7
 8008542:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008546:	d10b      	bne.n	8008560 <_vfprintf_r+0xcc8>
 8008548:	f01a 0f01 	tst.w	sl, #1
 800854c:	d04e      	beq.n	80085ec <_vfprintf_r+0xd54>
 800854e:	2a30      	cmp	r2, #48	; 0x30
 8008550:	d04c      	beq.n	80085ec <_vfprintf_r+0xd54>
 8008552:	2230      	movs	r2, #48	; 0x30
 8008554:	9907      	ldr	r1, [sp, #28]
 8008556:	3b02      	subs	r3, #2
 8008558:	f801 2c01 	strb.w	r2, [r1, #-1]
 800855c:	9307      	str	r3, [sp, #28]
 800855e:	e045      	b.n	80085ec <_vfprintf_r+0xd54>
 8008560:	9b07      	ldr	r3, [sp, #28]
 8008562:	e7e1      	b.n	8008528 <_vfprintf_r+0xc90>
 8008564:	0800e98c 	.word	0x0800e98c
 8008568:	0800e9d0 	.word	0x0800e9d0
 800856c:	0800e9e0 	.word	0x0800e9e0
 8008570:	2300      	movs	r3, #0
 8008572:	9308      	str	r3, [sp, #32]
 8008574:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8008578:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 800857c:	930b      	str	r3, [sp, #44]	; 0x2c
 800857e:	f108 33ff 	add.w	r3, r8, #4294967295
 8008582:	9307      	str	r3, [sp, #28]
 8008584:	220a      	movs	r2, #10
 8008586:	2300      	movs	r3, #0
 8008588:	4630      	mov	r0, r6
 800858a:	4639      	mov	r1, r7
 800858c:	f7f8 fe36 	bl	80011fc <__aeabi_uldivmod>
 8008590:	9b08      	ldr	r3, [sp, #32]
 8008592:	3230      	adds	r2, #48	; 0x30
 8008594:	3301      	adds	r3, #1
 8008596:	9308      	str	r3, [sp, #32]
 8008598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800859a:	f808 2c01 	strb.w	r2, [r8, #-1]
 800859e:	b1d3      	cbz	r3, 80085d6 <_vfprintf_r+0xd3e>
 80085a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085a2:	9a08      	ldr	r2, [sp, #32]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d115      	bne.n	80085d6 <_vfprintf_r+0xd3e>
 80085aa:	2aff      	cmp	r2, #255	; 0xff
 80085ac:	d013      	beq.n	80085d6 <_vfprintf_r+0xd3e>
 80085ae:	2f00      	cmp	r7, #0
 80085b0:	bf08      	it	eq
 80085b2:	2e0a      	cmpeq	r6, #10
 80085b4:	d30f      	bcc.n	80085d6 <_vfprintf_r+0xd3e>
 80085b6:	9b07      	ldr	r3, [sp, #28]
 80085b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80085ba:	991d      	ldr	r1, [sp, #116]	; 0x74
 80085bc:	1a9b      	subs	r3, r3, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	9307      	str	r3, [sp, #28]
 80085c2:	f002 fe36 	bl	800b232 <strncpy>
 80085c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	b11b      	cbz	r3, 80085d4 <_vfprintf_r+0xd3c>
 80085cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ce:	3301      	adds	r3, #1
 80085d0:	930c      	str	r3, [sp, #48]	; 0x30
 80085d2:	2300      	movs	r3, #0
 80085d4:	9308      	str	r3, [sp, #32]
 80085d6:	2300      	movs	r3, #0
 80085d8:	4630      	mov	r0, r6
 80085da:	4639      	mov	r1, r7
 80085dc:	220a      	movs	r2, #10
 80085de:	f7f8 fe0d 	bl	80011fc <__aeabi_uldivmod>
 80085e2:	4606      	mov	r6, r0
 80085e4:	460f      	mov	r7, r1
 80085e6:	ea56 0307 	orrs.w	r3, r6, r7
 80085ea:	d10a      	bne.n	8008602 <_vfprintf_r+0xd6a>
 80085ec:	f04f 0800 	mov.w	r8, #0
 80085f0:	9a07      	ldr	r2, [sp, #28]
 80085f2:	ab54      	add	r3, sp, #336	; 0x150
 80085f4:	9512      	str	r5, [sp, #72]	; 0x48
 80085f6:	1a9d      	subs	r5, r3, r2
 80085f8:	4647      	mov	r7, r8
 80085fa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80085fe:	4646      	mov	r6, r8
 8008600:	e67b      	b.n	80082fa <_vfprintf_r+0xa62>
 8008602:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008606:	e7ba      	b.n	800857e <_vfprintf_r+0xce6>
 8008608:	9307      	str	r3, [sp, #28]
 800860a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800860c:	f006 030f 	and.w	r3, r6, #15
 8008610:	5cd3      	ldrb	r3, [r2, r3]
 8008612:	9a07      	ldr	r2, [sp, #28]
 8008614:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8008618:	0933      	lsrs	r3, r6, #4
 800861a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800861e:	9207      	str	r2, [sp, #28]
 8008620:	093a      	lsrs	r2, r7, #4
 8008622:	461e      	mov	r6, r3
 8008624:	4617      	mov	r7, r2
 8008626:	ea56 0307 	orrs.w	r3, r6, r7
 800862a:	d1ee      	bne.n	800860a <_vfprintf_r+0xd72>
 800862c:	e7de      	b.n	80085ec <_vfprintf_r+0xd54>
 800862e:	b94b      	cbnz	r3, 8008644 <_vfprintf_r+0xdac>
 8008630:	ab54      	add	r3, sp, #336	; 0x150
 8008632:	07d6      	lsls	r6, r2, #31
 8008634:	9307      	str	r3, [sp, #28]
 8008636:	d5d9      	bpl.n	80085ec <_vfprintf_r+0xd54>
 8008638:	2330      	movs	r3, #48	; 0x30
 800863a:	9a07      	ldr	r2, [sp, #28]
 800863c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8008640:	4613      	mov	r3, r2
 8008642:	e78b      	b.n	800855c <_vfprintf_r+0xcc4>
 8008644:	ab54      	add	r3, sp, #336	; 0x150
 8008646:	e789      	b.n	800855c <_vfprintf_r+0xcc4>
 8008648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 8375 	beq.w	8008d3a <_vfprintf_r+0x14a2>
 8008650:	2000      	movs	r0, #0
 8008652:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 8008656:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 800865a:	960d      	str	r6, [sp, #52]	; 0x34
 800865c:	f7ff bb3b 	b.w	8007cd6 <_vfprintf_r+0x43e>
 8008660:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8008664:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008666:	e4ed      	b.n	8008044 <_vfprintf_r+0x7ac>
 8008668:	2010      	movs	r0, #16
 800866a:	2a07      	cmp	r2, #7
 800866c:	4403      	add	r3, r0
 800866e:	6060      	str	r0, [r4, #4]
 8008670:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008674:	dd08      	ble.n	8008688 <_vfprintf_r+0xdf0>
 8008676:	aa28      	add	r2, sp, #160	; 0xa0
 8008678:	4649      	mov	r1, r9
 800867a:	4658      	mov	r0, fp
 800867c:	f002 fe73 	bl	800b366 <__sprint_r>
 8008680:	2800      	cmp	r0, #0
 8008682:	f040 8338 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008686:	a92b      	add	r1, sp, #172	; 0xac
 8008688:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800868a:	460c      	mov	r4, r1
 800868c:	3b10      	subs	r3, #16
 800868e:	9319      	str	r3, [sp, #100]	; 0x64
 8008690:	e64f      	b.n	8008332 <_vfprintf_r+0xa9a>
 8008692:	460c      	mov	r4, r1
 8008694:	e669      	b.n	800836a <_vfprintf_r+0xad2>
 8008696:	aa28      	add	r2, sp, #160	; 0xa0
 8008698:	4649      	mov	r1, r9
 800869a:	4658      	mov	r0, fp
 800869c:	f002 fe63 	bl	800b366 <__sprint_r>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	f040 8328 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 80086a6:	ac2b      	add	r4, sp, #172	; 0xac
 80086a8:	e671      	b.n	800838e <_vfprintf_r+0xaf6>
 80086aa:	aa28      	add	r2, sp, #160	; 0xa0
 80086ac:	4649      	mov	r1, r9
 80086ae:	4658      	mov	r0, fp
 80086b0:	f002 fe59 	bl	800b366 <__sprint_r>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	f040 831e 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 80086ba:	ac2b      	add	r4, sp, #172	; 0xac
 80086bc:	e677      	b.n	80083ae <_vfprintf_r+0xb16>
 80086be:	2010      	movs	r0, #16
 80086c0:	2a07      	cmp	r2, #7
 80086c2:	4403      	add	r3, r0
 80086c4:	6060      	str	r0, [r4, #4]
 80086c6:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80086ca:	dd08      	ble.n	80086de <_vfprintf_r+0xe46>
 80086cc:	aa28      	add	r2, sp, #160	; 0xa0
 80086ce:	4649      	mov	r1, r9
 80086d0:	4658      	mov	r0, fp
 80086d2:	f002 fe48 	bl	800b366 <__sprint_r>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	f040 830d 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 80086dc:	a92b      	add	r1, sp, #172	; 0xac
 80086de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086e0:	460c      	mov	r4, r1
 80086e2:	3b10      	subs	r3, #16
 80086e4:	9319      	str	r3, [sp, #100]	; 0x64
 80086e6:	e66b      	b.n	80083c0 <_vfprintf_r+0xb28>
 80086e8:	460c      	mov	r4, r1
 80086ea:	e685      	b.n	80083f8 <_vfprintf_r+0xb60>
 80086ec:	2010      	movs	r0, #16
 80086ee:	2a07      	cmp	r2, #7
 80086f0:	4403      	add	r3, r0
 80086f2:	6060      	str	r0, [r4, #4]
 80086f4:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80086f8:	dd08      	ble.n	800870c <_vfprintf_r+0xe74>
 80086fa:	aa28      	add	r2, sp, #160	; 0xa0
 80086fc:	4649      	mov	r1, r9
 80086fe:	4658      	mov	r0, fp
 8008700:	f002 fe31 	bl	800b366 <__sprint_r>
 8008704:	2800      	cmp	r0, #0
 8008706:	f040 82f6 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 800870a:	a92b      	add	r1, sp, #172	; 0xac
 800870c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800870e:	460c      	mov	r4, r1
 8008710:	3b10      	subs	r3, #16
 8008712:	9312      	str	r3, [sp, #72]	; 0x48
 8008714:	e675      	b.n	8008402 <_vfprintf_r+0xb6a>
 8008716:	460c      	mov	r4, r1
 8008718:	e68f      	b.n	800843a <_vfprintf_r+0xba2>
 800871a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800871c:	2b65      	cmp	r3, #101	; 0x65
 800871e:	f340 8237 	ble.w	8008b90 <_vfprintf_r+0x12f8>
 8008722:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008726:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 800872a:	f7f8 f93d 	bl	80009a8 <__aeabi_dcmpeq>
 800872e:	2800      	cmp	r0, #0
 8008730:	d069      	beq.n	8008806 <_vfprintf_r+0xf6e>
 8008732:	4b6f      	ldr	r3, [pc, #444]	; (80088f0 <_vfprintf_r+0x1058>)
 8008734:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	2301      	movs	r3, #1
 800873a:	441d      	add	r5, r3
 800873c:	6063      	str	r3, [r4, #4]
 800873e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008740:	952a      	str	r5, [sp, #168]	; 0xa8
 8008742:	3301      	adds	r3, #1
 8008744:	2b07      	cmp	r3, #7
 8008746:	9329      	str	r3, [sp, #164]	; 0xa4
 8008748:	dc37      	bgt.n	80087ba <_vfprintf_r+0xf22>
 800874a:	3408      	adds	r4, #8
 800874c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800874e:	9a08      	ldr	r2, [sp, #32]
 8008750:	4293      	cmp	r3, r2
 8008752:	db03      	blt.n	800875c <_vfprintf_r+0xec4>
 8008754:	f01a 0f01 	tst.w	sl, #1
 8008758:	f43f ae82 	beq.w	8008460 <_vfprintf_r+0xbc8>
 800875c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800875e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008764:	6063      	str	r3, [r4, #4]
 8008766:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008768:	4413      	add	r3, r2
 800876a:	932a      	str	r3, [sp, #168]	; 0xa8
 800876c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800876e:	3301      	adds	r3, #1
 8008770:	2b07      	cmp	r3, #7
 8008772:	9329      	str	r3, [sp, #164]	; 0xa4
 8008774:	dc2b      	bgt.n	80087ce <_vfprintf_r+0xf36>
 8008776:	3408      	adds	r4, #8
 8008778:	9b08      	ldr	r3, [sp, #32]
 800877a:	1e5d      	subs	r5, r3, #1
 800877c:	2d00      	cmp	r5, #0
 800877e:	f77f ae6f 	ble.w	8008460 <_vfprintf_r+0xbc8>
 8008782:	2710      	movs	r7, #16
 8008784:	4e5b      	ldr	r6, [pc, #364]	; (80088f4 <_vfprintf_r+0x105c>)
 8008786:	2d10      	cmp	r5, #16
 8008788:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800878c:	f104 0108 	add.w	r1, r4, #8
 8008790:	f103 0301 	add.w	r3, r3, #1
 8008794:	6026      	str	r6, [r4, #0]
 8008796:	dc24      	bgt.n	80087e2 <_vfprintf_r+0xf4a>
 8008798:	6065      	str	r5, [r4, #4]
 800879a:	2b07      	cmp	r3, #7
 800879c:	4415      	add	r5, r2
 800879e:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80087a2:	f340 8287 	ble.w	8008cb4 <_vfprintf_r+0x141c>
 80087a6:	aa28      	add	r2, sp, #160	; 0xa0
 80087a8:	4649      	mov	r1, r9
 80087aa:	4658      	mov	r0, fp
 80087ac:	f002 fddb 	bl	800b366 <__sprint_r>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	f040 82a0 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 80087b6:	ac2b      	add	r4, sp, #172	; 0xac
 80087b8:	e652      	b.n	8008460 <_vfprintf_r+0xbc8>
 80087ba:	aa28      	add	r2, sp, #160	; 0xa0
 80087bc:	4649      	mov	r1, r9
 80087be:	4658      	mov	r0, fp
 80087c0:	f002 fdd1 	bl	800b366 <__sprint_r>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f040 8296 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 80087ca:	ac2b      	add	r4, sp, #172	; 0xac
 80087cc:	e7be      	b.n	800874c <_vfprintf_r+0xeb4>
 80087ce:	aa28      	add	r2, sp, #160	; 0xa0
 80087d0:	4649      	mov	r1, r9
 80087d2:	4658      	mov	r0, fp
 80087d4:	f002 fdc7 	bl	800b366 <__sprint_r>
 80087d8:	2800      	cmp	r0, #0
 80087da:	f040 828c 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 80087de:	ac2b      	add	r4, sp, #172	; 0xac
 80087e0:	e7ca      	b.n	8008778 <_vfprintf_r+0xee0>
 80087e2:	3210      	adds	r2, #16
 80087e4:	2b07      	cmp	r3, #7
 80087e6:	6067      	str	r7, [r4, #4]
 80087e8:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80087ec:	dd08      	ble.n	8008800 <_vfprintf_r+0xf68>
 80087ee:	aa28      	add	r2, sp, #160	; 0xa0
 80087f0:	4649      	mov	r1, r9
 80087f2:	4658      	mov	r0, fp
 80087f4:	f002 fdb7 	bl	800b366 <__sprint_r>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	f040 827c 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 80087fe:	a92b      	add	r1, sp, #172	; 0xac
 8008800:	3d10      	subs	r5, #16
 8008802:	460c      	mov	r4, r1
 8008804:	e7bf      	b.n	8008786 <_vfprintf_r+0xeee>
 8008806:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008808:	2b00      	cmp	r3, #0
 800880a:	dc75      	bgt.n	80088f8 <_vfprintf_r+0x1060>
 800880c:	4b38      	ldr	r3, [pc, #224]	; (80088f0 <_vfprintf_r+0x1058>)
 800880e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	2301      	movs	r3, #1
 8008814:	441d      	add	r5, r3
 8008816:	6063      	str	r3, [r4, #4]
 8008818:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800881a:	952a      	str	r5, [sp, #168]	; 0xa8
 800881c:	3301      	adds	r3, #1
 800881e:	2b07      	cmp	r3, #7
 8008820:	9329      	str	r3, [sp, #164]	; 0xa4
 8008822:	dc3e      	bgt.n	80088a2 <_vfprintf_r+0x100a>
 8008824:	3408      	adds	r4, #8
 8008826:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008828:	b92b      	cbnz	r3, 8008836 <_vfprintf_r+0xf9e>
 800882a:	9b08      	ldr	r3, [sp, #32]
 800882c:	b91b      	cbnz	r3, 8008836 <_vfprintf_r+0xf9e>
 800882e:	f01a 0f01 	tst.w	sl, #1
 8008832:	f43f ae15 	beq.w	8008460 <_vfprintf_r+0xbc8>
 8008836:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008838:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800883a:	6023      	str	r3, [r4, #0]
 800883c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800883e:	6063      	str	r3, [r4, #4]
 8008840:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008842:	4413      	add	r3, r2
 8008844:	932a      	str	r3, [sp, #168]	; 0xa8
 8008846:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008848:	3301      	adds	r3, #1
 800884a:	2b07      	cmp	r3, #7
 800884c:	9329      	str	r3, [sp, #164]	; 0xa4
 800884e:	dc32      	bgt.n	80088b6 <_vfprintf_r+0x101e>
 8008850:	3408      	adds	r4, #8
 8008852:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8008854:	2d00      	cmp	r5, #0
 8008856:	da1b      	bge.n	8008890 <_vfprintf_r+0xff8>
 8008858:	4623      	mov	r3, r4
 800885a:	2710      	movs	r7, #16
 800885c:	4e25      	ldr	r6, [pc, #148]	; (80088f4 <_vfprintf_r+0x105c>)
 800885e:	426d      	negs	r5, r5
 8008860:	2d10      	cmp	r5, #16
 8008862:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8008866:	f104 0408 	add.w	r4, r4, #8
 800886a:	f102 0201 	add.w	r2, r2, #1
 800886e:	601e      	str	r6, [r3, #0]
 8008870:	dc2b      	bgt.n	80088ca <_vfprintf_r+0x1032>
 8008872:	605d      	str	r5, [r3, #4]
 8008874:	2a07      	cmp	r2, #7
 8008876:	440d      	add	r5, r1
 8008878:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 800887c:	dd08      	ble.n	8008890 <_vfprintf_r+0xff8>
 800887e:	aa28      	add	r2, sp, #160	; 0xa0
 8008880:	4649      	mov	r1, r9
 8008882:	4658      	mov	r0, fp
 8008884:	f002 fd6f 	bl	800b366 <__sprint_r>
 8008888:	2800      	cmp	r0, #0
 800888a:	f040 8234 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 800888e:	ac2b      	add	r4, sp, #172	; 0xac
 8008890:	9b07      	ldr	r3, [sp, #28]
 8008892:	9a08      	ldr	r2, [sp, #32]
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	9b08      	ldr	r3, [sp, #32]
 8008898:	6063      	str	r3, [r4, #4]
 800889a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800889c:	4413      	add	r3, r2
 800889e:	932a      	str	r3, [sp, #168]	; 0xa8
 80088a0:	e5d7      	b.n	8008452 <_vfprintf_r+0xbba>
 80088a2:	aa28      	add	r2, sp, #160	; 0xa0
 80088a4:	4649      	mov	r1, r9
 80088a6:	4658      	mov	r0, fp
 80088a8:	f002 fd5d 	bl	800b366 <__sprint_r>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	f040 8222 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 80088b2:	ac2b      	add	r4, sp, #172	; 0xac
 80088b4:	e7b7      	b.n	8008826 <_vfprintf_r+0xf8e>
 80088b6:	aa28      	add	r2, sp, #160	; 0xa0
 80088b8:	4649      	mov	r1, r9
 80088ba:	4658      	mov	r0, fp
 80088bc:	f002 fd53 	bl	800b366 <__sprint_r>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	f040 8218 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 80088c6:	ac2b      	add	r4, sp, #172	; 0xac
 80088c8:	e7c3      	b.n	8008852 <_vfprintf_r+0xfba>
 80088ca:	3110      	adds	r1, #16
 80088cc:	2a07      	cmp	r2, #7
 80088ce:	605f      	str	r7, [r3, #4]
 80088d0:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 80088d4:	dd08      	ble.n	80088e8 <_vfprintf_r+0x1050>
 80088d6:	aa28      	add	r2, sp, #160	; 0xa0
 80088d8:	4649      	mov	r1, r9
 80088da:	4658      	mov	r0, fp
 80088dc:	f002 fd43 	bl	800b366 <__sprint_r>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	f040 8208 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 80088e6:	ac2b      	add	r4, sp, #172	; 0xac
 80088e8:	3d10      	subs	r5, #16
 80088ea:	4623      	mov	r3, r4
 80088ec:	e7b8      	b.n	8008860 <_vfprintf_r+0xfc8>
 80088ee:	bf00      	nop
 80088f0:	0800e9ae 	.word	0x0800e9ae
 80088f4:	0800e9e0 	.word	0x0800e9e0
 80088f8:	9b08      	ldr	r3, [sp, #32]
 80088fa:	42b3      	cmp	r3, r6
 80088fc:	bfa8      	it	ge
 80088fe:	4633      	movge	r3, r6
 8008900:	2b00      	cmp	r3, #0
 8008902:	461d      	mov	r5, r3
 8008904:	dd0c      	ble.n	8008920 <_vfprintf_r+0x1088>
 8008906:	9b07      	ldr	r3, [sp, #28]
 8008908:	e9c4 3500 	strd	r3, r5, [r4]
 800890c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800890e:	442b      	add	r3, r5
 8008910:	932a      	str	r3, [sp, #168]	; 0xa8
 8008912:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008914:	3301      	adds	r3, #1
 8008916:	2b07      	cmp	r3, #7
 8008918:	9329      	str	r3, [sp, #164]	; 0xa4
 800891a:	f300 8087 	bgt.w	8008a2c <_vfprintf_r+0x1194>
 800891e:	3408      	adds	r4, #8
 8008920:	2d00      	cmp	r5, #0
 8008922:	bfb4      	ite	lt
 8008924:	4635      	movlt	r5, r6
 8008926:	1b75      	subge	r5, r6, r5
 8008928:	2d00      	cmp	r5, #0
 800892a:	dd19      	ble.n	8008960 <_vfprintf_r+0x10c8>
 800892c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8008930:	4896      	ldr	r0, [pc, #600]	; (8008b8c <_vfprintf_r+0x12f4>)
 8008932:	2d10      	cmp	r5, #16
 8008934:	f103 0301 	add.w	r3, r3, #1
 8008938:	f104 0108 	add.w	r1, r4, #8
 800893c:	6020      	str	r0, [r4, #0]
 800893e:	dc7f      	bgt.n	8008a40 <_vfprintf_r+0x11a8>
 8008940:	6065      	str	r5, [r4, #4]
 8008942:	2b07      	cmp	r3, #7
 8008944:	4415      	add	r5, r2
 8008946:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800894a:	f340 808c 	ble.w	8008a66 <_vfprintf_r+0x11ce>
 800894e:	aa28      	add	r2, sp, #160	; 0xa0
 8008950:	4649      	mov	r1, r9
 8008952:	4658      	mov	r0, fp
 8008954:	f002 fd07 	bl	800b366 <__sprint_r>
 8008958:	2800      	cmp	r0, #0
 800895a:	f040 81cc 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 800895e:	ac2b      	add	r4, sp, #172	; 0xac
 8008960:	9b07      	ldr	r3, [sp, #28]
 8008962:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8008966:	441e      	add	r6, r3
 8008968:	d00a      	beq.n	8008980 <_vfprintf_r+0x10e8>
 800896a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800896c:	2b00      	cmp	r3, #0
 800896e:	d17c      	bne.n	8008a6a <_vfprintf_r+0x11d2>
 8008970:	2f00      	cmp	r7, #0
 8008972:	d17c      	bne.n	8008a6e <_vfprintf_r+0x11d6>
 8008974:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008978:	4413      	add	r3, r2
 800897a:	429e      	cmp	r6, r3
 800897c:	bf28      	it	cs
 800897e:	461e      	movcs	r6, r3
 8008980:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008982:	9a08      	ldr	r2, [sp, #32]
 8008984:	4293      	cmp	r3, r2
 8008986:	db02      	blt.n	800898e <_vfprintf_r+0x10f6>
 8008988:	f01a 0f01 	tst.w	sl, #1
 800898c:	d00e      	beq.n	80089ac <_vfprintf_r+0x1114>
 800898e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008996:	6063      	str	r3, [r4, #4]
 8008998:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800899a:	4413      	add	r3, r2
 800899c:	932a      	str	r3, [sp, #168]	; 0xa8
 800899e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80089a0:	3301      	adds	r3, #1
 80089a2:	2b07      	cmp	r3, #7
 80089a4:	9329      	str	r3, [sp, #164]	; 0xa4
 80089a6:	f300 80dd 	bgt.w	8008b64 <_vfprintf_r+0x12cc>
 80089aa:	3408      	adds	r4, #8
 80089ac:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80089ae:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80089b2:	4413      	add	r3, r2
 80089b4:	1b55      	subs	r5, r2, r5
 80089b6:	1b9b      	subs	r3, r3, r6
 80089b8:	429d      	cmp	r5, r3
 80089ba:	bfa8      	it	ge
 80089bc:	461d      	movge	r5, r3
 80089be:	2d00      	cmp	r5, #0
 80089c0:	dd0b      	ble.n	80089da <_vfprintf_r+0x1142>
 80089c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80089c4:	e9c4 6500 	strd	r6, r5, [r4]
 80089c8:	442b      	add	r3, r5
 80089ca:	932a      	str	r3, [sp, #168]	; 0xa8
 80089cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80089ce:	3301      	adds	r3, #1
 80089d0:	2b07      	cmp	r3, #7
 80089d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80089d4:	f300 80d0 	bgt.w	8008b78 <_vfprintf_r+0x12e0>
 80089d8:	3408      	adds	r4, #8
 80089da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089dc:	9a08      	ldr	r2, [sp, #32]
 80089de:	2d00      	cmp	r5, #0
 80089e0:	eba2 0303 	sub.w	r3, r2, r3
 80089e4:	bfb4      	ite	lt
 80089e6:	461d      	movlt	r5, r3
 80089e8:	1b5d      	subge	r5, r3, r5
 80089ea:	2d00      	cmp	r5, #0
 80089ec:	f77f ad38 	ble.w	8008460 <_vfprintf_r+0xbc8>
 80089f0:	2710      	movs	r7, #16
 80089f2:	4e66      	ldr	r6, [pc, #408]	; (8008b8c <_vfprintf_r+0x12f4>)
 80089f4:	2d10      	cmp	r5, #16
 80089f6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80089fa:	f104 0108 	add.w	r1, r4, #8
 80089fe:	f103 0301 	add.w	r3, r3, #1
 8008a02:	6026      	str	r6, [r4, #0]
 8008a04:	f77f aec8 	ble.w	8008798 <_vfprintf_r+0xf00>
 8008a08:	3210      	adds	r2, #16
 8008a0a:	2b07      	cmp	r3, #7
 8008a0c:	6067      	str	r7, [r4, #4]
 8008a0e:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8008a12:	dd08      	ble.n	8008a26 <_vfprintf_r+0x118e>
 8008a14:	aa28      	add	r2, sp, #160	; 0xa0
 8008a16:	4649      	mov	r1, r9
 8008a18:	4658      	mov	r0, fp
 8008a1a:	f002 fca4 	bl	800b366 <__sprint_r>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	f040 8169 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008a24:	a92b      	add	r1, sp, #172	; 0xac
 8008a26:	3d10      	subs	r5, #16
 8008a28:	460c      	mov	r4, r1
 8008a2a:	e7e3      	b.n	80089f4 <_vfprintf_r+0x115c>
 8008a2c:	aa28      	add	r2, sp, #160	; 0xa0
 8008a2e:	4649      	mov	r1, r9
 8008a30:	4658      	mov	r0, fp
 8008a32:	f002 fc98 	bl	800b366 <__sprint_r>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f040 815d 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008a3c:	ac2b      	add	r4, sp, #172	; 0xac
 8008a3e:	e76f      	b.n	8008920 <_vfprintf_r+0x1088>
 8008a40:	2010      	movs	r0, #16
 8008a42:	2b07      	cmp	r3, #7
 8008a44:	4402      	add	r2, r0
 8008a46:	6060      	str	r0, [r4, #4]
 8008a48:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8008a4c:	dd08      	ble.n	8008a60 <_vfprintf_r+0x11c8>
 8008a4e:	aa28      	add	r2, sp, #160	; 0xa0
 8008a50:	4649      	mov	r1, r9
 8008a52:	4658      	mov	r0, fp
 8008a54:	f002 fc87 	bl	800b366 <__sprint_r>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	f040 814c 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008a5e:	a92b      	add	r1, sp, #172	; 0xac
 8008a60:	3d10      	subs	r5, #16
 8008a62:	460c      	mov	r4, r1
 8008a64:	e762      	b.n	800892c <_vfprintf_r+0x1094>
 8008a66:	460c      	mov	r4, r1
 8008a68:	e77a      	b.n	8008960 <_vfprintf_r+0x10c8>
 8008a6a:	2f00      	cmp	r7, #0
 8008a6c:	d04a      	beq.n	8008b04 <_vfprintf_r+0x126c>
 8008a6e:	3f01      	subs	r7, #1
 8008a70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a78:	6063      	str	r3, [r4, #4]
 8008a7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008a7c:	4413      	add	r3, r2
 8008a7e:	932a      	str	r3, [sp, #168]	; 0xa8
 8008a80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008a82:	3301      	adds	r3, #1
 8008a84:	2b07      	cmp	r3, #7
 8008a86:	9329      	str	r3, [sp, #164]	; 0xa4
 8008a88:	dc43      	bgt.n	8008b12 <_vfprintf_r+0x127a>
 8008a8a:	3408      	adds	r4, #8
 8008a8c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008a90:	4413      	add	r3, r2
 8008a92:	1b9a      	subs	r2, r3, r6
 8008a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	bfa8      	it	ge
 8008a9c:	4613      	movge	r3, r2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	461d      	mov	r5, r3
 8008aa2:	dd0a      	ble.n	8008aba <_vfprintf_r+0x1222>
 8008aa4:	e9c4 6300 	strd	r6, r3, [r4]
 8008aa8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008aaa:	442b      	add	r3, r5
 8008aac:	932a      	str	r3, [sp, #168]	; 0xa8
 8008aae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	2b07      	cmp	r3, #7
 8008ab4:	9329      	str	r3, [sp, #164]	; 0xa4
 8008ab6:	dc36      	bgt.n	8008b26 <_vfprintf_r+0x128e>
 8008ab8:	3408      	adds	r4, #8
 8008aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008abc:	2d00      	cmp	r5, #0
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	bfb4      	ite	lt
 8008ac2:	461d      	movlt	r5, r3
 8008ac4:	1b5d      	subge	r5, r3, r5
 8008ac6:	2d00      	cmp	r5, #0
 8008ac8:	dd18      	ble.n	8008afc <_vfprintf_r+0x1264>
 8008aca:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8008ace:	482f      	ldr	r0, [pc, #188]	; (8008b8c <_vfprintf_r+0x12f4>)
 8008ad0:	2d10      	cmp	r5, #16
 8008ad2:	f102 0201 	add.w	r2, r2, #1
 8008ad6:	f104 0108 	add.w	r1, r4, #8
 8008ada:	6020      	str	r0, [r4, #0]
 8008adc:	dc2d      	bgt.n	8008b3a <_vfprintf_r+0x12a2>
 8008ade:	442b      	add	r3, r5
 8008ae0:	2a07      	cmp	r2, #7
 8008ae2:	6065      	str	r5, [r4, #4]
 8008ae4:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008ae8:	dd3a      	ble.n	8008b60 <_vfprintf_r+0x12c8>
 8008aea:	aa28      	add	r2, sp, #160	; 0xa0
 8008aec:	4649      	mov	r1, r9
 8008aee:	4658      	mov	r0, fp
 8008af0:	f002 fc39 	bl	800b366 <__sprint_r>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	f040 80fe 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008afa:	ac2b      	add	r4, sp, #172	; 0xac
 8008afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	441e      	add	r6, r3
 8008b02:	e732      	b.n	800896a <_vfprintf_r+0x10d2>
 8008b04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b06:	3b01      	subs	r3, #1
 8008b08:	930c      	str	r3, [sp, #48]	; 0x30
 8008b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b10:	e7ae      	b.n	8008a70 <_vfprintf_r+0x11d8>
 8008b12:	aa28      	add	r2, sp, #160	; 0xa0
 8008b14:	4649      	mov	r1, r9
 8008b16:	4658      	mov	r0, fp
 8008b18:	f002 fc25 	bl	800b366 <__sprint_r>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	f040 80ea 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008b22:	ac2b      	add	r4, sp, #172	; 0xac
 8008b24:	e7b2      	b.n	8008a8c <_vfprintf_r+0x11f4>
 8008b26:	aa28      	add	r2, sp, #160	; 0xa0
 8008b28:	4649      	mov	r1, r9
 8008b2a:	4658      	mov	r0, fp
 8008b2c:	f002 fc1b 	bl	800b366 <__sprint_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	f040 80e0 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008b36:	ac2b      	add	r4, sp, #172	; 0xac
 8008b38:	e7bf      	b.n	8008aba <_vfprintf_r+0x1222>
 8008b3a:	2010      	movs	r0, #16
 8008b3c:	2a07      	cmp	r2, #7
 8008b3e:	4403      	add	r3, r0
 8008b40:	6060      	str	r0, [r4, #4]
 8008b42:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008b46:	dd08      	ble.n	8008b5a <_vfprintf_r+0x12c2>
 8008b48:	aa28      	add	r2, sp, #160	; 0xa0
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	4658      	mov	r0, fp
 8008b4e:	f002 fc0a 	bl	800b366 <__sprint_r>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	f040 80cf 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008b58:	a92b      	add	r1, sp, #172	; 0xac
 8008b5a:	3d10      	subs	r5, #16
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	e7b4      	b.n	8008aca <_vfprintf_r+0x1232>
 8008b60:	460c      	mov	r4, r1
 8008b62:	e7cb      	b.n	8008afc <_vfprintf_r+0x1264>
 8008b64:	aa28      	add	r2, sp, #160	; 0xa0
 8008b66:	4649      	mov	r1, r9
 8008b68:	4658      	mov	r0, fp
 8008b6a:	f002 fbfc 	bl	800b366 <__sprint_r>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	f040 80c1 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008b74:	ac2b      	add	r4, sp, #172	; 0xac
 8008b76:	e719      	b.n	80089ac <_vfprintf_r+0x1114>
 8008b78:	aa28      	add	r2, sp, #160	; 0xa0
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	4658      	mov	r0, fp
 8008b7e:	f002 fbf2 	bl	800b366 <__sprint_r>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	f040 80b7 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008b88:	ac2b      	add	r4, sp, #172	; 0xac
 8008b8a:	e726      	b.n	80089da <_vfprintf_r+0x1142>
 8008b8c:	0800e9e0 	.word	0x0800e9e0
 8008b90:	9a08      	ldr	r2, [sp, #32]
 8008b92:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008b94:	2a01      	cmp	r2, #1
 8008b96:	9a07      	ldr	r2, [sp, #28]
 8008b98:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008b9a:	6022      	str	r2, [r4, #0]
 8008b9c:	f04f 0201 	mov.w	r2, #1
 8008ba0:	f105 0501 	add.w	r5, r5, #1
 8008ba4:	f103 0301 	add.w	r3, r3, #1
 8008ba8:	f104 0608 	add.w	r6, r4, #8
 8008bac:	6062      	str	r2, [r4, #4]
 8008bae:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8008bb2:	dc02      	bgt.n	8008bba <_vfprintf_r+0x1322>
 8008bb4:	f01a 0f01 	tst.w	sl, #1
 8008bb8:	d077      	beq.n	8008caa <_vfprintf_r+0x1412>
 8008bba:	2b07      	cmp	r3, #7
 8008bbc:	dd08      	ble.n	8008bd0 <_vfprintf_r+0x1338>
 8008bbe:	aa28      	add	r2, sp, #160	; 0xa0
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	4658      	mov	r0, fp
 8008bc4:	f002 fbcf 	bl	800b366 <__sprint_r>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	f040 8094 	bne.w	8008cf6 <_vfprintf_r+0x145e>
 8008bce:	ae2b      	add	r6, sp, #172	; 0xac
 8008bd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008bd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bd8:	6073      	str	r3, [r6, #4]
 8008bda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008bdc:	4413      	add	r3, r2
 8008bde:	932a      	str	r3, [sp, #168]	; 0xa8
 8008be0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008be2:	3301      	adds	r3, #1
 8008be4:	2b07      	cmp	r3, #7
 8008be6:	9329      	str	r3, [sp, #164]	; 0xa4
 8008be8:	dc31      	bgt.n	8008c4e <_vfprintf_r+0x13b6>
 8008bea:	3608      	adds	r6, #8
 8008bec:	9b08      	ldr	r3, [sp, #32]
 8008bee:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8008bf2:	1e5c      	subs	r4, r3, #1
 8008bf4:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8008bf8:	f7f7 fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d12f      	bne.n	8008c60 <_vfprintf_r+0x13c8>
 8008c00:	9b07      	ldr	r3, [sp, #28]
 8008c02:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008c04:	3301      	adds	r3, #1
 8008c06:	e9c6 3400 	strd	r3, r4, [r6]
 8008c0a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008c0c:	9908      	ldr	r1, [sp, #32]
 8008c0e:	3201      	adds	r2, #1
 8008c10:	3b01      	subs	r3, #1
 8008c12:	440b      	add	r3, r1
 8008c14:	2a07      	cmp	r2, #7
 8008c16:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8008c1a:	dd49      	ble.n	8008cb0 <_vfprintf_r+0x1418>
 8008c1c:	aa28      	add	r2, sp, #160	; 0xa0
 8008c1e:	4649      	mov	r1, r9
 8008c20:	4658      	mov	r0, fp
 8008c22:	f002 fba0 	bl	800b366 <__sprint_r>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d165      	bne.n	8008cf6 <_vfprintf_r+0x145e>
 8008c2a:	ae2b      	add	r6, sp, #172	; 0xac
 8008c2c:	ab24      	add	r3, sp, #144	; 0x90
 8008c2e:	6033      	str	r3, [r6, #0]
 8008c30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c32:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c34:	6073      	str	r3, [r6, #4]
 8008c36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008c38:	4413      	add	r3, r2
 8008c3a:	932a      	str	r3, [sp, #168]	; 0xa8
 8008c3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008c3e:	3301      	adds	r3, #1
 8008c40:	2b07      	cmp	r3, #7
 8008c42:	9329      	str	r3, [sp, #164]	; 0xa4
 8008c44:	f73f adaf 	bgt.w	80087a6 <_vfprintf_r+0xf0e>
 8008c48:	f106 0408 	add.w	r4, r6, #8
 8008c4c:	e408      	b.n	8008460 <_vfprintf_r+0xbc8>
 8008c4e:	aa28      	add	r2, sp, #160	; 0xa0
 8008c50:	4649      	mov	r1, r9
 8008c52:	4658      	mov	r0, fp
 8008c54:	f002 fb87 	bl	800b366 <__sprint_r>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d14c      	bne.n	8008cf6 <_vfprintf_r+0x145e>
 8008c5c:	ae2b      	add	r6, sp, #172	; 0xac
 8008c5e:	e7c5      	b.n	8008bec <_vfprintf_r+0x1354>
 8008c60:	2c00      	cmp	r4, #0
 8008c62:	dde3      	ble.n	8008c2c <_vfprintf_r+0x1394>
 8008c64:	2710      	movs	r7, #16
 8008c66:	4d3c      	ldr	r5, [pc, #240]	; (8008d58 <_vfprintf_r+0x14c0>)
 8008c68:	2c10      	cmp	r4, #16
 8008c6a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8008c6e:	f106 0108 	add.w	r1, r6, #8
 8008c72:	f103 0301 	add.w	r3, r3, #1
 8008c76:	6035      	str	r5, [r6, #0]
 8008c78:	dc07      	bgt.n	8008c8a <_vfprintf_r+0x13f2>
 8008c7a:	6074      	str	r4, [r6, #4]
 8008c7c:	2b07      	cmp	r3, #7
 8008c7e:	4414      	add	r4, r2
 8008c80:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8008c84:	dcca      	bgt.n	8008c1c <_vfprintf_r+0x1384>
 8008c86:	460e      	mov	r6, r1
 8008c88:	e7d0      	b.n	8008c2c <_vfprintf_r+0x1394>
 8008c8a:	3210      	adds	r2, #16
 8008c8c:	2b07      	cmp	r3, #7
 8008c8e:	6077      	str	r7, [r6, #4]
 8008c90:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8008c94:	dd06      	ble.n	8008ca4 <_vfprintf_r+0x140c>
 8008c96:	aa28      	add	r2, sp, #160	; 0xa0
 8008c98:	4649      	mov	r1, r9
 8008c9a:	4658      	mov	r0, fp
 8008c9c:	f002 fb63 	bl	800b366 <__sprint_r>
 8008ca0:	bb48      	cbnz	r0, 8008cf6 <_vfprintf_r+0x145e>
 8008ca2:	a92b      	add	r1, sp, #172	; 0xac
 8008ca4:	3c10      	subs	r4, #16
 8008ca6:	460e      	mov	r6, r1
 8008ca8:	e7de      	b.n	8008c68 <_vfprintf_r+0x13d0>
 8008caa:	2b07      	cmp	r3, #7
 8008cac:	ddbe      	ble.n	8008c2c <_vfprintf_r+0x1394>
 8008cae:	e7b5      	b.n	8008c1c <_vfprintf_r+0x1384>
 8008cb0:	3608      	adds	r6, #8
 8008cb2:	e7bb      	b.n	8008c2c <_vfprintf_r+0x1394>
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	f7ff bbd3 	b.w	8008460 <_vfprintf_r+0xbc8>
 8008cba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008cbe:	1a9d      	subs	r5, r3, r2
 8008cc0:	2d00      	cmp	r5, #0
 8008cc2:	f77f abd1 	ble.w	8008468 <_vfprintf_r+0xbd0>
 8008cc6:	2710      	movs	r7, #16
 8008cc8:	4e24      	ldr	r6, [pc, #144]	; (8008d5c <_vfprintf_r+0x14c4>)
 8008cca:	2d10      	cmp	r5, #16
 8008ccc:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8008cd0:	6026      	str	r6, [r4, #0]
 8008cd2:	f103 0301 	add.w	r3, r3, #1
 8008cd6:	dc18      	bgt.n	8008d0a <_vfprintf_r+0x1472>
 8008cd8:	6065      	str	r5, [r4, #4]
 8008cda:	2b07      	cmp	r3, #7
 8008cdc:	4415      	add	r5, r2
 8008cde:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8008ce2:	f77f abc1 	ble.w	8008468 <_vfprintf_r+0xbd0>
 8008ce6:	aa28      	add	r2, sp, #160	; 0xa0
 8008ce8:	4649      	mov	r1, r9
 8008cea:	4658      	mov	r0, fp
 8008cec:	f002 fb3b 	bl	800b366 <__sprint_r>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	f43f abb9 	beq.w	8008468 <_vfprintf_r+0xbd0>
 8008cf6:	f1b8 0f00 	cmp.w	r8, #0
 8008cfa:	f43f a898 	beq.w	8007e2e <_vfprintf_r+0x596>
 8008cfe:	4641      	mov	r1, r8
 8008d00:	4658      	mov	r0, fp
 8008d02:	f001 f891 	bl	8009e28 <_free_r>
 8008d06:	f7ff b892 	b.w	8007e2e <_vfprintf_r+0x596>
 8008d0a:	3210      	adds	r2, #16
 8008d0c:	2b07      	cmp	r3, #7
 8008d0e:	6067      	str	r7, [r4, #4]
 8008d10:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8008d14:	dc02      	bgt.n	8008d1c <_vfprintf_r+0x1484>
 8008d16:	3408      	adds	r4, #8
 8008d18:	3d10      	subs	r5, #16
 8008d1a:	e7d6      	b.n	8008cca <_vfprintf_r+0x1432>
 8008d1c:	aa28      	add	r2, sp, #160	; 0xa0
 8008d1e:	4649      	mov	r1, r9
 8008d20:	4658      	mov	r0, fp
 8008d22:	f002 fb20 	bl	800b366 <__sprint_r>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d1e5      	bne.n	8008cf6 <_vfprintf_r+0x145e>
 8008d2a:	ac2b      	add	r4, sp, #172	; 0xac
 8008d2c:	e7f4      	b.n	8008d18 <_vfprintf_r+0x1480>
 8008d2e:	4641      	mov	r1, r8
 8008d30:	4658      	mov	r0, fp
 8008d32:	f001 f879 	bl	8009e28 <_free_r>
 8008d36:	f7ff bbaf 	b.w	8008498 <_vfprintf_r+0xc00>
 8008d3a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008d3c:	b91b      	cbnz	r3, 8008d46 <_vfprintf_r+0x14ae>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9329      	str	r3, [sp, #164]	; 0xa4
 8008d42:	f7ff b874 	b.w	8007e2e <_vfprintf_r+0x596>
 8008d46:	aa28      	add	r2, sp, #160	; 0xa0
 8008d48:	4649      	mov	r1, r9
 8008d4a:	4658      	mov	r0, fp
 8008d4c:	f002 fb0b 	bl	800b366 <__sprint_r>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	f47f a86c 	bne.w	8007e2e <_vfprintf_r+0x596>
 8008d56:	e7f2      	b.n	8008d3e <_vfprintf_r+0x14a6>
 8008d58:	0800e9e0 	.word	0x0800e9e0
 8008d5c:	0800e9d0 	.word	0x0800e9d0

08008d60 <__sbprintf>:
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	460c      	mov	r4, r1
 8008d64:	461f      	mov	r7, r3
 8008d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d68:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8008d6c:	9319      	str	r3, [sp, #100]	; 0x64
 8008d6e:	89e3      	ldrh	r3, [r4, #14]
 8008d70:	8989      	ldrh	r1, [r1, #12]
 8008d72:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008d76:	69e3      	ldr	r3, [r4, #28]
 8008d78:	f021 0102 	bic.w	r1, r1, #2
 8008d7c:	9307      	str	r3, [sp, #28]
 8008d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d80:	f8ad 100c 	strh.w	r1, [sp, #12]
 8008d84:	a91a      	add	r1, sp, #104	; 0x68
 8008d86:	4615      	mov	r5, r2
 8008d88:	4606      	mov	r6, r0
 8008d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d8c:	9100      	str	r1, [sp, #0]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9104      	str	r1, [sp, #16]
 8008d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008d96:	a816      	add	r0, sp, #88	; 0x58
 8008d98:	9102      	str	r1, [sp, #8]
 8008d9a:	9105      	str	r1, [sp, #20]
 8008d9c:	9306      	str	r3, [sp, #24]
 8008d9e:	f001 fa79 	bl	800a294 <__retarget_lock_init_recursive>
 8008da2:	462a      	mov	r2, r5
 8008da4:	463b      	mov	r3, r7
 8008da6:	4669      	mov	r1, sp
 8008da8:	4630      	mov	r0, r6
 8008daa:	f7fe fd75 	bl	8007898 <_vfprintf_r>
 8008dae:	1e05      	subs	r5, r0, #0
 8008db0:	db07      	blt.n	8008dc2 <__sbprintf+0x62>
 8008db2:	4669      	mov	r1, sp
 8008db4:	4630      	mov	r0, r6
 8008db6:	f000 ff3b 	bl	8009c30 <_fflush_r>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	bf18      	it	ne
 8008dbe:	f04f 35ff 	movne.w	r5, #4294967295
 8008dc2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008dc6:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008dc8:	065b      	lsls	r3, r3, #25
 8008dca:	bf42      	ittt	mi
 8008dcc:	89a3      	ldrhmi	r3, [r4, #12]
 8008dce:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8008dd2:	81a3      	strhmi	r3, [r4, #12]
 8008dd4:	f001 fa5f 	bl	800a296 <__retarget_lock_close_recursive>
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8008dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008de0 <__swsetup_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4b2a      	ldr	r3, [pc, #168]	; (8008e8c <__swsetup_r+0xac>)
 8008de4:	4605      	mov	r5, r0
 8008de6:	6818      	ldr	r0, [r3, #0]
 8008de8:	460c      	mov	r4, r1
 8008dea:	b118      	cbz	r0, 8008df4 <__swsetup_r+0x14>
 8008dec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008dee:	b90b      	cbnz	r3, 8008df4 <__swsetup_r+0x14>
 8008df0:	f000 ff8a 	bl	8009d08 <__sinit>
 8008df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	0711      	lsls	r1, r2, #28
 8008dfc:	d422      	bmi.n	8008e44 <__swsetup_r+0x64>
 8008dfe:	06d0      	lsls	r0, r2, #27
 8008e00:	d407      	bmi.n	8008e12 <__swsetup_r+0x32>
 8008e02:	2209      	movs	r2, #9
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	e034      	b.n	8008e7c <__swsetup_r+0x9c>
 8008e12:	0751      	lsls	r1, r2, #29
 8008e14:	d512      	bpl.n	8008e3c <__swsetup_r+0x5c>
 8008e16:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008e18:	b141      	cbz	r1, 8008e2c <__swsetup_r+0x4c>
 8008e1a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008e1e:	4299      	cmp	r1, r3
 8008e20:	d002      	beq.n	8008e28 <__swsetup_r+0x48>
 8008e22:	4628      	mov	r0, r5
 8008e24:	f001 f800 	bl	8009e28 <_free_r>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e32:	81a3      	strh	r3, [r4, #12]
 8008e34:	2300      	movs	r3, #0
 8008e36:	6063      	str	r3, [r4, #4]
 8008e38:	6923      	ldr	r3, [r4, #16]
 8008e3a:	6023      	str	r3, [r4, #0]
 8008e3c:	89a3      	ldrh	r3, [r4, #12]
 8008e3e:	f043 0308 	orr.w	r3, r3, #8
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	b94b      	cbnz	r3, 8008e5c <__swsetup_r+0x7c>
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e52:	d003      	beq.n	8008e5c <__swsetup_r+0x7c>
 8008e54:	4621      	mov	r1, r4
 8008e56:	4628      	mov	r0, r5
 8008e58:	f001 fa4c 	bl	800a2f4 <__smakebuf_r>
 8008e5c:	89a2      	ldrh	r2, [r4, #12]
 8008e5e:	f012 0301 	ands.w	r3, r2, #1
 8008e62:	d00c      	beq.n	8008e7e <__swsetup_r+0x9e>
 8008e64:	2300      	movs	r3, #0
 8008e66:	60a3      	str	r3, [r4, #8]
 8008e68:	6963      	ldr	r3, [r4, #20]
 8008e6a:	425b      	negs	r3, r3
 8008e6c:	61a3      	str	r3, [r4, #24]
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	b953      	cbnz	r3, 8008e88 <__swsetup_r+0xa8>
 8008e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e76:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008e7a:	d1c4      	bne.n	8008e06 <__swsetup_r+0x26>
 8008e7c:	bd38      	pop	{r3, r4, r5, pc}
 8008e7e:	0792      	lsls	r2, r2, #30
 8008e80:	bf58      	it	pl
 8008e82:	6963      	ldrpl	r3, [r4, #20]
 8008e84:	60a3      	str	r3, [r4, #8]
 8008e86:	e7f2      	b.n	8008e6e <__swsetup_r+0x8e>
 8008e88:	2000      	movs	r0, #0
 8008e8a:	e7f7      	b.n	8008e7c <__swsetup_r+0x9c>
 8008e8c:	20000044 	.word	0x20000044

08008e90 <register_fini>:
 8008e90:	4b02      	ldr	r3, [pc, #8]	; (8008e9c <register_fini+0xc>)
 8008e92:	b113      	cbz	r3, 8008e9a <register_fini+0xa>
 8008e94:	4802      	ldr	r0, [pc, #8]	; (8008ea0 <register_fini+0x10>)
 8008e96:	f000 b805 	b.w	8008ea4 <atexit>
 8008e9a:	4770      	bx	lr
 8008e9c:	00000000 	.word	0x00000000
 8008ea0:	08009d59 	.word	0x08009d59

08008ea4 <atexit>:
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f002 baa0 	b.w	800b3f0 <__register_exitproc>

08008eb0 <quorem>:
 8008eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	6903      	ldr	r3, [r0, #16]
 8008eb6:	690c      	ldr	r4, [r1, #16]
 8008eb8:	4680      	mov	r8, r0
 8008eba:	42a3      	cmp	r3, r4
 8008ebc:	f2c0 8084 	blt.w	8008fc8 <quorem+0x118>
 8008ec0:	3c01      	subs	r4, #1
 8008ec2:	f101 0714 	add.w	r7, r1, #20
 8008ec6:	f100 0614 	add.w	r6, r0, #20
 8008eca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008ece:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008ed2:	3501      	adds	r5, #1
 8008ed4:	fbb0 f5f5 	udiv	r5, r0, r5
 8008ed8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008edc:	eb06 030c 	add.w	r3, r6, ip
 8008ee0:	eb07 090c 	add.w	r9, r7, ip
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	b39d      	cbz	r5, 8008f50 <quorem+0xa0>
 8008ee8:	f04f 0a00 	mov.w	sl, #0
 8008eec:	4638      	mov	r0, r7
 8008eee:	46b6      	mov	lr, r6
 8008ef0:	46d3      	mov	fp, sl
 8008ef2:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ef6:	b293      	uxth	r3, r2
 8008ef8:	fb05 a303 	mla	r3, r5, r3, sl
 8008efc:	0c12      	lsrs	r2, r2, #16
 8008efe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f02:	fb05 a202 	mla	r2, r5, r2, sl
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	ebab 0303 	sub.w	r3, fp, r3
 8008f0c:	f8de b000 	ldr.w	fp, [lr]
 8008f10:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008f14:	fa1f fb8b 	uxth.w	fp, fp
 8008f18:	445b      	add	r3, fp
 8008f1a:	fa1f fb82 	uxth.w	fp, r2
 8008f1e:	f8de 2000 	ldr.w	r2, [lr]
 8008f22:	4581      	cmp	r9, r0
 8008f24:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008f28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f32:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008f36:	f84e 3b04 	str.w	r3, [lr], #4
 8008f3a:	d2da      	bcs.n	8008ef2 <quorem+0x42>
 8008f3c:	f856 300c 	ldr.w	r3, [r6, ip]
 8008f40:	b933      	cbnz	r3, 8008f50 <quorem+0xa0>
 8008f42:	9b01      	ldr	r3, [sp, #4]
 8008f44:	3b04      	subs	r3, #4
 8008f46:	429e      	cmp	r6, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	d331      	bcc.n	8008fb0 <quorem+0x100>
 8008f4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008f50:	4640      	mov	r0, r8
 8008f52:	f001 fe75 	bl	800ac40 <__mcmp>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	db26      	blt.n	8008fa8 <quorem+0xf8>
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f04f 0c00 	mov.w	ip, #0
 8008f60:	3501      	adds	r5, #1
 8008f62:	f857 1b04 	ldr.w	r1, [r7], #4
 8008f66:	f8d0 e000 	ldr.w	lr, [r0]
 8008f6a:	b28b      	uxth	r3, r1
 8008f6c:	ebac 0303 	sub.w	r3, ip, r3
 8008f70:	fa1f f28e 	uxth.w	r2, lr
 8008f74:	4413      	add	r3, r2
 8008f76:	0c0a      	lsrs	r2, r1, #16
 8008f78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f86:	45b9      	cmp	r9, r7
 8008f88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f8c:	f840 3b04 	str.w	r3, [r0], #4
 8008f90:	d2e7      	bcs.n	8008f62 <quorem+0xb2>
 8008f92:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008f96:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008f9a:	b92a      	cbnz	r2, 8008fa8 <quorem+0xf8>
 8008f9c:	3b04      	subs	r3, #4
 8008f9e:	429e      	cmp	r6, r3
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	d30b      	bcc.n	8008fbc <quorem+0x10c>
 8008fa4:	f8c8 4010 	str.w	r4, [r8, #16]
 8008fa8:	4628      	mov	r0, r5
 8008faa:	b003      	add	sp, #12
 8008fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb0:	6812      	ldr	r2, [r2, #0]
 8008fb2:	3b04      	subs	r3, #4
 8008fb4:	2a00      	cmp	r2, #0
 8008fb6:	d1c9      	bne.n	8008f4c <quorem+0x9c>
 8008fb8:	3c01      	subs	r4, #1
 8008fba:	e7c4      	b.n	8008f46 <quorem+0x96>
 8008fbc:	6812      	ldr	r2, [r2, #0]
 8008fbe:	3b04      	subs	r3, #4
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	d1ef      	bne.n	8008fa4 <quorem+0xf4>
 8008fc4:	3c01      	subs	r4, #1
 8008fc6:	e7ea      	b.n	8008f9e <quorem+0xee>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e7ee      	b.n	8008faa <quorem+0xfa>
 8008fcc:	0000      	movs	r0, r0
	...

08008fd0 <_dtoa_r>:
 8008fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	4616      	mov	r6, r2
 8008fd6:	461f      	mov	r7, r3
 8008fd8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008fda:	b095      	sub	sp, #84	; 0x54
 8008fdc:	4604      	mov	r4, r0
 8008fde:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8008fe0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008fe4:	b141      	cbz	r1, 8008ff8 <_dtoa_r+0x28>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008fea:	4093      	lsls	r3, r2
 8008fec:	608b      	str	r3, [r1, #8]
 8008fee:	604a      	str	r2, [r1, #4]
 8008ff0:	f001 fc61 	bl	800a8b6 <_Bfree>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	6423      	str	r3, [r4, #64]	; 0x40
 8008ff8:	1e3b      	subs	r3, r7, #0
 8008ffa:	bfaf      	iteee	ge
 8008ffc:	2300      	movge	r3, #0
 8008ffe:	2201      	movlt	r2, #1
 8009000:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009004:	9303      	strlt	r3, [sp, #12]
 8009006:	bfa8      	it	ge
 8009008:	602b      	strge	r3, [r5, #0]
 800900a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800900e:	4bb0      	ldr	r3, [pc, #704]	; (80092d0 <_dtoa_r+0x300>)
 8009010:	bfb8      	it	lt
 8009012:	602a      	strlt	r2, [r5, #0]
 8009014:	ea33 0308 	bics.w	r3, r3, r8
 8009018:	d116      	bne.n	8009048 <_dtoa_r+0x78>
 800901a:	f242 730f 	movw	r3, #9999	; 0x270f
 800901e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	9b02      	ldr	r3, [sp, #8]
 8009024:	b923      	cbnz	r3, 8009030 <_dtoa_r+0x60>
 8009026:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800902a:	2800      	cmp	r0, #0
 800902c:	f000 853f 	beq.w	8009aae <_dtoa_r+0xade>
 8009030:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009032:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 80092e4 <_dtoa_r+0x314>
 8009036:	b11b      	cbz	r3, 8009040 <_dtoa_r+0x70>
 8009038:	f10b 0303 	add.w	r3, fp, #3
 800903c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	4658      	mov	r0, fp
 8009042:	b015      	add	sp, #84	; 0x54
 8009044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009048:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800904c:	2200      	movs	r2, #0
 800904e:	2300      	movs	r3, #0
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	f7f7 fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8009058:	4682      	mov	sl, r0
 800905a:	b160      	cbz	r0, 8009076 <_dtoa_r+0xa6>
 800905c:	2301      	movs	r3, #1
 800905e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009060:	6013      	str	r3, [r2, #0]
 8009062:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 851e 	beq.w	8009aa6 <_dtoa_r+0xad6>
 800906a:	4b9a      	ldr	r3, [pc, #616]	; (80092d4 <_dtoa_r+0x304>)
 800906c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800906e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	e7e4      	b.n	8009040 <_dtoa_r+0x70>
 8009076:	ab12      	add	r3, sp, #72	; 0x48
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	ab13      	add	r3, sp, #76	; 0x4c
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	4632      	mov	r2, r6
 8009080:	463b      	mov	r3, r7
 8009082:	4620      	mov	r0, r4
 8009084:	f001 fe54 	bl	800ad30 <__d2b>
 8009088:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800908c:	9006      	str	r0, [sp, #24]
 800908e:	2d00      	cmp	r5, #0
 8009090:	d07d      	beq.n	800918e <_dtoa_r+0x1be>
 8009092:	46b0      	mov	r8, r6
 8009094:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009098:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800909c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80090a0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090a4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80090a8:	2200      	movs	r2, #0
 80090aa:	4b8b      	ldr	r3, [pc, #556]	; (80092d8 <_dtoa_r+0x308>)
 80090ac:	4640      	mov	r0, r8
 80090ae:	4649      	mov	r1, r9
 80090b0:	f7f7 f85a 	bl	8000168 <__aeabi_dsub>
 80090b4:	a380      	add	r3, pc, #512	; (adr r3, 80092b8 <_dtoa_r+0x2e8>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 fa0d 	bl	80004d8 <__aeabi_dmul>
 80090be:	a380      	add	r3, pc, #512	; (adr r3, 80092c0 <_dtoa_r+0x2f0>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	f7f7 f852 	bl	800016c <__adddf3>
 80090c8:	4606      	mov	r6, r0
 80090ca:	4628      	mov	r0, r5
 80090cc:	460f      	mov	r7, r1
 80090ce:	f7f7 f999 	bl	8000404 <__aeabi_i2d>
 80090d2:	a37d      	add	r3, pc, #500	; (adr r3, 80092c8 <_dtoa_r+0x2f8>)
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f7f7 f9fe 	bl	80004d8 <__aeabi_dmul>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4630      	mov	r0, r6
 80090e2:	4639      	mov	r1, r7
 80090e4:	f7f7 f842 	bl	800016c <__adddf3>
 80090e8:	4606      	mov	r6, r0
 80090ea:	460f      	mov	r7, r1
 80090ec:	f7f7 fca4 	bl	8000a38 <__aeabi_d2iz>
 80090f0:	2200      	movs	r2, #0
 80090f2:	4682      	mov	sl, r0
 80090f4:	2300      	movs	r3, #0
 80090f6:	4630      	mov	r0, r6
 80090f8:	4639      	mov	r1, r7
 80090fa:	f7f7 fc5f 	bl	80009bc <__aeabi_dcmplt>
 80090fe:	b148      	cbz	r0, 8009114 <_dtoa_r+0x144>
 8009100:	4650      	mov	r0, sl
 8009102:	f7f7 f97f 	bl	8000404 <__aeabi_i2d>
 8009106:	4632      	mov	r2, r6
 8009108:	463b      	mov	r3, r7
 800910a:	f7f7 fc4d 	bl	80009a8 <__aeabi_dcmpeq>
 800910e:	b908      	cbnz	r0, 8009114 <_dtoa_r+0x144>
 8009110:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009114:	f1ba 0f16 	cmp.w	sl, #22
 8009118:	d85a      	bhi.n	80091d0 <_dtoa_r+0x200>
 800911a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800911e:	496f      	ldr	r1, [pc, #444]	; (80092dc <_dtoa_r+0x30c>)
 8009120:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009128:	f7f7 fc66 	bl	80009f8 <__aeabi_dcmpgt>
 800912c:	2800      	cmp	r0, #0
 800912e:	d051      	beq.n	80091d4 <_dtoa_r+0x204>
 8009130:	2300      	movs	r3, #0
 8009132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009136:	930d      	str	r3, [sp, #52]	; 0x34
 8009138:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800913a:	1b5d      	subs	r5, r3, r5
 800913c:	1e6b      	subs	r3, r5, #1
 800913e:	9307      	str	r3, [sp, #28]
 8009140:	bf43      	ittte	mi
 8009142:	2300      	movmi	r3, #0
 8009144:	f1c5 0901 	rsbmi	r9, r5, #1
 8009148:	9307      	strmi	r3, [sp, #28]
 800914a:	f04f 0900 	movpl.w	r9, #0
 800914e:	f1ba 0f00 	cmp.w	sl, #0
 8009152:	db41      	blt.n	80091d8 <_dtoa_r+0x208>
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800915a:	4453      	add	r3, sl
 800915c:	9307      	str	r3, [sp, #28]
 800915e:	2300      	movs	r3, #0
 8009160:	9308      	str	r3, [sp, #32]
 8009162:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009164:	2b09      	cmp	r3, #9
 8009166:	f200 808c 	bhi.w	8009282 <_dtoa_r+0x2b2>
 800916a:	2b05      	cmp	r3, #5
 800916c:	bfc4      	itt	gt
 800916e:	3b04      	subgt	r3, #4
 8009170:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009172:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009174:	bfc8      	it	gt
 8009176:	2500      	movgt	r5, #0
 8009178:	f1a3 0302 	sub.w	r3, r3, #2
 800917c:	bfd8      	it	le
 800917e:	2501      	movle	r5, #1
 8009180:	2b03      	cmp	r3, #3
 8009182:	f200 808a 	bhi.w	800929a <_dtoa_r+0x2ca>
 8009186:	e8df f003 	tbb	[pc, r3]
 800918a:	7a78      	.short	0x7a78
 800918c:	6c2f      	.short	0x6c2f
 800918e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009192:	441d      	add	r5, r3
 8009194:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009198:	2820      	cmp	r0, #32
 800919a:	dd13      	ble.n	80091c4 <_dtoa_r+0x1f4>
 800919c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80091a0:	9b02      	ldr	r3, [sp, #8]
 80091a2:	fa08 f800 	lsl.w	r8, r8, r0
 80091a6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80091aa:	fa23 f000 	lsr.w	r0, r3, r0
 80091ae:	ea48 0000 	orr.w	r0, r8, r0
 80091b2:	f7f7 f917 	bl	80003e4 <__aeabi_ui2d>
 80091b6:	2301      	movs	r3, #1
 80091b8:	4680      	mov	r8, r0
 80091ba:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80091be:	3d01      	subs	r5, #1
 80091c0:	9310      	str	r3, [sp, #64]	; 0x40
 80091c2:	e771      	b.n	80090a8 <_dtoa_r+0xd8>
 80091c4:	9b02      	ldr	r3, [sp, #8]
 80091c6:	f1c0 0020 	rsb	r0, r0, #32
 80091ca:	fa03 f000 	lsl.w	r0, r3, r0
 80091ce:	e7f0      	b.n	80091b2 <_dtoa_r+0x1e2>
 80091d0:	2301      	movs	r3, #1
 80091d2:	e7b0      	b.n	8009136 <_dtoa_r+0x166>
 80091d4:	900d      	str	r0, [sp, #52]	; 0x34
 80091d6:	e7af      	b.n	8009138 <_dtoa_r+0x168>
 80091d8:	f1ca 0300 	rsb	r3, sl, #0
 80091dc:	9308      	str	r3, [sp, #32]
 80091de:	2300      	movs	r3, #0
 80091e0:	eba9 090a 	sub.w	r9, r9, sl
 80091e4:	930c      	str	r3, [sp, #48]	; 0x30
 80091e6:	e7bc      	b.n	8009162 <_dtoa_r+0x192>
 80091e8:	2301      	movs	r3, #1
 80091ea:	9309      	str	r3, [sp, #36]	; 0x24
 80091ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	dd56      	ble.n	80092a0 <_dtoa_r+0x2d0>
 80091f2:	4698      	mov	r8, r3
 80091f4:	9304      	str	r3, [sp, #16]
 80091f6:	2200      	movs	r2, #0
 80091f8:	6462      	str	r2, [r4, #68]	; 0x44
 80091fa:	2204      	movs	r2, #4
 80091fc:	f102 0014 	add.w	r0, r2, #20
 8009200:	4298      	cmp	r0, r3
 8009202:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009204:	d951      	bls.n	80092aa <_dtoa_r+0x2da>
 8009206:	4620      	mov	r0, r4
 8009208:	f001 fb30 	bl	800a86c <_Balloc>
 800920c:	f1b8 0f0e 	cmp.w	r8, #14
 8009210:	4683      	mov	fp, r0
 8009212:	6420      	str	r0, [r4, #64]	; 0x40
 8009214:	f200 80ed 	bhi.w	80093f2 <_dtoa_r+0x422>
 8009218:	2d00      	cmp	r5, #0
 800921a:	f000 80ea 	beq.w	80093f2 <_dtoa_r+0x422>
 800921e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009222:	f1ba 0f00 	cmp.w	sl, #0
 8009226:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800922a:	dd77      	ble.n	800931c <_dtoa_r+0x34c>
 800922c:	4a2b      	ldr	r2, [pc, #172]	; (80092dc <_dtoa_r+0x30c>)
 800922e:	f00a 030f 	and.w	r3, sl, #15
 8009232:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009236:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800923a:	06f0      	lsls	r0, r6, #27
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009244:	d568      	bpl.n	8009318 <_dtoa_r+0x348>
 8009246:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800924a:	4b25      	ldr	r3, [pc, #148]	; (80092e0 <_dtoa_r+0x310>)
 800924c:	2503      	movs	r5, #3
 800924e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009252:	f7f7 fa6b 	bl	800072c <__aeabi_ddiv>
 8009256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800925a:	f006 060f 	and.w	r6, r6, #15
 800925e:	4f20      	ldr	r7, [pc, #128]	; (80092e0 <_dtoa_r+0x310>)
 8009260:	e04f      	b.n	8009302 <_dtoa_r+0x332>
 8009262:	2301      	movs	r3, #1
 8009264:	9309      	str	r3, [sp, #36]	; 0x24
 8009266:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009268:	4453      	add	r3, sl
 800926a:	f103 0801 	add.w	r8, r3, #1
 800926e:	9304      	str	r3, [sp, #16]
 8009270:	4643      	mov	r3, r8
 8009272:	2b01      	cmp	r3, #1
 8009274:	bfb8      	it	lt
 8009276:	2301      	movlt	r3, #1
 8009278:	e7bd      	b.n	80091f6 <_dtoa_r+0x226>
 800927a:	2300      	movs	r3, #0
 800927c:	e7b5      	b.n	80091ea <_dtoa_r+0x21a>
 800927e:	2300      	movs	r3, #0
 8009280:	e7f0      	b.n	8009264 <_dtoa_r+0x294>
 8009282:	2501      	movs	r5, #1
 8009284:	2300      	movs	r3, #0
 8009286:	9509      	str	r5, [sp, #36]	; 0x24
 8009288:	931e      	str	r3, [sp, #120]	; 0x78
 800928a:	f04f 33ff 	mov.w	r3, #4294967295
 800928e:	2200      	movs	r2, #0
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	4698      	mov	r8, r3
 8009294:	2312      	movs	r3, #18
 8009296:	921f      	str	r2, [sp, #124]	; 0x7c
 8009298:	e7ad      	b.n	80091f6 <_dtoa_r+0x226>
 800929a:	2301      	movs	r3, #1
 800929c:	9309      	str	r3, [sp, #36]	; 0x24
 800929e:	e7f4      	b.n	800928a <_dtoa_r+0x2ba>
 80092a0:	2301      	movs	r3, #1
 80092a2:	9304      	str	r3, [sp, #16]
 80092a4:	4698      	mov	r8, r3
 80092a6:	461a      	mov	r2, r3
 80092a8:	e7f5      	b.n	8009296 <_dtoa_r+0x2c6>
 80092aa:	3101      	adds	r1, #1
 80092ac:	6461      	str	r1, [r4, #68]	; 0x44
 80092ae:	0052      	lsls	r2, r2, #1
 80092b0:	e7a4      	b.n	80091fc <_dtoa_r+0x22c>
 80092b2:	bf00      	nop
 80092b4:	f3af 8000 	nop.w
 80092b8:	636f4361 	.word	0x636f4361
 80092bc:	3fd287a7 	.word	0x3fd287a7
 80092c0:	8b60c8b3 	.word	0x8b60c8b3
 80092c4:	3fc68a28 	.word	0x3fc68a28
 80092c8:	509f79fb 	.word	0x509f79fb
 80092cc:	3fd34413 	.word	0x3fd34413
 80092d0:	7ff00000 	.word	0x7ff00000
 80092d4:	0800e9af 	.word	0x0800e9af
 80092d8:	3ff80000 	.word	0x3ff80000
 80092dc:	0800ea28 	.word	0x0800ea28
 80092e0:	0800ea00 	.word	0x0800ea00
 80092e4:	0800e9f9 	.word	0x0800e9f9
 80092e8:	07f1      	lsls	r1, r6, #31
 80092ea:	d508      	bpl.n	80092fe <_dtoa_r+0x32e>
 80092ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092f4:	f7f7 f8f0 	bl	80004d8 <__aeabi_dmul>
 80092f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80092fc:	3501      	adds	r5, #1
 80092fe:	1076      	asrs	r6, r6, #1
 8009300:	3708      	adds	r7, #8
 8009302:	2e00      	cmp	r6, #0
 8009304:	d1f0      	bne.n	80092e8 <_dtoa_r+0x318>
 8009306:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800930a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800930e:	f7f7 fa0d 	bl	800072c <__aeabi_ddiv>
 8009312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009316:	e01b      	b.n	8009350 <_dtoa_r+0x380>
 8009318:	2502      	movs	r5, #2
 800931a:	e7a0      	b.n	800925e <_dtoa_r+0x28e>
 800931c:	f000 80a4 	beq.w	8009468 <_dtoa_r+0x498>
 8009320:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009324:	f1ca 0600 	rsb	r6, sl, #0
 8009328:	4ba0      	ldr	r3, [pc, #640]	; (80095ac <_dtoa_r+0x5dc>)
 800932a:	f006 020f 	and.w	r2, r6, #15
 800932e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	f7f7 f8cf 	bl	80004d8 <__aeabi_dmul>
 800933a:	2502      	movs	r5, #2
 800933c:	2300      	movs	r3, #0
 800933e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009342:	4f9b      	ldr	r7, [pc, #620]	; (80095b0 <_dtoa_r+0x5e0>)
 8009344:	1136      	asrs	r6, r6, #4
 8009346:	2e00      	cmp	r6, #0
 8009348:	f040 8083 	bne.w	8009452 <_dtoa_r+0x482>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e0      	bne.n	8009312 <_dtoa_r+0x342>
 8009350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 808a 	beq.w	800946c <_dtoa_r+0x49c>
 8009358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800935c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009364:	2200      	movs	r2, #0
 8009366:	4b93      	ldr	r3, [pc, #588]	; (80095b4 <_dtoa_r+0x5e4>)
 8009368:	f7f7 fb28 	bl	80009bc <__aeabi_dcmplt>
 800936c:	2800      	cmp	r0, #0
 800936e:	d07d      	beq.n	800946c <_dtoa_r+0x49c>
 8009370:	f1b8 0f00 	cmp.w	r8, #0
 8009374:	d07a      	beq.n	800946c <_dtoa_r+0x49c>
 8009376:	9b04      	ldr	r3, [sp, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	dd36      	ble.n	80093ea <_dtoa_r+0x41a>
 800937c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009380:	2200      	movs	r2, #0
 8009382:	4b8d      	ldr	r3, [pc, #564]	; (80095b8 <_dtoa_r+0x5e8>)
 8009384:	f7f7 f8a8 	bl	80004d8 <__aeabi_dmul>
 8009388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800938c:	9e04      	ldr	r6, [sp, #16]
 800938e:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009392:	3501      	adds	r5, #1
 8009394:	4628      	mov	r0, r5
 8009396:	f7f7 f835 	bl	8000404 <__aeabi_i2d>
 800939a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800939e:	f7f7 f89b 	bl	80004d8 <__aeabi_dmul>
 80093a2:	2200      	movs	r2, #0
 80093a4:	4b85      	ldr	r3, [pc, #532]	; (80095bc <_dtoa_r+0x5ec>)
 80093a6:	f7f6 fee1 	bl	800016c <__adddf3>
 80093aa:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80093ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80093b2:	950b      	str	r5, [sp, #44]	; 0x2c
 80093b4:	2e00      	cmp	r6, #0
 80093b6:	d15c      	bne.n	8009472 <_dtoa_r+0x4a2>
 80093b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093bc:	2200      	movs	r2, #0
 80093be:	4b80      	ldr	r3, [pc, #512]	; (80095c0 <_dtoa_r+0x5f0>)
 80093c0:	f7f6 fed2 	bl	8000168 <__aeabi_dsub>
 80093c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093c6:	462b      	mov	r3, r5
 80093c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093cc:	f7f7 fb14 	bl	80009f8 <__aeabi_dcmpgt>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	f040 8282 	bne.w	80098da <_dtoa_r+0x90a>
 80093d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80093e0:	f7f7 faec 	bl	80009bc <__aeabi_dcmplt>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	f040 8276 	bne.w	80098d6 <_dtoa_r+0x906>
 80093ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80093ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f2c0 814c 	blt.w	8009692 <_dtoa_r+0x6c2>
 80093fa:	f1ba 0f0e 	cmp.w	sl, #14
 80093fe:	f300 8148 	bgt.w	8009692 <_dtoa_r+0x6c2>
 8009402:	4b6a      	ldr	r3, [pc, #424]	; (80095ac <_dtoa_r+0x5dc>)
 8009404:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009410:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009412:	2b00      	cmp	r3, #0
 8009414:	f280 80d8 	bge.w	80095c8 <_dtoa_r+0x5f8>
 8009418:	f1b8 0f00 	cmp.w	r8, #0
 800941c:	f300 80d4 	bgt.w	80095c8 <_dtoa_r+0x5f8>
 8009420:	f040 8258 	bne.w	80098d4 <_dtoa_r+0x904>
 8009424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009428:	2200      	movs	r2, #0
 800942a:	4b65      	ldr	r3, [pc, #404]	; (80095c0 <_dtoa_r+0x5f0>)
 800942c:	f7f7 f854 	bl	80004d8 <__aeabi_dmul>
 8009430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009434:	f7f7 fad6 	bl	80009e4 <__aeabi_dcmpge>
 8009438:	4646      	mov	r6, r8
 800943a:	4647      	mov	r7, r8
 800943c:	2800      	cmp	r0, #0
 800943e:	f040 822e 	bne.w	800989e <_dtoa_r+0x8ce>
 8009442:	2331      	movs	r3, #49	; 0x31
 8009444:	f10b 0501 	add.w	r5, fp, #1
 8009448:	f88b 3000 	strb.w	r3, [fp]
 800944c:	f10a 0a01 	add.w	sl, sl, #1
 8009450:	e229      	b.n	80098a6 <_dtoa_r+0x8d6>
 8009452:	07f2      	lsls	r2, r6, #31
 8009454:	d505      	bpl.n	8009462 <_dtoa_r+0x492>
 8009456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800945a:	f7f7 f83d 	bl	80004d8 <__aeabi_dmul>
 800945e:	2301      	movs	r3, #1
 8009460:	3501      	adds	r5, #1
 8009462:	1076      	asrs	r6, r6, #1
 8009464:	3708      	adds	r7, #8
 8009466:	e76e      	b.n	8009346 <_dtoa_r+0x376>
 8009468:	2502      	movs	r5, #2
 800946a:	e771      	b.n	8009350 <_dtoa_r+0x380>
 800946c:	4657      	mov	r7, sl
 800946e:	4646      	mov	r6, r8
 8009470:	e790      	b.n	8009394 <_dtoa_r+0x3c4>
 8009472:	4b4e      	ldr	r3, [pc, #312]	; (80095ac <_dtoa_r+0x5dc>)
 8009474:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009478:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800947c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947e:	2b00      	cmp	r3, #0
 8009480:	d048      	beq.n	8009514 <_dtoa_r+0x544>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	2000      	movs	r0, #0
 8009488:	494e      	ldr	r1, [pc, #312]	; (80095c4 <_dtoa_r+0x5f4>)
 800948a:	f7f7 f94f 	bl	800072c <__aeabi_ddiv>
 800948e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009492:	f7f6 fe69 	bl	8000168 <__aeabi_dsub>
 8009496:	465d      	mov	r5, fp
 8009498:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800949c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094a0:	f7f7 faca 	bl	8000a38 <__aeabi_d2iz>
 80094a4:	9011      	str	r0, [sp, #68]	; 0x44
 80094a6:	f7f6 ffad 	bl	8000404 <__aeabi_i2d>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094b2:	f7f6 fe59 	bl	8000168 <__aeabi_dsub>
 80094b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094bc:	3330      	adds	r3, #48	; 0x30
 80094be:	f805 3b01 	strb.w	r3, [r5], #1
 80094c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80094c6:	f7f7 fa79 	bl	80009bc <__aeabi_dcmplt>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d163      	bne.n	8009596 <_dtoa_r+0x5c6>
 80094ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094d2:	2000      	movs	r0, #0
 80094d4:	4937      	ldr	r1, [pc, #220]	; (80095b4 <_dtoa_r+0x5e4>)
 80094d6:	f7f6 fe47 	bl	8000168 <__aeabi_dsub>
 80094da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80094de:	f7f7 fa6d 	bl	80009bc <__aeabi_dcmplt>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	f040 80b6 	bne.w	8009654 <_dtoa_r+0x684>
 80094e8:	eba5 030b 	sub.w	r3, r5, fp
 80094ec:	429e      	cmp	r6, r3
 80094ee:	f77f af7c 	ble.w	80093ea <_dtoa_r+0x41a>
 80094f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094f6:	2200      	movs	r2, #0
 80094f8:	4b2f      	ldr	r3, [pc, #188]	; (80095b8 <_dtoa_r+0x5e8>)
 80094fa:	f7f6 ffed 	bl	80004d8 <__aeabi_dmul>
 80094fe:	2200      	movs	r2, #0
 8009500:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009508:	4b2b      	ldr	r3, [pc, #172]	; (80095b8 <_dtoa_r+0x5e8>)
 800950a:	f7f6 ffe5 	bl	80004d8 <__aeabi_dmul>
 800950e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009512:	e7c3      	b.n	800949c <_dtoa_r+0x4cc>
 8009514:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009518:	f7f6 ffde 	bl	80004d8 <__aeabi_dmul>
 800951c:	eb0b 0506 	add.w	r5, fp, r6
 8009520:	465e      	mov	r6, fp
 8009522:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800952a:	f7f7 fa85 	bl	8000a38 <__aeabi_d2iz>
 800952e:	9011      	str	r0, [sp, #68]	; 0x44
 8009530:	f7f6 ff68 	bl	8000404 <__aeabi_i2d>
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800953c:	f7f6 fe14 	bl	8000168 <__aeabi_dsub>
 8009540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009546:	3330      	adds	r3, #48	; 0x30
 8009548:	f806 3b01 	strb.w	r3, [r6], #1
 800954c:	42ae      	cmp	r6, r5
 800954e:	f04f 0200 	mov.w	r2, #0
 8009552:	d124      	bne.n	800959e <_dtoa_r+0x5ce>
 8009554:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009558:	4b1a      	ldr	r3, [pc, #104]	; (80095c4 <_dtoa_r+0x5f4>)
 800955a:	f7f6 fe07 	bl	800016c <__adddf3>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009566:	f7f7 fa47 	bl	80009f8 <__aeabi_dcmpgt>
 800956a:	2800      	cmp	r0, #0
 800956c:	d172      	bne.n	8009654 <_dtoa_r+0x684>
 800956e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009572:	2000      	movs	r0, #0
 8009574:	4913      	ldr	r1, [pc, #76]	; (80095c4 <_dtoa_r+0x5f4>)
 8009576:	f7f6 fdf7 	bl	8000168 <__aeabi_dsub>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009582:	f7f7 fa1b 	bl	80009bc <__aeabi_dcmplt>
 8009586:	2800      	cmp	r0, #0
 8009588:	f43f af2f 	beq.w	80093ea <_dtoa_r+0x41a>
 800958c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009590:	1e6a      	subs	r2, r5, #1
 8009592:	2b30      	cmp	r3, #48	; 0x30
 8009594:	d001      	beq.n	800959a <_dtoa_r+0x5ca>
 8009596:	46ba      	mov	sl, r7
 8009598:	e04b      	b.n	8009632 <_dtoa_r+0x662>
 800959a:	4615      	mov	r5, r2
 800959c:	e7f6      	b.n	800958c <_dtoa_r+0x5bc>
 800959e:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <_dtoa_r+0x5e8>)
 80095a0:	f7f6 ff9a 	bl	80004d8 <__aeabi_dmul>
 80095a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095a8:	e7bd      	b.n	8009526 <_dtoa_r+0x556>
 80095aa:	bf00      	nop
 80095ac:	0800ea28 	.word	0x0800ea28
 80095b0:	0800ea00 	.word	0x0800ea00
 80095b4:	3ff00000 	.word	0x3ff00000
 80095b8:	40240000 	.word	0x40240000
 80095bc:	401c0000 	.word	0x401c0000
 80095c0:	40140000 	.word	0x40140000
 80095c4:	3fe00000 	.word	0x3fe00000
 80095c8:	465d      	mov	r5, fp
 80095ca:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095d2:	4630      	mov	r0, r6
 80095d4:	4639      	mov	r1, r7
 80095d6:	f7f7 f8a9 	bl	800072c <__aeabi_ddiv>
 80095da:	f7f7 fa2d 	bl	8000a38 <__aeabi_d2iz>
 80095de:	4681      	mov	r9, r0
 80095e0:	f7f6 ff10 	bl	8000404 <__aeabi_i2d>
 80095e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095e8:	f7f6 ff76 	bl	80004d8 <__aeabi_dmul>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4630      	mov	r0, r6
 80095f2:	4639      	mov	r1, r7
 80095f4:	f7f6 fdb8 	bl	8000168 <__aeabi_dsub>
 80095f8:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80095fc:	f805 6b01 	strb.w	r6, [r5], #1
 8009600:	eba5 060b 	sub.w	r6, r5, fp
 8009604:	45b0      	cmp	r8, r6
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	d135      	bne.n	8009678 <_dtoa_r+0x6a8>
 800960c:	f7f6 fdae 	bl	800016c <__adddf3>
 8009610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009614:	4606      	mov	r6, r0
 8009616:	460f      	mov	r7, r1
 8009618:	f7f7 f9ee 	bl	80009f8 <__aeabi_dcmpgt>
 800961c:	b9c8      	cbnz	r0, 8009652 <_dtoa_r+0x682>
 800961e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009622:	4630      	mov	r0, r6
 8009624:	4639      	mov	r1, r7
 8009626:	f7f7 f9bf 	bl	80009a8 <__aeabi_dcmpeq>
 800962a:	b110      	cbz	r0, 8009632 <_dtoa_r+0x662>
 800962c:	f019 0f01 	tst.w	r9, #1
 8009630:	d10f      	bne.n	8009652 <_dtoa_r+0x682>
 8009632:	9906      	ldr	r1, [sp, #24]
 8009634:	4620      	mov	r0, r4
 8009636:	f001 f93e 	bl	800a8b6 <_Bfree>
 800963a:	2300      	movs	r3, #0
 800963c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800963e:	702b      	strb	r3, [r5, #0]
 8009640:	f10a 0301 	add.w	r3, sl, #1
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009648:	2b00      	cmp	r3, #0
 800964a:	f43f acf9 	beq.w	8009040 <_dtoa_r+0x70>
 800964e:	601d      	str	r5, [r3, #0]
 8009650:	e4f6      	b.n	8009040 <_dtoa_r+0x70>
 8009652:	4657      	mov	r7, sl
 8009654:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009658:	1e6b      	subs	r3, r5, #1
 800965a:	2a39      	cmp	r2, #57	; 0x39
 800965c:	d106      	bne.n	800966c <_dtoa_r+0x69c>
 800965e:	459b      	cmp	fp, r3
 8009660:	d108      	bne.n	8009674 <_dtoa_r+0x6a4>
 8009662:	2330      	movs	r3, #48	; 0x30
 8009664:	f88b 3000 	strb.w	r3, [fp]
 8009668:	465b      	mov	r3, fp
 800966a:	3701      	adds	r7, #1
 800966c:	781a      	ldrb	r2, [r3, #0]
 800966e:	3201      	adds	r2, #1
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	e790      	b.n	8009596 <_dtoa_r+0x5c6>
 8009674:	461d      	mov	r5, r3
 8009676:	e7ed      	b.n	8009654 <_dtoa_r+0x684>
 8009678:	2200      	movs	r2, #0
 800967a:	4b99      	ldr	r3, [pc, #612]	; (80098e0 <_dtoa_r+0x910>)
 800967c:	f7f6 ff2c 	bl	80004d8 <__aeabi_dmul>
 8009680:	2200      	movs	r2, #0
 8009682:	2300      	movs	r3, #0
 8009684:	4606      	mov	r6, r0
 8009686:	460f      	mov	r7, r1
 8009688:	f7f7 f98e 	bl	80009a8 <__aeabi_dcmpeq>
 800968c:	2800      	cmp	r0, #0
 800968e:	d09e      	beq.n	80095ce <_dtoa_r+0x5fe>
 8009690:	e7cf      	b.n	8009632 <_dtoa_r+0x662>
 8009692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009694:	2a00      	cmp	r2, #0
 8009696:	f000 8088 	beq.w	80097aa <_dtoa_r+0x7da>
 800969a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800969c:	2a01      	cmp	r2, #1
 800969e:	dc6d      	bgt.n	800977c <_dtoa_r+0x7ac>
 80096a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096a2:	2a00      	cmp	r2, #0
 80096a4:	d066      	beq.n	8009774 <_dtoa_r+0x7a4>
 80096a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096aa:	464d      	mov	r5, r9
 80096ac:	9e08      	ldr	r6, [sp, #32]
 80096ae:	9a07      	ldr	r2, [sp, #28]
 80096b0:	2101      	movs	r1, #1
 80096b2:	441a      	add	r2, r3
 80096b4:	4620      	mov	r0, r4
 80096b6:	4499      	add	r9, r3
 80096b8:	9207      	str	r2, [sp, #28]
 80096ba:	f001 f98e 	bl	800a9da <__i2b>
 80096be:	4607      	mov	r7, r0
 80096c0:	2d00      	cmp	r5, #0
 80096c2:	dd0b      	ble.n	80096dc <_dtoa_r+0x70c>
 80096c4:	9b07      	ldr	r3, [sp, #28]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	dd08      	ble.n	80096dc <_dtoa_r+0x70c>
 80096ca:	42ab      	cmp	r3, r5
 80096cc:	bfa8      	it	ge
 80096ce:	462b      	movge	r3, r5
 80096d0:	9a07      	ldr	r2, [sp, #28]
 80096d2:	eba9 0903 	sub.w	r9, r9, r3
 80096d6:	1aed      	subs	r5, r5, r3
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	9307      	str	r3, [sp, #28]
 80096dc:	9b08      	ldr	r3, [sp, #32]
 80096de:	b1eb      	cbz	r3, 800971c <_dtoa_r+0x74c>
 80096e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d065      	beq.n	80097b2 <_dtoa_r+0x7e2>
 80096e6:	b18e      	cbz	r6, 800970c <_dtoa_r+0x73c>
 80096e8:	4639      	mov	r1, r7
 80096ea:	4632      	mov	r2, r6
 80096ec:	4620      	mov	r0, r4
 80096ee:	f001 fa13 	bl	800ab18 <__pow5mult>
 80096f2:	9a06      	ldr	r2, [sp, #24]
 80096f4:	4601      	mov	r1, r0
 80096f6:	4607      	mov	r7, r0
 80096f8:	4620      	mov	r0, r4
 80096fa:	f001 f977 	bl	800a9ec <__multiply>
 80096fe:	9906      	ldr	r1, [sp, #24]
 8009700:	900a      	str	r0, [sp, #40]	; 0x28
 8009702:	4620      	mov	r0, r4
 8009704:	f001 f8d7 	bl	800a8b6 <_Bfree>
 8009708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970a:	9306      	str	r3, [sp, #24]
 800970c:	9b08      	ldr	r3, [sp, #32]
 800970e:	1b9a      	subs	r2, r3, r6
 8009710:	d004      	beq.n	800971c <_dtoa_r+0x74c>
 8009712:	9906      	ldr	r1, [sp, #24]
 8009714:	4620      	mov	r0, r4
 8009716:	f001 f9ff 	bl	800ab18 <__pow5mult>
 800971a:	9006      	str	r0, [sp, #24]
 800971c:	2101      	movs	r1, #1
 800971e:	4620      	mov	r0, r4
 8009720:	f001 f95b 	bl	800a9da <__i2b>
 8009724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009726:	4606      	mov	r6, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 81ca 	beq.w	8009ac2 <_dtoa_r+0xaf2>
 800972e:	461a      	mov	r2, r3
 8009730:	4601      	mov	r1, r0
 8009732:	4620      	mov	r0, r4
 8009734:	f001 f9f0 	bl	800ab18 <__pow5mult>
 8009738:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800973a:	4606      	mov	r6, r0
 800973c:	2b01      	cmp	r3, #1
 800973e:	dc3e      	bgt.n	80097be <_dtoa_r+0x7ee>
 8009740:	9b02      	ldr	r3, [sp, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d137      	bne.n	80097b6 <_dtoa_r+0x7e6>
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800974c:	2b00      	cmp	r3, #0
 800974e:	d134      	bne.n	80097ba <_dtoa_r+0x7ea>
 8009750:	9b03      	ldr	r3, [sp, #12]
 8009752:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009756:	0d1b      	lsrs	r3, r3, #20
 8009758:	051b      	lsls	r3, r3, #20
 800975a:	b12b      	cbz	r3, 8009768 <_dtoa_r+0x798>
 800975c:	9b07      	ldr	r3, [sp, #28]
 800975e:	f109 0901 	add.w	r9, r9, #1
 8009762:	3301      	adds	r3, #1
 8009764:	9307      	str	r3, [sp, #28]
 8009766:	2301      	movs	r3, #1
 8009768:	9308      	str	r3, [sp, #32]
 800976a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800976c:	2b00      	cmp	r3, #0
 800976e:	d128      	bne.n	80097c2 <_dtoa_r+0x7f2>
 8009770:	2001      	movs	r0, #1
 8009772:	e02e      	b.n	80097d2 <_dtoa_r+0x802>
 8009774:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009776:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800977a:	e796      	b.n	80096aa <_dtoa_r+0x6da>
 800977c:	9b08      	ldr	r3, [sp, #32]
 800977e:	f108 36ff 	add.w	r6, r8, #4294967295
 8009782:	42b3      	cmp	r3, r6
 8009784:	bfb7      	itett	lt
 8009786:	9b08      	ldrlt	r3, [sp, #32]
 8009788:	1b9e      	subge	r6, r3, r6
 800978a:	1af2      	sublt	r2, r6, r3
 800978c:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800978e:	bfbf      	itttt	lt
 8009790:	9608      	strlt	r6, [sp, #32]
 8009792:	189b      	addlt	r3, r3, r2
 8009794:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009796:	2600      	movlt	r6, #0
 8009798:	f1b8 0f00 	cmp.w	r8, #0
 800979c:	bfb9      	ittee	lt
 800979e:	eba9 0508 	sublt.w	r5, r9, r8
 80097a2:	2300      	movlt	r3, #0
 80097a4:	464d      	movge	r5, r9
 80097a6:	4643      	movge	r3, r8
 80097a8:	e781      	b.n	80096ae <_dtoa_r+0x6de>
 80097aa:	9e08      	ldr	r6, [sp, #32]
 80097ac:	464d      	mov	r5, r9
 80097ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80097b0:	e786      	b.n	80096c0 <_dtoa_r+0x6f0>
 80097b2:	9a08      	ldr	r2, [sp, #32]
 80097b4:	e7ad      	b.n	8009712 <_dtoa_r+0x742>
 80097b6:	2300      	movs	r3, #0
 80097b8:	e7d6      	b.n	8009768 <_dtoa_r+0x798>
 80097ba:	9b02      	ldr	r3, [sp, #8]
 80097bc:	e7d4      	b.n	8009768 <_dtoa_r+0x798>
 80097be:	2300      	movs	r3, #0
 80097c0:	9308      	str	r3, [sp, #32]
 80097c2:	6933      	ldr	r3, [r6, #16]
 80097c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097c8:	6918      	ldr	r0, [r3, #16]
 80097ca:	f001 f8b8 	bl	800a93e <__hi0bits>
 80097ce:	f1c0 0020 	rsb	r0, r0, #32
 80097d2:	9b07      	ldr	r3, [sp, #28]
 80097d4:	4418      	add	r0, r3
 80097d6:	f010 001f 	ands.w	r0, r0, #31
 80097da:	d047      	beq.n	800986c <_dtoa_r+0x89c>
 80097dc:	f1c0 0320 	rsb	r3, r0, #32
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	dd3b      	ble.n	800985c <_dtoa_r+0x88c>
 80097e4:	9b07      	ldr	r3, [sp, #28]
 80097e6:	f1c0 001c 	rsb	r0, r0, #28
 80097ea:	4481      	add	r9, r0
 80097ec:	4405      	add	r5, r0
 80097ee:	4403      	add	r3, r0
 80097f0:	9307      	str	r3, [sp, #28]
 80097f2:	f1b9 0f00 	cmp.w	r9, #0
 80097f6:	dd05      	ble.n	8009804 <_dtoa_r+0x834>
 80097f8:	464a      	mov	r2, r9
 80097fa:	9906      	ldr	r1, [sp, #24]
 80097fc:	4620      	mov	r0, r4
 80097fe:	f001 f9cb 	bl	800ab98 <__lshift>
 8009802:	9006      	str	r0, [sp, #24]
 8009804:	9b07      	ldr	r3, [sp, #28]
 8009806:	2b00      	cmp	r3, #0
 8009808:	dd05      	ble.n	8009816 <_dtoa_r+0x846>
 800980a:	4631      	mov	r1, r6
 800980c:	461a      	mov	r2, r3
 800980e:	4620      	mov	r0, r4
 8009810:	f001 f9c2 	bl	800ab98 <__lshift>
 8009814:	4606      	mov	r6, r0
 8009816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009818:	b353      	cbz	r3, 8009870 <_dtoa_r+0x8a0>
 800981a:	4631      	mov	r1, r6
 800981c:	9806      	ldr	r0, [sp, #24]
 800981e:	f001 fa0f 	bl	800ac40 <__mcmp>
 8009822:	2800      	cmp	r0, #0
 8009824:	da24      	bge.n	8009870 <_dtoa_r+0x8a0>
 8009826:	2300      	movs	r3, #0
 8009828:	220a      	movs	r2, #10
 800982a:	9906      	ldr	r1, [sp, #24]
 800982c:	4620      	mov	r0, r4
 800982e:	f001 f84b 	bl	800a8c8 <__multadd>
 8009832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009834:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009838:	9006      	str	r0, [sp, #24]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 8148 	beq.w	8009ad0 <_dtoa_r+0xb00>
 8009840:	2300      	movs	r3, #0
 8009842:	4639      	mov	r1, r7
 8009844:	220a      	movs	r2, #10
 8009846:	4620      	mov	r0, r4
 8009848:	f001 f83e 	bl	800a8c8 <__multadd>
 800984c:	9b04      	ldr	r3, [sp, #16]
 800984e:	4607      	mov	r7, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	dc4d      	bgt.n	80098f0 <_dtoa_r+0x920>
 8009854:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009856:	2b02      	cmp	r3, #2
 8009858:	dd4a      	ble.n	80098f0 <_dtoa_r+0x920>
 800985a:	e011      	b.n	8009880 <_dtoa_r+0x8b0>
 800985c:	d0c9      	beq.n	80097f2 <_dtoa_r+0x822>
 800985e:	9a07      	ldr	r2, [sp, #28]
 8009860:	331c      	adds	r3, #28
 8009862:	441a      	add	r2, r3
 8009864:	4499      	add	r9, r3
 8009866:	441d      	add	r5, r3
 8009868:	4613      	mov	r3, r2
 800986a:	e7c1      	b.n	80097f0 <_dtoa_r+0x820>
 800986c:	4603      	mov	r3, r0
 800986e:	e7f6      	b.n	800985e <_dtoa_r+0x88e>
 8009870:	f1b8 0f00 	cmp.w	r8, #0
 8009874:	dc36      	bgt.n	80098e4 <_dtoa_r+0x914>
 8009876:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009878:	2b02      	cmp	r3, #2
 800987a:	dd33      	ble.n	80098e4 <_dtoa_r+0x914>
 800987c:	f8cd 8010 	str.w	r8, [sp, #16]
 8009880:	9b04      	ldr	r3, [sp, #16]
 8009882:	b963      	cbnz	r3, 800989e <_dtoa_r+0x8ce>
 8009884:	4631      	mov	r1, r6
 8009886:	2205      	movs	r2, #5
 8009888:	4620      	mov	r0, r4
 800988a:	f001 f81d 	bl	800a8c8 <__multadd>
 800988e:	4601      	mov	r1, r0
 8009890:	4606      	mov	r6, r0
 8009892:	9806      	ldr	r0, [sp, #24]
 8009894:	f001 f9d4 	bl	800ac40 <__mcmp>
 8009898:	2800      	cmp	r0, #0
 800989a:	f73f add2 	bgt.w	8009442 <_dtoa_r+0x472>
 800989e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80098a0:	465d      	mov	r5, fp
 80098a2:	ea6f 0a03 	mvn.w	sl, r3
 80098a6:	f04f 0900 	mov.w	r9, #0
 80098aa:	4631      	mov	r1, r6
 80098ac:	4620      	mov	r0, r4
 80098ae:	f001 f802 	bl	800a8b6 <_Bfree>
 80098b2:	2f00      	cmp	r7, #0
 80098b4:	f43f aebd 	beq.w	8009632 <_dtoa_r+0x662>
 80098b8:	f1b9 0f00 	cmp.w	r9, #0
 80098bc:	d005      	beq.n	80098ca <_dtoa_r+0x8fa>
 80098be:	45b9      	cmp	r9, r7
 80098c0:	d003      	beq.n	80098ca <_dtoa_r+0x8fa>
 80098c2:	4649      	mov	r1, r9
 80098c4:	4620      	mov	r0, r4
 80098c6:	f000 fff6 	bl	800a8b6 <_Bfree>
 80098ca:	4639      	mov	r1, r7
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 fff2 	bl	800a8b6 <_Bfree>
 80098d2:	e6ae      	b.n	8009632 <_dtoa_r+0x662>
 80098d4:	2600      	movs	r6, #0
 80098d6:	4637      	mov	r7, r6
 80098d8:	e7e1      	b.n	800989e <_dtoa_r+0x8ce>
 80098da:	46ba      	mov	sl, r7
 80098dc:	4637      	mov	r7, r6
 80098de:	e5b0      	b.n	8009442 <_dtoa_r+0x472>
 80098e0:	40240000 	.word	0x40240000
 80098e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 80f7 	beq.w	8009ade <_dtoa_r+0xb0e>
 80098f0:	2d00      	cmp	r5, #0
 80098f2:	dd05      	ble.n	8009900 <_dtoa_r+0x930>
 80098f4:	4639      	mov	r1, r7
 80098f6:	462a      	mov	r2, r5
 80098f8:	4620      	mov	r0, r4
 80098fa:	f001 f94d 	bl	800ab98 <__lshift>
 80098fe:	4607      	mov	r7, r0
 8009900:	9b08      	ldr	r3, [sp, #32]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d04c      	beq.n	80099a0 <_dtoa_r+0x9d0>
 8009906:	6879      	ldr	r1, [r7, #4]
 8009908:	4620      	mov	r0, r4
 800990a:	f000 ffaf 	bl	800a86c <_Balloc>
 800990e:	4605      	mov	r5, r0
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	f107 010c 	add.w	r1, r7, #12
 8009916:	3202      	adds	r2, #2
 8009918:	0092      	lsls	r2, r2, #2
 800991a:	300c      	adds	r0, #12
 800991c:	f000 ff76 	bl	800a80c <memcpy>
 8009920:	2201      	movs	r2, #1
 8009922:	4629      	mov	r1, r5
 8009924:	4620      	mov	r0, r4
 8009926:	f001 f937 	bl	800ab98 <__lshift>
 800992a:	46b9      	mov	r9, r7
 800992c:	4607      	mov	r7, r0
 800992e:	9b02      	ldr	r3, [sp, #8]
 8009930:	f8cd b01c 	str.w	fp, [sp, #28]
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	9308      	str	r3, [sp, #32]
 800993a:	4631      	mov	r1, r6
 800993c:	9806      	ldr	r0, [sp, #24]
 800993e:	f7ff fab7 	bl	8008eb0 <quorem>
 8009942:	4649      	mov	r1, r9
 8009944:	4605      	mov	r5, r0
 8009946:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800994a:	9806      	ldr	r0, [sp, #24]
 800994c:	f001 f978 	bl	800ac40 <__mcmp>
 8009950:	463a      	mov	r2, r7
 8009952:	9002      	str	r0, [sp, #8]
 8009954:	4631      	mov	r1, r6
 8009956:	4620      	mov	r0, r4
 8009958:	f001 f98c 	bl	800ac74 <__mdiff>
 800995c:	68c3      	ldr	r3, [r0, #12]
 800995e:	4602      	mov	r2, r0
 8009960:	bb03      	cbnz	r3, 80099a4 <_dtoa_r+0x9d4>
 8009962:	4601      	mov	r1, r0
 8009964:	9009      	str	r0, [sp, #36]	; 0x24
 8009966:	9806      	ldr	r0, [sp, #24]
 8009968:	f001 f96a 	bl	800ac40 <__mcmp>
 800996c:	4603      	mov	r3, r0
 800996e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009970:	4611      	mov	r1, r2
 8009972:	4620      	mov	r0, r4
 8009974:	9309      	str	r3, [sp, #36]	; 0x24
 8009976:	f000 ff9e 	bl	800a8b6 <_Bfree>
 800997a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800997c:	b9a3      	cbnz	r3, 80099a8 <_dtoa_r+0x9d8>
 800997e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009980:	b992      	cbnz	r2, 80099a8 <_dtoa_r+0x9d8>
 8009982:	9a08      	ldr	r2, [sp, #32]
 8009984:	b982      	cbnz	r2, 80099a8 <_dtoa_r+0x9d8>
 8009986:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800998a:	d029      	beq.n	80099e0 <_dtoa_r+0xa10>
 800998c:	9b02      	ldr	r3, [sp, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	dd01      	ble.n	8009996 <_dtoa_r+0x9c6>
 8009992:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	1c5d      	adds	r5, r3, #1
 800999a:	f883 8000 	strb.w	r8, [r3]
 800999e:	e784      	b.n	80098aa <_dtoa_r+0x8da>
 80099a0:	4638      	mov	r0, r7
 80099a2:	e7c2      	b.n	800992a <_dtoa_r+0x95a>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e7e3      	b.n	8009970 <_dtoa_r+0x9a0>
 80099a8:	9a02      	ldr	r2, [sp, #8]
 80099aa:	2a00      	cmp	r2, #0
 80099ac:	db04      	blt.n	80099b8 <_dtoa_r+0x9e8>
 80099ae:	d124      	bne.n	80099fa <_dtoa_r+0xa2a>
 80099b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80099b2:	bb12      	cbnz	r2, 80099fa <_dtoa_r+0xa2a>
 80099b4:	9a08      	ldr	r2, [sp, #32]
 80099b6:	bb02      	cbnz	r2, 80099fa <_dtoa_r+0xa2a>
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	ddec      	ble.n	8009996 <_dtoa_r+0x9c6>
 80099bc:	2201      	movs	r2, #1
 80099be:	9906      	ldr	r1, [sp, #24]
 80099c0:	4620      	mov	r0, r4
 80099c2:	f001 f8e9 	bl	800ab98 <__lshift>
 80099c6:	4631      	mov	r1, r6
 80099c8:	9006      	str	r0, [sp, #24]
 80099ca:	f001 f939 	bl	800ac40 <__mcmp>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	dc03      	bgt.n	80099da <_dtoa_r+0xa0a>
 80099d2:	d1e0      	bne.n	8009996 <_dtoa_r+0x9c6>
 80099d4:	f018 0f01 	tst.w	r8, #1
 80099d8:	d0dd      	beq.n	8009996 <_dtoa_r+0x9c6>
 80099da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80099de:	d1d8      	bne.n	8009992 <_dtoa_r+0x9c2>
 80099e0:	9b07      	ldr	r3, [sp, #28]
 80099e2:	9a07      	ldr	r2, [sp, #28]
 80099e4:	1c5d      	adds	r5, r3, #1
 80099e6:	2339      	movs	r3, #57	; 0x39
 80099e8:	7013      	strb	r3, [r2, #0]
 80099ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099ee:	1e6a      	subs	r2, r5, #1
 80099f0:	2b39      	cmp	r3, #57	; 0x39
 80099f2:	d04e      	beq.n	8009a92 <_dtoa_r+0xac2>
 80099f4:	3301      	adds	r3, #1
 80099f6:	7013      	strb	r3, [r2, #0]
 80099f8:	e757      	b.n	80098aa <_dtoa_r+0x8da>
 80099fa:	9a07      	ldr	r2, [sp, #28]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f102 0501 	add.w	r5, r2, #1
 8009a02:	dd06      	ble.n	8009a12 <_dtoa_r+0xa42>
 8009a04:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009a08:	d0ea      	beq.n	80099e0 <_dtoa_r+0xa10>
 8009a0a:	f108 0801 	add.w	r8, r8, #1
 8009a0e:	9b07      	ldr	r3, [sp, #28]
 8009a10:	e7c3      	b.n	800999a <_dtoa_r+0x9ca>
 8009a12:	9a04      	ldr	r2, [sp, #16]
 8009a14:	eba5 030b 	sub.w	r3, r5, fp
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009a1e:	d021      	beq.n	8009a64 <_dtoa_r+0xa94>
 8009a20:	2300      	movs	r3, #0
 8009a22:	220a      	movs	r2, #10
 8009a24:	9906      	ldr	r1, [sp, #24]
 8009a26:	4620      	mov	r0, r4
 8009a28:	f000 ff4e 	bl	800a8c8 <__multadd>
 8009a2c:	45b9      	cmp	r9, r7
 8009a2e:	9006      	str	r0, [sp, #24]
 8009a30:	f04f 0300 	mov.w	r3, #0
 8009a34:	f04f 020a 	mov.w	r2, #10
 8009a38:	4649      	mov	r1, r9
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	d105      	bne.n	8009a4a <_dtoa_r+0xa7a>
 8009a3e:	f000 ff43 	bl	800a8c8 <__multadd>
 8009a42:	4681      	mov	r9, r0
 8009a44:	4607      	mov	r7, r0
 8009a46:	9507      	str	r5, [sp, #28]
 8009a48:	e777      	b.n	800993a <_dtoa_r+0x96a>
 8009a4a:	f000 ff3d 	bl	800a8c8 <__multadd>
 8009a4e:	4639      	mov	r1, r7
 8009a50:	4681      	mov	r9, r0
 8009a52:	2300      	movs	r3, #0
 8009a54:	220a      	movs	r2, #10
 8009a56:	4620      	mov	r0, r4
 8009a58:	f000 ff36 	bl	800a8c8 <__multadd>
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	e7f2      	b.n	8009a46 <_dtoa_r+0xa76>
 8009a60:	f04f 0900 	mov.w	r9, #0
 8009a64:	2201      	movs	r2, #1
 8009a66:	9906      	ldr	r1, [sp, #24]
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f001 f895 	bl	800ab98 <__lshift>
 8009a6e:	4631      	mov	r1, r6
 8009a70:	9006      	str	r0, [sp, #24]
 8009a72:	f001 f8e5 	bl	800ac40 <__mcmp>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	dcb7      	bgt.n	80099ea <_dtoa_r+0xa1a>
 8009a7a:	d102      	bne.n	8009a82 <_dtoa_r+0xab2>
 8009a7c:	f018 0f01 	tst.w	r8, #1
 8009a80:	d1b3      	bne.n	80099ea <_dtoa_r+0xa1a>
 8009a82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a86:	1e6a      	subs	r2, r5, #1
 8009a88:	2b30      	cmp	r3, #48	; 0x30
 8009a8a:	f47f af0e 	bne.w	80098aa <_dtoa_r+0x8da>
 8009a8e:	4615      	mov	r5, r2
 8009a90:	e7f7      	b.n	8009a82 <_dtoa_r+0xab2>
 8009a92:	4593      	cmp	fp, r2
 8009a94:	d105      	bne.n	8009aa2 <_dtoa_r+0xad2>
 8009a96:	2331      	movs	r3, #49	; 0x31
 8009a98:	f10a 0a01 	add.w	sl, sl, #1
 8009a9c:	f88b 3000 	strb.w	r3, [fp]
 8009aa0:	e703      	b.n	80098aa <_dtoa_r+0x8da>
 8009aa2:	4615      	mov	r5, r2
 8009aa4:	e7a1      	b.n	80099ea <_dtoa_r+0xa1a>
 8009aa6:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009b0c <_dtoa_r+0xb3c>
 8009aaa:	f7ff bac9 	b.w	8009040 <_dtoa_r+0x70>
 8009aae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ab0:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8009b10 <_dtoa_r+0xb40>
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f43f aac3 	beq.w	8009040 <_dtoa_r+0x70>
 8009aba:	f10b 0308 	add.w	r3, fp, #8
 8009abe:	f7ff babd 	b.w	800903c <_dtoa_r+0x6c>
 8009ac2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	f77f ae3b 	ble.w	8009740 <_dtoa_r+0x770>
 8009aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009acc:	9308      	str	r3, [sp, #32]
 8009ace:	e64f      	b.n	8009770 <_dtoa_r+0x7a0>
 8009ad0:	9b04      	ldr	r3, [sp, #16]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	dc03      	bgt.n	8009ade <_dtoa_r+0xb0e>
 8009ad6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	f73f aed1 	bgt.w	8009880 <_dtoa_r+0x8b0>
 8009ade:	465d      	mov	r5, fp
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	9806      	ldr	r0, [sp, #24]
 8009ae4:	f7ff f9e4 	bl	8008eb0 <quorem>
 8009ae8:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009aec:	f805 8b01 	strb.w	r8, [r5], #1
 8009af0:	9a04      	ldr	r2, [sp, #16]
 8009af2:	eba5 030b 	sub.w	r3, r5, fp
 8009af6:	429a      	cmp	r2, r3
 8009af8:	ddb2      	ble.n	8009a60 <_dtoa_r+0xa90>
 8009afa:	2300      	movs	r3, #0
 8009afc:	220a      	movs	r2, #10
 8009afe:	9906      	ldr	r1, [sp, #24]
 8009b00:	4620      	mov	r0, r4
 8009b02:	f000 fee1 	bl	800a8c8 <__multadd>
 8009b06:	9006      	str	r0, [sp, #24]
 8009b08:	e7ea      	b.n	8009ae0 <_dtoa_r+0xb10>
 8009b0a:	bf00      	nop
 8009b0c:	0800e9ae 	.word	0x0800e9ae
 8009b10:	0800e9f0 	.word	0x0800e9f0

08009b14 <__sflush_r>:
 8009b14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1c:	b293      	uxth	r3, r2
 8009b1e:	4605      	mov	r5, r0
 8009b20:	0718      	lsls	r0, r3, #28
 8009b22:	460c      	mov	r4, r1
 8009b24:	d45f      	bmi.n	8009be6 <__sflush_r+0xd2>
 8009b26:	684b      	ldr	r3, [r1, #4]
 8009b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	818a      	strh	r2, [r1, #12]
 8009b30:	dc05      	bgt.n	8009b3e <__sflush_r+0x2a>
 8009b32:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dc02      	bgt.n	8009b3e <__sflush_r+0x2a>
 8009b38:	2000      	movs	r0, #0
 8009b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b40:	2e00      	cmp	r6, #0
 8009b42:	d0f9      	beq.n	8009b38 <__sflush_r+0x24>
 8009b44:	2300      	movs	r3, #0
 8009b46:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b4a:	682f      	ldr	r7, [r5, #0]
 8009b4c:	69e1      	ldr	r1, [r4, #28]
 8009b4e:	602b      	str	r3, [r5, #0]
 8009b50:	d036      	beq.n	8009bc0 <__sflush_r+0xac>
 8009b52:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	075a      	lsls	r2, r3, #29
 8009b58:	d505      	bpl.n	8009b66 <__sflush_r+0x52>
 8009b5a:	6863      	ldr	r3, [r4, #4]
 8009b5c:	1ac0      	subs	r0, r0, r3
 8009b5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b60:	b10b      	cbz	r3, 8009b66 <__sflush_r+0x52>
 8009b62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b64:	1ac0      	subs	r0, r0, r3
 8009b66:	2300      	movs	r3, #0
 8009b68:	4602      	mov	r2, r0
 8009b6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b6c:	69e1      	ldr	r1, [r4, #28]
 8009b6e:	4628      	mov	r0, r5
 8009b70:	47b0      	blx	r6
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	d106      	bne.n	8009b86 <__sflush_r+0x72>
 8009b78:	6829      	ldr	r1, [r5, #0]
 8009b7a:	291d      	cmp	r1, #29
 8009b7c:	d84c      	bhi.n	8009c18 <__sflush_r+0x104>
 8009b7e:	4a2b      	ldr	r2, [pc, #172]	; (8009c2c <__sflush_r+0x118>)
 8009b80:	40ca      	lsrs	r2, r1
 8009b82:	07d6      	lsls	r6, r2, #31
 8009b84:	d548      	bpl.n	8009c18 <__sflush_r+0x104>
 8009b86:	2200      	movs	r2, #0
 8009b88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b8c:	b21b      	sxth	r3, r3
 8009b8e:	6062      	str	r2, [r4, #4]
 8009b90:	6922      	ldr	r2, [r4, #16]
 8009b92:	04d9      	lsls	r1, r3, #19
 8009b94:	81a3      	strh	r3, [r4, #12]
 8009b96:	6022      	str	r2, [r4, #0]
 8009b98:	d504      	bpl.n	8009ba4 <__sflush_r+0x90>
 8009b9a:	1c42      	adds	r2, r0, #1
 8009b9c:	d101      	bne.n	8009ba2 <__sflush_r+0x8e>
 8009b9e:	682b      	ldr	r3, [r5, #0]
 8009ba0:	b903      	cbnz	r3, 8009ba4 <__sflush_r+0x90>
 8009ba2:	6520      	str	r0, [r4, #80]	; 0x50
 8009ba4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009ba6:	602f      	str	r7, [r5, #0]
 8009ba8:	2900      	cmp	r1, #0
 8009baa:	d0c5      	beq.n	8009b38 <__sflush_r+0x24>
 8009bac:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009bb0:	4299      	cmp	r1, r3
 8009bb2:	d002      	beq.n	8009bba <__sflush_r+0xa6>
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f000 f937 	bl	8009e28 <_free_r>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	6320      	str	r0, [r4, #48]	; 0x30
 8009bbe:	e7bc      	b.n	8009b3a <__sflush_r+0x26>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	47b0      	blx	r6
 8009bc6:	1c41      	adds	r1, r0, #1
 8009bc8:	d1c4      	bne.n	8009b54 <__sflush_r+0x40>
 8009bca:	682b      	ldr	r3, [r5, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0c1      	beq.n	8009b54 <__sflush_r+0x40>
 8009bd0:	2b1d      	cmp	r3, #29
 8009bd2:	d001      	beq.n	8009bd8 <__sflush_r+0xc4>
 8009bd4:	2b16      	cmp	r3, #22
 8009bd6:	d101      	bne.n	8009bdc <__sflush_r+0xc8>
 8009bd8:	602f      	str	r7, [r5, #0]
 8009bda:	e7ad      	b.n	8009b38 <__sflush_r+0x24>
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	e7a9      	b.n	8009b3a <__sflush_r+0x26>
 8009be6:	690f      	ldr	r7, [r1, #16]
 8009be8:	2f00      	cmp	r7, #0
 8009bea:	d0a5      	beq.n	8009b38 <__sflush_r+0x24>
 8009bec:	079b      	lsls	r3, r3, #30
 8009bee:	bf18      	it	ne
 8009bf0:	2300      	movne	r3, #0
 8009bf2:	680e      	ldr	r6, [r1, #0]
 8009bf4:	bf08      	it	eq
 8009bf6:	694b      	ldreq	r3, [r1, #20]
 8009bf8:	eba6 0807 	sub.w	r8, r6, r7
 8009bfc:	600f      	str	r7, [r1, #0]
 8009bfe:	608b      	str	r3, [r1, #8]
 8009c00:	f1b8 0f00 	cmp.w	r8, #0
 8009c04:	dd98      	ble.n	8009b38 <__sflush_r+0x24>
 8009c06:	4643      	mov	r3, r8
 8009c08:	463a      	mov	r2, r7
 8009c0a:	69e1      	ldr	r1, [r4, #28]
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c10:	47b0      	blx	r6
 8009c12:	2800      	cmp	r0, #0
 8009c14:	dc06      	bgt.n	8009c24 <__sflush_r+0x110>
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c1c:	81a3      	strh	r3, [r4, #12]
 8009c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c22:	e78a      	b.n	8009b3a <__sflush_r+0x26>
 8009c24:	4407      	add	r7, r0
 8009c26:	eba8 0800 	sub.w	r8, r8, r0
 8009c2a:	e7e9      	b.n	8009c00 <__sflush_r+0xec>
 8009c2c:	20400001 	.word	0x20400001

08009c30 <_fflush_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	460c      	mov	r4, r1
 8009c34:	4605      	mov	r5, r0
 8009c36:	b118      	cbz	r0, 8009c40 <_fflush_r+0x10>
 8009c38:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009c3a:	b90b      	cbnz	r3, 8009c40 <_fflush_r+0x10>
 8009c3c:	f000 f864 	bl	8009d08 <__sinit>
 8009c40:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8009c44:	b1b8      	cbz	r0, 8009c76 <_fflush_r+0x46>
 8009c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c48:	07db      	lsls	r3, r3, #31
 8009c4a:	d404      	bmi.n	8009c56 <_fflush_r+0x26>
 8009c4c:	0581      	lsls	r1, r0, #22
 8009c4e:	d402      	bmi.n	8009c56 <_fflush_r+0x26>
 8009c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c52:	f000 fb21 	bl	800a298 <__retarget_lock_acquire_recursive>
 8009c56:	4628      	mov	r0, r5
 8009c58:	4621      	mov	r1, r4
 8009c5a:	f7ff ff5b 	bl	8009b14 <__sflush_r>
 8009c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c60:	4605      	mov	r5, r0
 8009c62:	07da      	lsls	r2, r3, #31
 8009c64:	d405      	bmi.n	8009c72 <_fflush_r+0x42>
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	059b      	lsls	r3, r3, #22
 8009c6a:	d402      	bmi.n	8009c72 <_fflush_r+0x42>
 8009c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c6e:	f000 fb14 	bl	800a29a <__retarget_lock_release_recursive>
 8009c72:	4628      	mov	r0, r5
 8009c74:	bd38      	pop	{r3, r4, r5, pc}
 8009c76:	4605      	mov	r5, r0
 8009c78:	e7fb      	b.n	8009c72 <_fflush_r+0x42>
	...

08009c7c <std>:
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	b510      	push	{r4, lr}
 8009c80:	4604      	mov	r4, r0
 8009c82:	e9c0 3300 	strd	r3, r3, [r0]
 8009c86:	6083      	str	r3, [r0, #8]
 8009c88:	8181      	strh	r1, [r0, #12]
 8009c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8009c8c:	81c2      	strh	r2, [r0, #14]
 8009c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c92:	6183      	str	r3, [r0, #24]
 8009c94:	4619      	mov	r1, r3
 8009c96:	2208      	movs	r2, #8
 8009c98:	305c      	adds	r0, #92	; 0x5c
 8009c9a:	f7fc fab0 	bl	80061fe <memset>
 8009c9e:	4b07      	ldr	r3, [pc, #28]	; (8009cbc <std+0x40>)
 8009ca0:	61e4      	str	r4, [r4, #28]
 8009ca2:	6223      	str	r3, [r4, #32]
 8009ca4:	4b06      	ldr	r3, [pc, #24]	; (8009cc0 <std+0x44>)
 8009ca6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009caa:	6263      	str	r3, [r4, #36]	; 0x24
 8009cac:	4b05      	ldr	r3, [pc, #20]	; (8009cc4 <std+0x48>)
 8009cae:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cb0:	4b05      	ldr	r3, [pc, #20]	; (8009cc8 <std+0x4c>)
 8009cb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb8:	f000 baec 	b.w	800a294 <__retarget_lock_init_recursive>
 8009cbc:	0800b1ad 	.word	0x0800b1ad
 8009cc0:	0800b1cf 	.word	0x0800b1cf
 8009cc4:	0800b207 	.word	0x0800b207
 8009cc8:	0800b22b 	.word	0x0800b22b

08009ccc <_cleanup_r>:
 8009ccc:	4901      	ldr	r1, [pc, #4]	; (8009cd4 <_cleanup_r+0x8>)
 8009cce:	f000 bab5 	b.w	800a23c <_fwalk_reent>
 8009cd2:	bf00      	nop
 8009cd4:	0800b519 	.word	0x0800b519

08009cd8 <__sfp_lock_acquire>:
 8009cd8:	4801      	ldr	r0, [pc, #4]	; (8009ce0 <__sfp_lock_acquire+0x8>)
 8009cda:	f000 badd 	b.w	800a298 <__retarget_lock_acquire_recursive>
 8009cde:	bf00      	nop
 8009ce0:	200010cc 	.word	0x200010cc

08009ce4 <__sfp_lock_release>:
 8009ce4:	4801      	ldr	r0, [pc, #4]	; (8009cec <__sfp_lock_release+0x8>)
 8009ce6:	f000 bad8 	b.w	800a29a <__retarget_lock_release_recursive>
 8009cea:	bf00      	nop
 8009cec:	200010cc 	.word	0x200010cc

08009cf0 <__sinit_lock_acquire>:
 8009cf0:	4801      	ldr	r0, [pc, #4]	; (8009cf8 <__sinit_lock_acquire+0x8>)
 8009cf2:	f000 bad1 	b.w	800a298 <__retarget_lock_acquire_recursive>
 8009cf6:	bf00      	nop
 8009cf8:	200010c7 	.word	0x200010c7

08009cfc <__sinit_lock_release>:
 8009cfc:	4801      	ldr	r0, [pc, #4]	; (8009d04 <__sinit_lock_release+0x8>)
 8009cfe:	f000 bacc 	b.w	800a29a <__retarget_lock_release_recursive>
 8009d02:	bf00      	nop
 8009d04:	200010c7 	.word	0x200010c7

08009d08 <__sinit>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	f7ff fff0 	bl	8009cf0 <__sinit_lock_acquire>
 8009d10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009d12:	b11a      	cbz	r2, 8009d1c <__sinit+0x14>
 8009d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d18:	f7ff bff0 	b.w	8009cfc <__sinit_lock_release>
 8009d1c:	4b0d      	ldr	r3, [pc, #52]	; (8009d54 <__sinit+0x4c>)
 8009d1e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8009d22:	63e3      	str	r3, [r4, #60]	; 0x3c
 8009d24:	2303      	movs	r3, #3
 8009d26:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8009d2a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8009d2e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8009d32:	2104      	movs	r1, #4
 8009d34:	6860      	ldr	r0, [r4, #4]
 8009d36:	f7ff ffa1 	bl	8009c7c <std>
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	2109      	movs	r1, #9
 8009d3e:	68a0      	ldr	r0, [r4, #8]
 8009d40:	f7ff ff9c 	bl	8009c7c <std>
 8009d44:	2202      	movs	r2, #2
 8009d46:	2112      	movs	r1, #18
 8009d48:	68e0      	ldr	r0, [r4, #12]
 8009d4a:	f7ff ff97 	bl	8009c7c <std>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d52:	e7df      	b.n	8009d14 <__sinit+0xc>
 8009d54:	08009ccd 	.word	0x08009ccd

08009d58 <__libc_fini_array>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d07      	ldr	r5, [pc, #28]	; (8009d78 <__libc_fini_array+0x20>)
 8009d5c:	4c07      	ldr	r4, [pc, #28]	; (8009d7c <__libc_fini_array+0x24>)
 8009d5e:	1b64      	subs	r4, r4, r5
 8009d60:	10a4      	asrs	r4, r4, #2
 8009d62:	b91c      	cbnz	r4, 8009d6c <__libc_fini_array+0x14>
 8009d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d68:	f002 baf6 	b.w	800c358 <_fini>
 8009d6c:	3c01      	subs	r4, #1
 8009d6e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009d72:	4798      	blx	r3
 8009d74:	e7f5      	b.n	8009d62 <__libc_fini_array+0xa>
 8009d76:	bf00      	nop
 8009d78:	0800ec60 	.word	0x0800ec60
 8009d7c:	0800ec64 	.word	0x0800ec64

08009d80 <_malloc_trim_r>:
 8009d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d84:	4605      	mov	r5, r0
 8009d86:	2008      	movs	r0, #8
 8009d88:	460c      	mov	r4, r1
 8009d8a:	f001 fadf 	bl	800b34c <sysconf>
 8009d8e:	4680      	mov	r8, r0
 8009d90:	4f22      	ldr	r7, [pc, #136]	; (8009e1c <_malloc_trim_r+0x9c>)
 8009d92:	4628      	mov	r0, r5
 8009d94:	f000 fd5e 	bl	800a854 <__malloc_lock>
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	685e      	ldr	r6, [r3, #4]
 8009d9c:	f026 0603 	bic.w	r6, r6, #3
 8009da0:	1b34      	subs	r4, r6, r4
 8009da2:	3c11      	subs	r4, #17
 8009da4:	4444      	add	r4, r8
 8009da6:	fbb4 f4f8 	udiv	r4, r4, r8
 8009daa:	3c01      	subs	r4, #1
 8009dac:	fb08 f404 	mul.w	r4, r8, r4
 8009db0:	45a0      	cmp	r8, r4
 8009db2:	dd05      	ble.n	8009dc0 <_malloc_trim_r+0x40>
 8009db4:	4628      	mov	r0, r5
 8009db6:	f000 fd53 	bl	800a860 <__malloc_unlock>
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f001 f9e2 	bl	800b18c <_sbrk_r>
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	4433      	add	r3, r6
 8009dcc:	4298      	cmp	r0, r3
 8009dce:	d1f1      	bne.n	8009db4 <_malloc_trim_r+0x34>
 8009dd0:	4261      	negs	r1, r4
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f001 f9da 	bl	800b18c <_sbrk_r>
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d110      	bne.n	8009dfe <_malloc_trim_r+0x7e>
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4628      	mov	r0, r5
 8009de0:	f001 f9d4 	bl	800b18c <_sbrk_r>
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	1a83      	subs	r3, r0, r2
 8009de8:	2b0f      	cmp	r3, #15
 8009dea:	dde3      	ble.n	8009db4 <_malloc_trim_r+0x34>
 8009dec:	490c      	ldr	r1, [pc, #48]	; (8009e20 <_malloc_trim_r+0xa0>)
 8009dee:	f043 0301 	orr.w	r3, r3, #1
 8009df2:	6809      	ldr	r1, [r1, #0]
 8009df4:	6053      	str	r3, [r2, #4]
 8009df6:	1a40      	subs	r0, r0, r1
 8009df8:	490a      	ldr	r1, [pc, #40]	; (8009e24 <_malloc_trim_r+0xa4>)
 8009dfa:	6008      	str	r0, [r1, #0]
 8009dfc:	e7da      	b.n	8009db4 <_malloc_trim_r+0x34>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	4a08      	ldr	r2, [pc, #32]	; (8009e24 <_malloc_trim_r+0xa4>)
 8009e02:	1b36      	subs	r6, r6, r4
 8009e04:	f046 0601 	orr.w	r6, r6, #1
 8009e08:	605e      	str	r6, [r3, #4]
 8009e0a:	6813      	ldr	r3, [r2, #0]
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	1b1c      	subs	r4, r3, r4
 8009e10:	6014      	str	r4, [r2, #0]
 8009e12:	f000 fd25 	bl	800a860 <__malloc_unlock>
 8009e16:	2001      	movs	r0, #1
 8009e18:	e7d0      	b.n	8009dbc <_malloc_trim_r+0x3c>
 8009e1a:	bf00      	nop
 8009e1c:	20000474 	.word	0x20000474
 8009e20:	2000087c 	.word	0x2000087c
 8009e24:	20000a2c 	.word	0x20000a2c

08009e28 <_free_r>:
 8009e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	4688      	mov	r8, r1
 8009e30:	2900      	cmp	r1, #0
 8009e32:	f000 80ab 	beq.w	8009f8c <_free_r+0x164>
 8009e36:	f000 fd0d 	bl	800a854 <__malloc_lock>
 8009e3a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8009e3e:	4d54      	ldr	r5, [pc, #336]	; (8009f90 <_free_r+0x168>)
 8009e40:	f022 0001 	bic.w	r0, r2, #1
 8009e44:	f1a8 0308 	sub.w	r3, r8, #8
 8009e48:	181f      	adds	r7, r3, r0
 8009e4a:	68a9      	ldr	r1, [r5, #8]
 8009e4c:	687e      	ldr	r6, [r7, #4]
 8009e4e:	42b9      	cmp	r1, r7
 8009e50:	f026 0603 	bic.w	r6, r6, #3
 8009e54:	f002 0201 	and.w	r2, r2, #1
 8009e58:	d11b      	bne.n	8009e92 <_free_r+0x6a>
 8009e5a:	4430      	add	r0, r6
 8009e5c:	b93a      	cbnz	r2, 8009e6e <_free_r+0x46>
 8009e5e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8009e62:	1a9b      	subs	r3, r3, r2
 8009e64:	4410      	add	r0, r2
 8009e66:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8009e6a:	60ca      	str	r2, [r1, #12]
 8009e6c:	6091      	str	r1, [r2, #8]
 8009e6e:	f040 0201 	orr.w	r2, r0, #1
 8009e72:	605a      	str	r2, [r3, #4]
 8009e74:	60ab      	str	r3, [r5, #8]
 8009e76:	4b47      	ldr	r3, [pc, #284]	; (8009f94 <_free_r+0x16c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4283      	cmp	r3, r0
 8009e7c:	d804      	bhi.n	8009e88 <_free_r+0x60>
 8009e7e:	4b46      	ldr	r3, [pc, #280]	; (8009f98 <_free_r+0x170>)
 8009e80:	4620      	mov	r0, r4
 8009e82:	6819      	ldr	r1, [r3, #0]
 8009e84:	f7ff ff7c 	bl	8009d80 <_malloc_trim_r>
 8009e88:	4620      	mov	r0, r4
 8009e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8e:	f000 bce7 	b.w	800a860 <__malloc_unlock>
 8009e92:	607e      	str	r6, [r7, #4]
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	d139      	bne.n	8009f0c <_free_r+0xe4>
 8009e98:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8009e9c:	f105 0c08 	add.w	ip, r5, #8
 8009ea0:	1a5b      	subs	r3, r3, r1
 8009ea2:	4408      	add	r0, r1
 8009ea4:	6899      	ldr	r1, [r3, #8]
 8009ea6:	4561      	cmp	r1, ip
 8009ea8:	d032      	beq.n	8009f10 <_free_r+0xe8>
 8009eaa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8009eae:	f8c1 c00c 	str.w	ip, [r1, #12]
 8009eb2:	f8cc 1008 	str.w	r1, [ip, #8]
 8009eb6:	19b9      	adds	r1, r7, r6
 8009eb8:	6849      	ldr	r1, [r1, #4]
 8009eba:	07c9      	lsls	r1, r1, #31
 8009ebc:	d40a      	bmi.n	8009ed4 <_free_r+0xac>
 8009ebe:	4430      	add	r0, r6
 8009ec0:	68b9      	ldr	r1, [r7, #8]
 8009ec2:	bb3a      	cbnz	r2, 8009f14 <_free_r+0xec>
 8009ec4:	4e35      	ldr	r6, [pc, #212]	; (8009f9c <_free_r+0x174>)
 8009ec6:	42b1      	cmp	r1, r6
 8009ec8:	d124      	bne.n	8009f14 <_free_r+0xec>
 8009eca:	2201      	movs	r2, #1
 8009ecc:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8009ed0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009ed4:	f040 0101 	orr.w	r1, r0, #1
 8009ed8:	6059      	str	r1, [r3, #4]
 8009eda:	5018      	str	r0, [r3, r0]
 8009edc:	2a00      	cmp	r2, #0
 8009ede:	d1d3      	bne.n	8009e88 <_free_r+0x60>
 8009ee0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009ee4:	d21a      	bcs.n	8009f1c <_free_r+0xf4>
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	08c0      	lsrs	r0, r0, #3
 8009eea:	1081      	asrs	r1, r0, #2
 8009eec:	408a      	lsls	r2, r1
 8009eee:	6869      	ldr	r1, [r5, #4]
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	606a      	str	r2, [r5, #4]
 8009ef6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8009efa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009efe:	3a08      	subs	r2, #8
 8009f00:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8009f04:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8009f08:	60cb      	str	r3, [r1, #12]
 8009f0a:	e7bd      	b.n	8009e88 <_free_r+0x60>
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	e7d2      	b.n	8009eb6 <_free_r+0x8e>
 8009f10:	2201      	movs	r2, #1
 8009f12:	e7d0      	b.n	8009eb6 <_free_r+0x8e>
 8009f14:	68fe      	ldr	r6, [r7, #12]
 8009f16:	60ce      	str	r6, [r1, #12]
 8009f18:	60b1      	str	r1, [r6, #8]
 8009f1a:	e7db      	b.n	8009ed4 <_free_r+0xac>
 8009f1c:	0a42      	lsrs	r2, r0, #9
 8009f1e:	2a04      	cmp	r2, #4
 8009f20:	d813      	bhi.n	8009f4a <_free_r+0x122>
 8009f22:	0982      	lsrs	r2, r0, #6
 8009f24:	3238      	adds	r2, #56	; 0x38
 8009f26:	1c51      	adds	r1, r2, #1
 8009f28:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8009f2c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8009f30:	428e      	cmp	r6, r1
 8009f32:	d124      	bne.n	8009f7e <_free_r+0x156>
 8009f34:	2001      	movs	r0, #1
 8009f36:	1092      	asrs	r2, r2, #2
 8009f38:	fa00 f202 	lsl.w	r2, r0, r2
 8009f3c:	6868      	ldr	r0, [r5, #4]
 8009f3e:	4302      	orrs	r2, r0
 8009f40:	606a      	str	r2, [r5, #4]
 8009f42:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8009f46:	60b3      	str	r3, [r6, #8]
 8009f48:	e7de      	b.n	8009f08 <_free_r+0xe0>
 8009f4a:	2a14      	cmp	r2, #20
 8009f4c:	d801      	bhi.n	8009f52 <_free_r+0x12a>
 8009f4e:	325b      	adds	r2, #91	; 0x5b
 8009f50:	e7e9      	b.n	8009f26 <_free_r+0xfe>
 8009f52:	2a54      	cmp	r2, #84	; 0x54
 8009f54:	d802      	bhi.n	8009f5c <_free_r+0x134>
 8009f56:	0b02      	lsrs	r2, r0, #12
 8009f58:	326e      	adds	r2, #110	; 0x6e
 8009f5a:	e7e4      	b.n	8009f26 <_free_r+0xfe>
 8009f5c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009f60:	d802      	bhi.n	8009f68 <_free_r+0x140>
 8009f62:	0bc2      	lsrs	r2, r0, #15
 8009f64:	3277      	adds	r2, #119	; 0x77
 8009f66:	e7de      	b.n	8009f26 <_free_r+0xfe>
 8009f68:	f240 5154 	movw	r1, #1364	; 0x554
 8009f6c:	428a      	cmp	r2, r1
 8009f6e:	bf9a      	itte	ls
 8009f70:	0c82      	lsrls	r2, r0, #18
 8009f72:	327c      	addls	r2, #124	; 0x7c
 8009f74:	227e      	movhi	r2, #126	; 0x7e
 8009f76:	e7d6      	b.n	8009f26 <_free_r+0xfe>
 8009f78:	6889      	ldr	r1, [r1, #8]
 8009f7a:	428e      	cmp	r6, r1
 8009f7c:	d004      	beq.n	8009f88 <_free_r+0x160>
 8009f7e:	684a      	ldr	r2, [r1, #4]
 8009f80:	f022 0203 	bic.w	r2, r2, #3
 8009f84:	4282      	cmp	r2, r0
 8009f86:	d8f7      	bhi.n	8009f78 <_free_r+0x150>
 8009f88:	68ce      	ldr	r6, [r1, #12]
 8009f8a:	e7da      	b.n	8009f42 <_free_r+0x11a>
 8009f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f90:	20000474 	.word	0x20000474
 8009f94:	20000880 	.word	0x20000880
 8009f98:	20000a5c 	.word	0x20000a5c
 8009f9c:	2000047c 	.word	0x2000047c

08009fa0 <__sfvwrite_r>:
 8009fa0:	6893      	ldr	r3, [r2, #8]
 8009fa2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	460c      	mov	r4, r1
 8009faa:	4691      	mov	r9, r2
 8009fac:	b91b      	cbnz	r3, 8009fb6 <__sfvwrite_r+0x16>
 8009fae:	2000      	movs	r0, #0
 8009fb0:	b003      	add	sp, #12
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	898b      	ldrh	r3, [r1, #12]
 8009fb8:	0718      	lsls	r0, r3, #28
 8009fba:	d54f      	bpl.n	800a05c <__sfvwrite_r+0xbc>
 8009fbc:	690b      	ldr	r3, [r1, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d04c      	beq.n	800a05c <__sfvwrite_r+0xbc>
 8009fc2:	89a5      	ldrh	r5, [r4, #12]
 8009fc4:	f8d9 6000 	ldr.w	r6, [r9]
 8009fc8:	f015 0702 	ands.w	r7, r5, #2
 8009fcc:	d169      	bne.n	800a0a2 <__sfvwrite_r+0x102>
 8009fce:	f015 0501 	ands.w	r5, r5, #1
 8009fd2:	f000 809a 	beq.w	800a10a <__sfvwrite_r+0x16a>
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	46ba      	mov	sl, r7
 8009fda:	46bb      	mov	fp, r7
 8009fdc:	f1bb 0f00 	cmp.w	fp, #0
 8009fe0:	f000 8103 	beq.w	800a1ea <__sfvwrite_r+0x24a>
 8009fe4:	b950      	cbnz	r0, 8009ffc <__sfvwrite_r+0x5c>
 8009fe6:	465a      	mov	r2, fp
 8009fe8:	210a      	movs	r1, #10
 8009fea:	4650      	mov	r0, sl
 8009fec:	f000 fc00 	bl	800a7f0 <memchr>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	f000 80ff 	beq.w	800a1f4 <__sfvwrite_r+0x254>
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	eba0 070a 	sub.w	r7, r0, sl
 8009ffc:	6820      	ldr	r0, [r4, #0]
 8009ffe:	6921      	ldr	r1, [r4, #16]
 800a000:	455f      	cmp	r7, fp
 800a002:	463b      	mov	r3, r7
 800a004:	bf28      	it	cs
 800a006:	465b      	movcs	r3, fp
 800a008:	4288      	cmp	r0, r1
 800a00a:	6962      	ldr	r2, [r4, #20]
 800a00c:	f240 80f5 	bls.w	800a1fa <__sfvwrite_r+0x25a>
 800a010:	68a5      	ldr	r5, [r4, #8]
 800a012:	4415      	add	r5, r2
 800a014:	42ab      	cmp	r3, r5
 800a016:	f340 80f0 	ble.w	800a1fa <__sfvwrite_r+0x25a>
 800a01a:	4651      	mov	r1, sl
 800a01c:	462a      	mov	r2, r5
 800a01e:	f000 fc00 	bl	800a822 <memmove>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	4621      	mov	r1, r4
 800a026:	442b      	add	r3, r5
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	4640      	mov	r0, r8
 800a02c:	f7ff fe00 	bl	8009c30 <_fflush_r>
 800a030:	2800      	cmp	r0, #0
 800a032:	d165      	bne.n	800a100 <__sfvwrite_r+0x160>
 800a034:	1b7f      	subs	r7, r7, r5
 800a036:	f040 80fa 	bne.w	800a22e <__sfvwrite_r+0x28e>
 800a03a:	4621      	mov	r1, r4
 800a03c:	4640      	mov	r0, r8
 800a03e:	f7ff fdf7 	bl	8009c30 <_fflush_r>
 800a042:	2800      	cmp	r0, #0
 800a044:	d15c      	bne.n	800a100 <__sfvwrite_r+0x160>
 800a046:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a04a:	44aa      	add	sl, r5
 800a04c:	ebab 0b05 	sub.w	fp, fp, r5
 800a050:	1b5d      	subs	r5, r3, r5
 800a052:	f8c9 5008 	str.w	r5, [r9, #8]
 800a056:	2d00      	cmp	r5, #0
 800a058:	d1c0      	bne.n	8009fdc <__sfvwrite_r+0x3c>
 800a05a:	e7a8      	b.n	8009fae <__sfvwrite_r+0xe>
 800a05c:	4621      	mov	r1, r4
 800a05e:	4640      	mov	r0, r8
 800a060:	f7fe febe 	bl	8008de0 <__swsetup_r>
 800a064:	2800      	cmp	r0, #0
 800a066:	d0ac      	beq.n	8009fc2 <__sfvwrite_r+0x22>
 800a068:	f04f 30ff 	mov.w	r0, #4294967295
 800a06c:	e7a0      	b.n	8009fb0 <__sfvwrite_r+0x10>
 800a06e:	e9d6 a700 	ldrd	sl, r7, [r6]
 800a072:	3608      	adds	r6, #8
 800a074:	2f00      	cmp	r7, #0
 800a076:	d0fa      	beq.n	800a06e <__sfvwrite_r+0xce>
 800a078:	455f      	cmp	r7, fp
 800a07a:	463b      	mov	r3, r7
 800a07c:	4652      	mov	r2, sl
 800a07e:	bf28      	it	cs
 800a080:	465b      	movcs	r3, fp
 800a082:	69e1      	ldr	r1, [r4, #28]
 800a084:	4640      	mov	r0, r8
 800a086:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a088:	47a8      	blx	r5
 800a08a:	2800      	cmp	r0, #0
 800a08c:	dd38      	ble.n	800a100 <__sfvwrite_r+0x160>
 800a08e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a092:	4482      	add	sl, r0
 800a094:	1a3f      	subs	r7, r7, r0
 800a096:	1a18      	subs	r0, r3, r0
 800a098:	f8c9 0008 	str.w	r0, [r9, #8]
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d1e9      	bne.n	800a074 <__sfvwrite_r+0xd4>
 800a0a0:	e785      	b.n	8009fae <__sfvwrite_r+0xe>
 800a0a2:	f04f 0a00 	mov.w	sl, #0
 800a0a6:	f8df b190 	ldr.w	fp, [pc, #400]	; 800a238 <__sfvwrite_r+0x298>
 800a0aa:	4657      	mov	r7, sl
 800a0ac:	e7e2      	b.n	800a074 <__sfvwrite_r+0xd4>
 800a0ae:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800a0b2:	3608      	adds	r6, #8
 800a0b4:	f1ba 0f00 	cmp.w	sl, #0
 800a0b8:	d0f9      	beq.n	800a0ae <__sfvwrite_r+0x10e>
 800a0ba:	89a2      	ldrh	r2, [r4, #12]
 800a0bc:	68a3      	ldr	r3, [r4, #8]
 800a0be:	0591      	lsls	r1, r2, #22
 800a0c0:	6820      	ldr	r0, [r4, #0]
 800a0c2:	d564      	bpl.n	800a18e <__sfvwrite_r+0x1ee>
 800a0c4:	4553      	cmp	r3, sl
 800a0c6:	d836      	bhi.n	800a136 <__sfvwrite_r+0x196>
 800a0c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0cc:	d033      	beq.n	800a136 <__sfvwrite_r+0x196>
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	6967      	ldr	r7, [r4, #20]
 800a0d2:	6921      	ldr	r1, [r4, #16]
 800a0d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800a0d8:	fb97 f7f3 	sdiv	r7, r7, r3
 800a0dc:	eba0 0b01 	sub.w	fp, r0, r1
 800a0e0:	f10b 0301 	add.w	r3, fp, #1
 800a0e4:	4453      	add	r3, sl
 800a0e6:	429f      	cmp	r7, r3
 800a0e8:	bf38      	it	cc
 800a0ea:	461f      	movcc	r7, r3
 800a0ec:	0553      	lsls	r3, r2, #21
 800a0ee:	d53e      	bpl.n	800a16e <__sfvwrite_r+0x1ce>
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	f000 f946 	bl	800a384 <_malloc_r>
 800a0f8:	b948      	cbnz	r0, 800a10e <__sfvwrite_r+0x16e>
 800a0fa:	230c      	movs	r3, #12
 800a0fc:	f8c8 3000 	str.w	r3, [r8]
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	e7ae      	b.n	800a068 <__sfvwrite_r+0xc8>
 800a10a:	46aa      	mov	sl, r5
 800a10c:	e7d2      	b.n	800a0b4 <__sfvwrite_r+0x114>
 800a10e:	465a      	mov	r2, fp
 800a110:	6921      	ldr	r1, [r4, #16]
 800a112:	9001      	str	r0, [sp, #4]
 800a114:	f000 fb7a 	bl	800a80c <memcpy>
 800a118:	89a2      	ldrh	r2, [r4, #12]
 800a11a:	9b01      	ldr	r3, [sp, #4]
 800a11c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a120:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a124:	81a2      	strh	r2, [r4, #12]
 800a126:	6123      	str	r3, [r4, #16]
 800a128:	445b      	add	r3, fp
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	4653      	mov	r3, sl
 800a12e:	6167      	str	r7, [r4, #20]
 800a130:	eba7 070b 	sub.w	r7, r7, fp
 800a134:	60a7      	str	r7, [r4, #8]
 800a136:	4553      	cmp	r3, sl
 800a138:	bf28      	it	cs
 800a13a:	4653      	movcs	r3, sl
 800a13c:	4657      	mov	r7, sl
 800a13e:	461a      	mov	r2, r3
 800a140:	4629      	mov	r1, r5
 800a142:	6820      	ldr	r0, [r4, #0]
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	f000 fb6c 	bl	800a822 <memmove>
 800a14a:	68a2      	ldr	r2, [r4, #8]
 800a14c:	9b01      	ldr	r3, [sp, #4]
 800a14e:	1ad2      	subs	r2, r2, r3
 800a150:	60a2      	str	r2, [r4, #8]
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	4413      	add	r3, r2
 800a156:	6023      	str	r3, [r4, #0]
 800a158:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a15c:	443d      	add	r5, r7
 800a15e:	ebaa 0a07 	sub.w	sl, sl, r7
 800a162:	1bdf      	subs	r7, r3, r7
 800a164:	f8c9 7008 	str.w	r7, [r9, #8]
 800a168:	2f00      	cmp	r7, #0
 800a16a:	d1a3      	bne.n	800a0b4 <__sfvwrite_r+0x114>
 800a16c:	e71f      	b.n	8009fae <__sfvwrite_r+0xe>
 800a16e:	463a      	mov	r2, r7
 800a170:	4640      	mov	r0, r8
 800a172:	f000 fe2d 	bl	800add0 <_realloc_r>
 800a176:	4603      	mov	r3, r0
 800a178:	2800      	cmp	r0, #0
 800a17a:	d1d4      	bne.n	800a126 <__sfvwrite_r+0x186>
 800a17c:	6921      	ldr	r1, [r4, #16]
 800a17e:	4640      	mov	r0, r8
 800a180:	f7ff fe52 	bl	8009e28 <_free_r>
 800a184:	89a3      	ldrh	r3, [r4, #12]
 800a186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a18a:	81a3      	strh	r3, [r4, #12]
 800a18c:	e7b5      	b.n	800a0fa <__sfvwrite_r+0x15a>
 800a18e:	6922      	ldr	r2, [r4, #16]
 800a190:	4282      	cmp	r2, r0
 800a192:	d302      	bcc.n	800a19a <__sfvwrite_r+0x1fa>
 800a194:	6962      	ldr	r2, [r4, #20]
 800a196:	4552      	cmp	r2, sl
 800a198:	d916      	bls.n	800a1c8 <__sfvwrite_r+0x228>
 800a19a:	4553      	cmp	r3, sl
 800a19c:	bf28      	it	cs
 800a19e:	4653      	movcs	r3, sl
 800a1a0:	461f      	mov	r7, r3
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	f000 fb3c 	bl	800a822 <memmove>
 800a1aa:	68a3      	ldr	r3, [r4, #8]
 800a1ac:	6822      	ldr	r2, [r4, #0]
 800a1ae:	1bdb      	subs	r3, r3, r7
 800a1b0:	443a      	add	r2, r7
 800a1b2:	60a3      	str	r3, [r4, #8]
 800a1b4:	6022      	str	r2, [r4, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1ce      	bne.n	800a158 <__sfvwrite_r+0x1b8>
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4640      	mov	r0, r8
 800a1be:	f7ff fd37 	bl	8009c30 <_fflush_r>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d0c8      	beq.n	800a158 <__sfvwrite_r+0x1b8>
 800a1c6:	e79b      	b.n	800a100 <__sfvwrite_r+0x160>
 800a1c8:	4b1a      	ldr	r3, [pc, #104]	; (800a234 <__sfvwrite_r+0x294>)
 800a1ca:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800a1cc:	459a      	cmp	sl, r3
 800a1ce:	bf94      	ite	ls
 800a1d0:	4653      	movls	r3, sl
 800a1d2:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800a1d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1da:	69e1      	ldr	r1, [r4, #28]
 800a1dc:	4353      	muls	r3, r2
 800a1de:	4640      	mov	r0, r8
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	47b8      	blx	r7
 800a1e4:	1e07      	subs	r7, r0, #0
 800a1e6:	dcb7      	bgt.n	800a158 <__sfvwrite_r+0x1b8>
 800a1e8:	e78a      	b.n	800a100 <__sfvwrite_r+0x160>
 800a1ea:	e9d6 ab00 	ldrd	sl, fp, [r6]
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	3608      	adds	r6, #8
 800a1f2:	e6f3      	b.n	8009fdc <__sfvwrite_r+0x3c>
 800a1f4:	f10b 0701 	add.w	r7, fp, #1
 800a1f8:	e700      	b.n	8009ffc <__sfvwrite_r+0x5c>
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	dc09      	bgt.n	800a212 <__sfvwrite_r+0x272>
 800a1fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a200:	4613      	mov	r3, r2
 800a202:	69e1      	ldr	r1, [r4, #28]
 800a204:	4652      	mov	r2, sl
 800a206:	4640      	mov	r0, r8
 800a208:	47a8      	blx	r5
 800a20a:	1e05      	subs	r5, r0, #0
 800a20c:	f73f af12 	bgt.w	800a034 <__sfvwrite_r+0x94>
 800a210:	e776      	b.n	800a100 <__sfvwrite_r+0x160>
 800a212:	461a      	mov	r2, r3
 800a214:	4651      	mov	r1, sl
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	f000 fb03 	bl	800a822 <memmove>
 800a21c:	9b01      	ldr	r3, [sp, #4]
 800a21e:	68a2      	ldr	r2, [r4, #8]
 800a220:	461d      	mov	r5, r3
 800a222:	1ad2      	subs	r2, r2, r3
 800a224:	60a2      	str	r2, [r4, #8]
 800a226:	6822      	ldr	r2, [r4, #0]
 800a228:	441a      	add	r2, r3
 800a22a:	6022      	str	r2, [r4, #0]
 800a22c:	e702      	b.n	800a034 <__sfvwrite_r+0x94>
 800a22e:	2001      	movs	r0, #1
 800a230:	e709      	b.n	800a046 <__sfvwrite_r+0xa6>
 800a232:	bf00      	nop
 800a234:	7ffffffe 	.word	0x7ffffffe
 800a238:	7ffffc00 	.word	0x7ffffc00

0800a23c <_fwalk_reent>:
 800a23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a240:	4680      	mov	r8, r0
 800a242:	4689      	mov	r9, r1
 800a244:	2600      	movs	r6, #0
 800a246:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800a24a:	b914      	cbnz	r4, 800a252 <_fwalk_reent+0x16>
 800a24c:	4630      	mov	r0, r6
 800a24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a252:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a256:	3f01      	subs	r7, #1
 800a258:	d501      	bpl.n	800a25e <_fwalk_reent+0x22>
 800a25a:	6824      	ldr	r4, [r4, #0]
 800a25c:	e7f5      	b.n	800a24a <_fwalk_reent+0xe>
 800a25e:	89ab      	ldrh	r3, [r5, #12]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d907      	bls.n	800a274 <_fwalk_reent+0x38>
 800a264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a268:	3301      	adds	r3, #1
 800a26a:	d003      	beq.n	800a274 <_fwalk_reent+0x38>
 800a26c:	4629      	mov	r1, r5
 800a26e:	4640      	mov	r0, r8
 800a270:	47c8      	blx	r9
 800a272:	4306      	orrs	r6, r0
 800a274:	3568      	adds	r5, #104	; 0x68
 800a276:	e7ee      	b.n	800a256 <_fwalk_reent+0x1a>

0800a278 <_localeconv_r>:
 800a278:	4b04      	ldr	r3, [pc, #16]	; (800a28c <_localeconv_r+0x14>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a27e:	4b04      	ldr	r3, [pc, #16]	; (800a290 <_localeconv_r+0x18>)
 800a280:	2800      	cmp	r0, #0
 800a282:	bf08      	it	eq
 800a284:	4618      	moveq	r0, r3
 800a286:	30f0      	adds	r0, #240	; 0xf0
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000044 	.word	0x20000044
 800a290:	20000884 	.word	0x20000884

0800a294 <__retarget_lock_init_recursive>:
 800a294:	4770      	bx	lr

0800a296 <__retarget_lock_close_recursive>:
 800a296:	4770      	bx	lr

0800a298 <__retarget_lock_acquire_recursive>:
 800a298:	4770      	bx	lr

0800a29a <__retarget_lock_release_recursive>:
 800a29a:	4770      	bx	lr

0800a29c <__swhatbuf_r>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	460e      	mov	r6, r1
 800a2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a4:	b096      	sub	sp, #88	; 0x58
 800a2a6:	2900      	cmp	r1, #0
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	461d      	mov	r5, r3
 800a2ac:	da09      	bge.n	800a2c2 <__swhatbuf_r+0x26>
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	89b3      	ldrh	r3, [r6, #12]
 800a2b2:	602a      	str	r2, [r5, #0]
 800a2b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a2b8:	d116      	bne.n	800a2e8 <__swhatbuf_r+0x4c>
 800a2ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2be:	6023      	str	r3, [r4, #0]
 800a2c0:	e015      	b.n	800a2ee <__swhatbuf_r+0x52>
 800a2c2:	466a      	mov	r2, sp
 800a2c4:	f001 f9ea 	bl	800b69c <_fstat_r>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	dbf0      	blt.n	800a2ae <__swhatbuf_r+0x12>
 800a2cc:	9a01      	ldr	r2, [sp, #4]
 800a2ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a2d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a2d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a2da:	425a      	negs	r2, r3
 800a2dc:	415a      	adcs	r2, r3
 800a2de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2e2:	602a      	str	r2, [r5, #0]
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	e002      	b.n	800a2ee <__swhatbuf_r+0x52>
 800a2e8:	2340      	movs	r3, #64	; 0x40
 800a2ea:	4610      	mov	r0, r2
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	b016      	add	sp, #88	; 0x58
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2f4 <__smakebuf_r>:
 800a2f4:	898b      	ldrh	r3, [r1, #12]
 800a2f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2f8:	079d      	lsls	r5, r3, #30
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	460c      	mov	r4, r1
 800a2fe:	d507      	bpl.n	800a310 <__smakebuf_r+0x1c>
 800a300:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	6123      	str	r3, [r4, #16]
 800a308:	2301      	movs	r3, #1
 800a30a:	6163      	str	r3, [r4, #20]
 800a30c:	b002      	add	sp, #8
 800a30e:	bd70      	pop	{r4, r5, r6, pc}
 800a310:	ab01      	add	r3, sp, #4
 800a312:	466a      	mov	r2, sp
 800a314:	f7ff ffc2 	bl	800a29c <__swhatbuf_r>
 800a318:	9900      	ldr	r1, [sp, #0]
 800a31a:	4605      	mov	r5, r0
 800a31c:	4630      	mov	r0, r6
 800a31e:	f000 f831 	bl	800a384 <_malloc_r>
 800a322:	b948      	cbnz	r0, 800a338 <__smakebuf_r+0x44>
 800a324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a328:	059a      	lsls	r2, r3, #22
 800a32a:	d4ef      	bmi.n	800a30c <__smakebuf_r+0x18>
 800a32c:	f023 0303 	bic.w	r3, r3, #3
 800a330:	f043 0302 	orr.w	r3, r3, #2
 800a334:	81a3      	strh	r3, [r4, #12]
 800a336:	e7e3      	b.n	800a300 <__smakebuf_r+0xc>
 800a338:	4b0d      	ldr	r3, [pc, #52]	; (800a370 <__smakebuf_r+0x7c>)
 800a33a:	63f3      	str	r3, [r6, #60]	; 0x3c
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	6020      	str	r0, [r4, #0]
 800a340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	9b00      	ldr	r3, [sp, #0]
 800a348:	6120      	str	r0, [r4, #16]
 800a34a:	6163      	str	r3, [r4, #20]
 800a34c:	9b01      	ldr	r3, [sp, #4]
 800a34e:	b15b      	cbz	r3, 800a368 <__smakebuf_r+0x74>
 800a350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a354:	4630      	mov	r0, r6
 800a356:	f001 f9b3 	bl	800b6c0 <_isatty_r>
 800a35a:	b128      	cbz	r0, 800a368 <__smakebuf_r+0x74>
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	f023 0303 	bic.w	r3, r3, #3
 800a362:	f043 0301 	orr.w	r3, r3, #1
 800a366:	81a3      	strh	r3, [r4, #12]
 800a368:	89a3      	ldrh	r3, [r4, #12]
 800a36a:	431d      	orrs	r5, r3
 800a36c:	81a5      	strh	r5, [r4, #12]
 800a36e:	e7cd      	b.n	800a30c <__smakebuf_r+0x18>
 800a370:	08009ccd 	.word	0x08009ccd

0800a374 <malloc>:
 800a374:	4b02      	ldr	r3, [pc, #8]	; (800a380 <malloc+0xc>)
 800a376:	4601      	mov	r1, r0
 800a378:	6818      	ldr	r0, [r3, #0]
 800a37a:	f000 b803 	b.w	800a384 <_malloc_r>
 800a37e:	bf00      	nop
 800a380:	20000044 	.word	0x20000044

0800a384 <_malloc_r>:
 800a384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a388:	f101 050b 	add.w	r5, r1, #11
 800a38c:	2d16      	cmp	r5, #22
 800a38e:	4606      	mov	r6, r0
 800a390:	d906      	bls.n	800a3a0 <_malloc_r+0x1c>
 800a392:	f035 0507 	bics.w	r5, r5, #7
 800a396:	d504      	bpl.n	800a3a2 <_malloc_r+0x1e>
 800a398:	230c      	movs	r3, #12
 800a39a:	6033      	str	r3, [r6, #0]
 800a39c:	2400      	movs	r4, #0
 800a39e:	e1a8      	b.n	800a6f2 <_malloc_r+0x36e>
 800a3a0:	2510      	movs	r5, #16
 800a3a2:	428d      	cmp	r5, r1
 800a3a4:	d3f8      	bcc.n	800a398 <_malloc_r+0x14>
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f000 fa54 	bl	800a854 <__malloc_lock>
 800a3ac:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800a3b0:	4fc0      	ldr	r7, [pc, #768]	; (800a6b4 <_malloc_r+0x330>)
 800a3b2:	d238      	bcs.n	800a426 <_malloc_r+0xa2>
 800a3b4:	f105 0208 	add.w	r2, r5, #8
 800a3b8:	443a      	add	r2, r7
 800a3ba:	6854      	ldr	r4, [r2, #4]
 800a3bc:	f1a2 0108 	sub.w	r1, r2, #8
 800a3c0:	428c      	cmp	r4, r1
 800a3c2:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800a3c6:	d102      	bne.n	800a3ce <_malloc_r+0x4a>
 800a3c8:	68d4      	ldr	r4, [r2, #12]
 800a3ca:	42a2      	cmp	r2, r4
 800a3cc:	d010      	beq.n	800a3f0 <_malloc_r+0x6c>
 800a3ce:	6863      	ldr	r3, [r4, #4]
 800a3d0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a3d4:	f023 0303 	bic.w	r3, r3, #3
 800a3d8:	60ca      	str	r2, [r1, #12]
 800a3da:	4423      	add	r3, r4
 800a3dc:	6091      	str	r1, [r2, #8]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	f042 0201 	orr.w	r2, r2, #1
 800a3e4:	605a      	str	r2, [r3, #4]
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	f000 fa3a 	bl	800a860 <__malloc_unlock>
 800a3ec:	3408      	adds	r4, #8
 800a3ee:	e180      	b.n	800a6f2 <_malloc_r+0x36e>
 800a3f0:	3302      	adds	r3, #2
 800a3f2:	4ab1      	ldr	r2, [pc, #708]	; (800a6b8 <_malloc_r+0x334>)
 800a3f4:	693c      	ldr	r4, [r7, #16]
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	4294      	cmp	r4, r2
 800a3fa:	d075      	beq.n	800a4e8 <_malloc_r+0x164>
 800a3fc:	6860      	ldr	r0, [r4, #4]
 800a3fe:	f020 0c03 	bic.w	ip, r0, #3
 800a402:	ebac 0005 	sub.w	r0, ip, r5
 800a406:	280f      	cmp	r0, #15
 800a408:	dd48      	ble.n	800a49c <_malloc_r+0x118>
 800a40a:	1963      	adds	r3, r4, r5
 800a40c:	f045 0501 	orr.w	r5, r5, #1
 800a410:	6065      	str	r5, [r4, #4]
 800a412:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800a416:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800a41a:	f040 0201 	orr.w	r2, r0, #1
 800a41e:	605a      	str	r2, [r3, #4]
 800a420:	f844 000c 	str.w	r0, [r4, ip]
 800a424:	e7df      	b.n	800a3e6 <_malloc_r+0x62>
 800a426:	0a6b      	lsrs	r3, r5, #9
 800a428:	d02a      	beq.n	800a480 <_malloc_r+0xfc>
 800a42a:	2b04      	cmp	r3, #4
 800a42c:	d812      	bhi.n	800a454 <_malloc_r+0xd0>
 800a42e:	09ab      	lsrs	r3, r5, #6
 800a430:	3338      	adds	r3, #56	; 0x38
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800a438:	6854      	ldr	r4, [r2, #4]
 800a43a:	f1a2 0c08 	sub.w	ip, r2, #8
 800a43e:	4564      	cmp	r4, ip
 800a440:	d006      	beq.n	800a450 <_malloc_r+0xcc>
 800a442:	6862      	ldr	r2, [r4, #4]
 800a444:	f022 0203 	bic.w	r2, r2, #3
 800a448:	1b50      	subs	r0, r2, r5
 800a44a:	280f      	cmp	r0, #15
 800a44c:	dd1c      	ble.n	800a488 <_malloc_r+0x104>
 800a44e:	3b01      	subs	r3, #1
 800a450:	3301      	adds	r3, #1
 800a452:	e7ce      	b.n	800a3f2 <_malloc_r+0x6e>
 800a454:	2b14      	cmp	r3, #20
 800a456:	d801      	bhi.n	800a45c <_malloc_r+0xd8>
 800a458:	335b      	adds	r3, #91	; 0x5b
 800a45a:	e7ea      	b.n	800a432 <_malloc_r+0xae>
 800a45c:	2b54      	cmp	r3, #84	; 0x54
 800a45e:	d802      	bhi.n	800a466 <_malloc_r+0xe2>
 800a460:	0b2b      	lsrs	r3, r5, #12
 800a462:	336e      	adds	r3, #110	; 0x6e
 800a464:	e7e5      	b.n	800a432 <_malloc_r+0xae>
 800a466:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a46a:	d802      	bhi.n	800a472 <_malloc_r+0xee>
 800a46c:	0beb      	lsrs	r3, r5, #15
 800a46e:	3377      	adds	r3, #119	; 0x77
 800a470:	e7df      	b.n	800a432 <_malloc_r+0xae>
 800a472:	f240 5254 	movw	r2, #1364	; 0x554
 800a476:	4293      	cmp	r3, r2
 800a478:	d804      	bhi.n	800a484 <_malloc_r+0x100>
 800a47a:	0cab      	lsrs	r3, r5, #18
 800a47c:	337c      	adds	r3, #124	; 0x7c
 800a47e:	e7d8      	b.n	800a432 <_malloc_r+0xae>
 800a480:	233f      	movs	r3, #63	; 0x3f
 800a482:	e7d6      	b.n	800a432 <_malloc_r+0xae>
 800a484:	237e      	movs	r3, #126	; 0x7e
 800a486:	e7d4      	b.n	800a432 <_malloc_r+0xae>
 800a488:	2800      	cmp	r0, #0
 800a48a:	68e1      	ldr	r1, [r4, #12]
 800a48c:	db04      	blt.n	800a498 <_malloc_r+0x114>
 800a48e:	68a3      	ldr	r3, [r4, #8]
 800a490:	60d9      	str	r1, [r3, #12]
 800a492:	608b      	str	r3, [r1, #8]
 800a494:	18a3      	adds	r3, r4, r2
 800a496:	e7a2      	b.n	800a3de <_malloc_r+0x5a>
 800a498:	460c      	mov	r4, r1
 800a49a:	e7d0      	b.n	800a43e <_malloc_r+0xba>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800a4a2:	db07      	blt.n	800a4b4 <_malloc_r+0x130>
 800a4a4:	44a4      	add	ip, r4
 800a4a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a4aa:	f043 0301 	orr.w	r3, r3, #1
 800a4ae:	f8cc 3004 	str.w	r3, [ip, #4]
 800a4b2:	e798      	b.n	800a3e6 <_malloc_r+0x62>
 800a4b4:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f080 8099 	bcs.w	800a5f0 <_malloc_r+0x26c>
 800a4be:	2201      	movs	r2, #1
 800a4c0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800a4c4:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800a4c8:	fa02 f20e 	lsl.w	r2, r2, lr
 800a4cc:	4310      	orrs	r0, r2
 800a4ce:	f10c 0c01 	add.w	ip, ip, #1
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800a4d8:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800a4dc:	3a08      	subs	r2, #8
 800a4de:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800a4e2:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800a4e6:	60c4      	str	r4, [r0, #12]
 800a4e8:	2001      	movs	r0, #1
 800a4ea:	109a      	asrs	r2, r3, #2
 800a4ec:	fa00 f202 	lsl.w	r2, r0, r2
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	4290      	cmp	r0, r2
 800a4f4:	d326      	bcc.n	800a544 <_malloc_r+0x1c0>
 800a4f6:	4210      	tst	r0, r2
 800a4f8:	d106      	bne.n	800a508 <_malloc_r+0x184>
 800a4fa:	f023 0303 	bic.w	r3, r3, #3
 800a4fe:	0052      	lsls	r2, r2, #1
 800a500:	4210      	tst	r0, r2
 800a502:	f103 0304 	add.w	r3, r3, #4
 800a506:	d0fa      	beq.n	800a4fe <_malloc_r+0x17a>
 800a508:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800a50c:	46e1      	mov	r9, ip
 800a50e:	4698      	mov	r8, r3
 800a510:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a514:	454c      	cmp	r4, r9
 800a516:	f040 80af 	bne.w	800a678 <_malloc_r+0x2f4>
 800a51a:	f108 0801 	add.w	r8, r8, #1
 800a51e:	f018 0f03 	tst.w	r8, #3
 800a522:	f109 0908 	add.w	r9, r9, #8
 800a526:	d1f3      	bne.n	800a510 <_malloc_r+0x18c>
 800a528:	0798      	lsls	r0, r3, #30
 800a52a:	f040 80e8 	bne.w	800a6fe <_malloc_r+0x37a>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	ea23 0302 	bic.w	r3, r3, r2
 800a534:	607b      	str	r3, [r7, #4]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	0052      	lsls	r2, r2, #1
 800a53a:	4290      	cmp	r0, r2
 800a53c:	d302      	bcc.n	800a544 <_malloc_r+0x1c0>
 800a53e:	2a00      	cmp	r2, #0
 800a540:	f040 80eb 	bne.w	800a71a <_malloc_r+0x396>
 800a544:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800a548:	f8da 4004 	ldr.w	r4, [sl, #4]
 800a54c:	f024 0203 	bic.w	r2, r4, #3
 800a550:	42aa      	cmp	r2, r5
 800a552:	d303      	bcc.n	800a55c <_malloc_r+0x1d8>
 800a554:	1b53      	subs	r3, r2, r5
 800a556:	2b0f      	cmp	r3, #15
 800a558:	f300 813f 	bgt.w	800a7da <_malloc_r+0x456>
 800a55c:	4b57      	ldr	r3, [pc, #348]	; (800a6bc <_malloc_r+0x338>)
 800a55e:	2008      	movs	r0, #8
 800a560:	681c      	ldr	r4, [r3, #0]
 800a562:	9200      	str	r2, [sp, #0]
 800a564:	f000 fef2 	bl	800b34c <sysconf>
 800a568:	4b55      	ldr	r3, [pc, #340]	; (800a6c0 <_malloc_r+0x33c>)
 800a56a:	3410      	adds	r4, #16
 800a56c:	6819      	ldr	r1, [r3, #0]
 800a56e:	442c      	add	r4, r5
 800a570:	3101      	adds	r1, #1
 800a572:	bf1f      	itttt	ne
 800a574:	f104 34ff 	addne.w	r4, r4, #4294967295
 800a578:	1824      	addne	r4, r4, r0
 800a57a:	4241      	negne	r1, r0
 800a57c:	400c      	andne	r4, r1
 800a57e:	9a00      	ldr	r2, [sp, #0]
 800a580:	4680      	mov	r8, r0
 800a582:	4621      	mov	r1, r4
 800a584:	4630      	mov	r0, r6
 800a586:	e9cd 2300 	strd	r2, r3, [sp]
 800a58a:	f000 fdff 	bl	800b18c <_sbrk_r>
 800a58e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a592:	4683      	mov	fp, r0
 800a594:	f000 80fa 	beq.w	800a78c <_malloc_r+0x408>
 800a598:	9a00      	ldr	r2, [sp, #0]
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	eb0a 0102 	add.w	r1, sl, r2
 800a5a0:	4281      	cmp	r1, r0
 800a5a2:	d902      	bls.n	800a5aa <_malloc_r+0x226>
 800a5a4:	45ba      	cmp	sl, r7
 800a5a6:	f040 80f1 	bne.w	800a78c <_malloc_r+0x408>
 800a5aa:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800a6cc <_malloc_r+0x348>
 800a5ae:	4559      	cmp	r1, fp
 800a5b0:	f8d9 0000 	ldr.w	r0, [r9]
 800a5b4:	f108 3cff 	add.w	ip, r8, #4294967295
 800a5b8:	eb00 0e04 	add.w	lr, r0, r4
 800a5bc:	f8c9 e000 	str.w	lr, [r9]
 800a5c0:	f040 80ad 	bne.w	800a71e <_malloc_r+0x39a>
 800a5c4:	ea11 0f0c 	tst.w	r1, ip
 800a5c8:	f040 80a9 	bne.w	800a71e <_malloc_r+0x39a>
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	4414      	add	r4, r2
 800a5d0:	f044 0401 	orr.w	r4, r4, #1
 800a5d4:	605c      	str	r4, [r3, #4]
 800a5d6:	4a3b      	ldr	r2, [pc, #236]	; (800a6c4 <_malloc_r+0x340>)
 800a5d8:	f8d9 3000 	ldr.w	r3, [r9]
 800a5dc:	6811      	ldr	r1, [r2, #0]
 800a5de:	428b      	cmp	r3, r1
 800a5e0:	bf88      	it	hi
 800a5e2:	6013      	strhi	r3, [r2, #0]
 800a5e4:	4a38      	ldr	r2, [pc, #224]	; (800a6c8 <_malloc_r+0x344>)
 800a5e6:	6811      	ldr	r1, [r2, #0]
 800a5e8:	428b      	cmp	r3, r1
 800a5ea:	bf88      	it	hi
 800a5ec:	6013      	strhi	r3, [r2, #0]
 800a5ee:	e0cd      	b.n	800a78c <_malloc_r+0x408>
 800a5f0:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800a5f4:	2a04      	cmp	r2, #4
 800a5f6:	d818      	bhi.n	800a62a <_malloc_r+0x2a6>
 800a5f8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800a5fc:	3238      	adds	r2, #56	; 0x38
 800a5fe:	f102 0e01 	add.w	lr, r2, #1
 800a602:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 800a606:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800a60a:	45f0      	cmp	r8, lr
 800a60c:	d12b      	bne.n	800a666 <_malloc_r+0x2e2>
 800a60e:	f04f 0c01 	mov.w	ip, #1
 800a612:	1092      	asrs	r2, r2, #2
 800a614:	fa0c f202 	lsl.w	r2, ip, r2
 800a618:	4310      	orrs	r0, r2
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800a620:	f8c8 4008 	str.w	r4, [r8, #8]
 800a624:	f8ce 400c 	str.w	r4, [lr, #12]
 800a628:	e75e      	b.n	800a4e8 <_malloc_r+0x164>
 800a62a:	2a14      	cmp	r2, #20
 800a62c:	d801      	bhi.n	800a632 <_malloc_r+0x2ae>
 800a62e:	325b      	adds	r2, #91	; 0x5b
 800a630:	e7e5      	b.n	800a5fe <_malloc_r+0x27a>
 800a632:	2a54      	cmp	r2, #84	; 0x54
 800a634:	d803      	bhi.n	800a63e <_malloc_r+0x2ba>
 800a636:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800a63a:	326e      	adds	r2, #110	; 0x6e
 800a63c:	e7df      	b.n	800a5fe <_malloc_r+0x27a>
 800a63e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a642:	d803      	bhi.n	800a64c <_malloc_r+0x2c8>
 800a644:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800a648:	3277      	adds	r2, #119	; 0x77
 800a64a:	e7d8      	b.n	800a5fe <_malloc_r+0x27a>
 800a64c:	f240 5e54 	movw	lr, #1364	; 0x554
 800a650:	4572      	cmp	r2, lr
 800a652:	bf9a      	itte	ls
 800a654:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800a658:	327c      	addls	r2, #124	; 0x7c
 800a65a:	227e      	movhi	r2, #126	; 0x7e
 800a65c:	e7cf      	b.n	800a5fe <_malloc_r+0x27a>
 800a65e:	f8de e008 	ldr.w	lr, [lr, #8]
 800a662:	45f0      	cmp	r8, lr
 800a664:	d005      	beq.n	800a672 <_malloc_r+0x2ee>
 800a666:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a66a:	f022 0203 	bic.w	r2, r2, #3
 800a66e:	4562      	cmp	r2, ip
 800a670:	d8f5      	bhi.n	800a65e <_malloc_r+0x2da>
 800a672:	f8de 800c 	ldr.w	r8, [lr, #12]
 800a676:	e7d1      	b.n	800a61c <_malloc_r+0x298>
 800a678:	6860      	ldr	r0, [r4, #4]
 800a67a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800a67e:	f020 0003 	bic.w	r0, r0, #3
 800a682:	eba0 0a05 	sub.w	sl, r0, r5
 800a686:	f1ba 0f0f 	cmp.w	sl, #15
 800a68a:	dd21      	ble.n	800a6d0 <_malloc_r+0x34c>
 800a68c:	68a2      	ldr	r2, [r4, #8]
 800a68e:	1963      	adds	r3, r4, r5
 800a690:	f045 0501 	orr.w	r5, r5, #1
 800a694:	6065      	str	r5, [r4, #4]
 800a696:	f8c2 e00c 	str.w	lr, [r2, #12]
 800a69a:	f8ce 2008 	str.w	r2, [lr, #8]
 800a69e:	f04a 0201 	orr.w	r2, sl, #1
 800a6a2:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800a6a6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a6aa:	605a      	str	r2, [r3, #4]
 800a6ac:	f844 a000 	str.w	sl, [r4, r0]
 800a6b0:	e699      	b.n	800a3e6 <_malloc_r+0x62>
 800a6b2:	bf00      	nop
 800a6b4:	20000474 	.word	0x20000474
 800a6b8:	2000047c 	.word	0x2000047c
 800a6bc:	20000a5c 	.word	0x20000a5c
 800a6c0:	2000087c 	.word	0x2000087c
 800a6c4:	20000a54 	.word	0x20000a54
 800a6c8:	20000a58 	.word	0x20000a58
 800a6cc:	20000a2c 	.word	0x20000a2c
 800a6d0:	f1ba 0f00 	cmp.w	sl, #0
 800a6d4:	db11      	blt.n	800a6fa <_malloc_r+0x376>
 800a6d6:	4420      	add	r0, r4
 800a6d8:	6843      	ldr	r3, [r0, #4]
 800a6da:	f043 0301 	orr.w	r3, r3, #1
 800a6de:	6043      	str	r3, [r0, #4]
 800a6e0:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f8c3 e00c 	str.w	lr, [r3, #12]
 800a6ea:	f8ce 3008 	str.w	r3, [lr, #8]
 800a6ee:	f000 f8b7 	bl	800a860 <__malloc_unlock>
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	b003      	add	sp, #12
 800a6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fa:	4674      	mov	r4, lr
 800a6fc:	e70a      	b.n	800a514 <_malloc_r+0x190>
 800a6fe:	f1ac 0008 	sub.w	r0, ip, #8
 800a702:	f8dc c000 	ldr.w	ip, [ip]
 800a706:	3b01      	subs	r3, #1
 800a708:	4584      	cmp	ip, r0
 800a70a:	f43f af0d 	beq.w	800a528 <_malloc_r+0x1a4>
 800a70e:	e712      	b.n	800a536 <_malloc_r+0x1b2>
 800a710:	3304      	adds	r3, #4
 800a712:	0052      	lsls	r2, r2, #1
 800a714:	4210      	tst	r0, r2
 800a716:	d0fb      	beq.n	800a710 <_malloc_r+0x38c>
 800a718:	e6f6      	b.n	800a508 <_malloc_r+0x184>
 800a71a:	4643      	mov	r3, r8
 800a71c:	e7fa      	b.n	800a714 <_malloc_r+0x390>
 800a71e:	6818      	ldr	r0, [r3, #0]
 800a720:	9200      	str	r2, [sp, #0]
 800a722:	3001      	adds	r0, #1
 800a724:	bf1b      	ittet	ne
 800a726:	ebab 0101 	subne.w	r1, fp, r1
 800a72a:	4471      	addne	r1, lr
 800a72c:	f8c3 b000 	streq.w	fp, [r3]
 800a730:	f8c9 1000 	strne.w	r1, [r9]
 800a734:	f01b 0307 	ands.w	r3, fp, #7
 800a738:	bf1c      	itt	ne
 800a73a:	f1c3 0308 	rsbne	r3, r3, #8
 800a73e:	449b      	addne	fp, r3
 800a740:	445c      	add	r4, fp
 800a742:	4498      	add	r8, r3
 800a744:	ea04 030c 	and.w	r3, r4, ip
 800a748:	eba8 0803 	sub.w	r8, r8, r3
 800a74c:	4641      	mov	r1, r8
 800a74e:	4630      	mov	r0, r6
 800a750:	f000 fd1c 	bl	800b18c <_sbrk_r>
 800a754:	1c43      	adds	r3, r0, #1
 800a756:	bf04      	itt	eq
 800a758:	4658      	moveq	r0, fp
 800a75a:	f04f 0800 	moveq.w	r8, #0
 800a75e:	f8d9 3000 	ldr.w	r3, [r9]
 800a762:	eba0 000b 	sub.w	r0, r0, fp
 800a766:	4440      	add	r0, r8
 800a768:	4443      	add	r3, r8
 800a76a:	f040 0001 	orr.w	r0, r0, #1
 800a76e:	45ba      	cmp	sl, r7
 800a770:	f8c7 b008 	str.w	fp, [r7, #8]
 800a774:	9a00      	ldr	r2, [sp, #0]
 800a776:	f8c9 3000 	str.w	r3, [r9]
 800a77a:	f8cb 0004 	str.w	r0, [fp, #4]
 800a77e:	f43f af2a 	beq.w	800a5d6 <_malloc_r+0x252>
 800a782:	2a0f      	cmp	r2, #15
 800a784:	d810      	bhi.n	800a7a8 <_malloc_r+0x424>
 800a786:	2301      	movs	r3, #1
 800a788:	f8cb 3004 	str.w	r3, [fp, #4]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	685a      	ldr	r2, [r3, #4]
 800a790:	f022 0203 	bic.w	r2, r2, #3
 800a794:	42aa      	cmp	r2, r5
 800a796:	eba2 0305 	sub.w	r3, r2, r5
 800a79a:	d301      	bcc.n	800a7a0 <_malloc_r+0x41c>
 800a79c:	2b0f      	cmp	r3, #15
 800a79e:	dc1c      	bgt.n	800a7da <_malloc_r+0x456>
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f000 f85d 	bl	800a860 <__malloc_unlock>
 800a7a6:	e5f9      	b.n	800a39c <_malloc_r+0x18>
 800a7a8:	f1a2 040c 	sub.w	r4, r2, #12
 800a7ac:	2205      	movs	r2, #5
 800a7ae:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a7b2:	f024 0407 	bic.w	r4, r4, #7
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	4323      	orrs	r3, r4
 800a7bc:	f8ca 3004 	str.w	r3, [sl, #4]
 800a7c0:	2c0f      	cmp	r4, #15
 800a7c2:	eb0a 0304 	add.w	r3, sl, r4
 800a7c6:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800a7ca:	f67f af04 	bls.w	800a5d6 <_malloc_r+0x252>
 800a7ce:	f10a 0108 	add.w	r1, sl, #8
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f7ff fb28 	bl	8009e28 <_free_r>
 800a7d8:	e6fd      	b.n	800a5d6 <_malloc_r+0x252>
 800a7da:	68bc      	ldr	r4, [r7, #8]
 800a7dc:	f045 0201 	orr.w	r2, r5, #1
 800a7e0:	f043 0301 	orr.w	r3, r3, #1
 800a7e4:	4425      	add	r5, r4
 800a7e6:	6062      	str	r2, [r4, #4]
 800a7e8:	60bd      	str	r5, [r7, #8]
 800a7ea:	606b      	str	r3, [r5, #4]
 800a7ec:	e5fb      	b.n	800a3e6 <_malloc_r+0x62>
 800a7ee:	bf00      	nop

0800a7f0 <memchr>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	b2c9      	uxtb	r1, r1
 800a7f4:	4402      	add	r2, r0
 800a7f6:	4290      	cmp	r0, r2
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	d101      	bne.n	800a800 <memchr+0x10>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	e003      	b.n	800a808 <memchr+0x18>
 800a800:	781c      	ldrb	r4, [r3, #0]
 800a802:	3001      	adds	r0, #1
 800a804:	428c      	cmp	r4, r1
 800a806:	d1f6      	bne.n	800a7f6 <memchr+0x6>
 800a808:	4618      	mov	r0, r3
 800a80a:	bd10      	pop	{r4, pc}

0800a80c <memcpy>:
 800a80c:	b510      	push	{r4, lr}
 800a80e:	1e43      	subs	r3, r0, #1
 800a810:	440a      	add	r2, r1
 800a812:	4291      	cmp	r1, r2
 800a814:	d100      	bne.n	800a818 <memcpy+0xc>
 800a816:	bd10      	pop	{r4, pc}
 800a818:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a81c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a820:	e7f7      	b.n	800a812 <memcpy+0x6>

0800a822 <memmove>:
 800a822:	4288      	cmp	r0, r1
 800a824:	b510      	push	{r4, lr}
 800a826:	eb01 0302 	add.w	r3, r1, r2
 800a82a:	d807      	bhi.n	800a83c <memmove+0x1a>
 800a82c:	1e42      	subs	r2, r0, #1
 800a82e:	4299      	cmp	r1, r3
 800a830:	d00a      	beq.n	800a848 <memmove+0x26>
 800a832:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a836:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a83a:	e7f8      	b.n	800a82e <memmove+0xc>
 800a83c:	4283      	cmp	r3, r0
 800a83e:	d9f5      	bls.n	800a82c <memmove+0xa>
 800a840:	1881      	adds	r1, r0, r2
 800a842:	1ad2      	subs	r2, r2, r3
 800a844:	42d3      	cmn	r3, r2
 800a846:	d100      	bne.n	800a84a <memmove+0x28>
 800a848:	bd10      	pop	{r4, pc}
 800a84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a84e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a852:	e7f7      	b.n	800a844 <memmove+0x22>

0800a854 <__malloc_lock>:
 800a854:	4801      	ldr	r0, [pc, #4]	; (800a85c <__malloc_lock+0x8>)
 800a856:	f7ff bd1f 	b.w	800a298 <__retarget_lock_acquire_recursive>
 800a85a:	bf00      	nop
 800a85c:	200010c8 	.word	0x200010c8

0800a860 <__malloc_unlock>:
 800a860:	4801      	ldr	r0, [pc, #4]	; (800a868 <__malloc_unlock+0x8>)
 800a862:	f7ff bd1a 	b.w	800a29a <__retarget_lock_release_recursive>
 800a866:	bf00      	nop
 800a868:	200010c8 	.word	0x200010c8

0800a86c <_Balloc>:
 800a86c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a86e:	b570      	push	{r4, r5, r6, lr}
 800a870:	4605      	mov	r5, r0
 800a872:	460c      	mov	r4, r1
 800a874:	b17b      	cbz	r3, 800a896 <_Balloc+0x2a>
 800a876:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800a878:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a87c:	b9a0      	cbnz	r0, 800a8a8 <_Balloc+0x3c>
 800a87e:	2101      	movs	r1, #1
 800a880:	fa01 f604 	lsl.w	r6, r1, r4
 800a884:	1d72      	adds	r2, r6, #5
 800a886:	0092      	lsls	r2, r2, #2
 800a888:	4628      	mov	r0, r5
 800a88a:	f000 fe07 	bl	800b49c <_calloc_r>
 800a88e:	b148      	cbz	r0, 800a8a4 <_Balloc+0x38>
 800a890:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800a894:	e00b      	b.n	800a8ae <_Balloc+0x42>
 800a896:	2221      	movs	r2, #33	; 0x21
 800a898:	2104      	movs	r1, #4
 800a89a:	f000 fdff 	bl	800b49c <_calloc_r>
 800a89e:	64e8      	str	r0, [r5, #76]	; 0x4c
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d1e8      	bne.n	800a876 <_Balloc+0xa>
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}
 800a8a8:	6802      	ldr	r2, [r0, #0]
 800a8aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8b4:	e7f7      	b.n	800a8a6 <_Balloc+0x3a>

0800a8b6 <_Bfree>:
 800a8b6:	b131      	cbz	r1, 800a8c6 <_Bfree+0x10>
 800a8b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a8ba:	684a      	ldr	r2, [r1, #4]
 800a8bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a8c0:	6008      	str	r0, [r1, #0]
 800a8c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a8c6:	4770      	bx	lr

0800a8c8 <__multadd>:
 800a8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8cc:	461f      	mov	r7, r3
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	690d      	ldr	r5, [r1, #16]
 800a8d6:	f101 0c14 	add.w	ip, r1, #20
 800a8da:	f8dc 0000 	ldr.w	r0, [ip]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	b281      	uxth	r1, r0
 800a8e2:	fb02 7101 	mla	r1, r2, r1, r7
 800a8e6:	0c00      	lsrs	r0, r0, #16
 800a8e8:	0c0f      	lsrs	r7, r1, #16
 800a8ea:	fb02 7000 	mla	r0, r2, r0, r7
 800a8ee:	b289      	uxth	r1, r1
 800a8f0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a8f4:	429d      	cmp	r5, r3
 800a8f6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a8fa:	f84c 1b04 	str.w	r1, [ip], #4
 800a8fe:	dcec      	bgt.n	800a8da <__multadd+0x12>
 800a900:	b1d7      	cbz	r7, 800a938 <__multadd+0x70>
 800a902:	68a3      	ldr	r3, [r4, #8]
 800a904:	42ab      	cmp	r3, r5
 800a906:	dc12      	bgt.n	800a92e <__multadd+0x66>
 800a908:	6861      	ldr	r1, [r4, #4]
 800a90a:	4630      	mov	r0, r6
 800a90c:	3101      	adds	r1, #1
 800a90e:	f7ff ffad 	bl	800a86c <_Balloc>
 800a912:	4680      	mov	r8, r0
 800a914:	6922      	ldr	r2, [r4, #16]
 800a916:	f104 010c 	add.w	r1, r4, #12
 800a91a:	3202      	adds	r2, #2
 800a91c:	0092      	lsls	r2, r2, #2
 800a91e:	300c      	adds	r0, #12
 800a920:	f7ff ff74 	bl	800a80c <memcpy>
 800a924:	4621      	mov	r1, r4
 800a926:	4630      	mov	r0, r6
 800a928:	f7ff ffc5 	bl	800a8b6 <_Bfree>
 800a92c:	4644      	mov	r4, r8
 800a92e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a932:	3501      	adds	r5, #1
 800a934:	615f      	str	r7, [r3, #20]
 800a936:	6125      	str	r5, [r4, #16]
 800a938:	4620      	mov	r0, r4
 800a93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a93e <__hi0bits>:
 800a93e:	0c02      	lsrs	r2, r0, #16
 800a940:	0412      	lsls	r2, r2, #16
 800a942:	4603      	mov	r3, r0
 800a944:	b9b2      	cbnz	r2, 800a974 <__hi0bits+0x36>
 800a946:	0403      	lsls	r3, r0, #16
 800a948:	2010      	movs	r0, #16
 800a94a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a94e:	bf04      	itt	eq
 800a950:	021b      	lsleq	r3, r3, #8
 800a952:	3008      	addeq	r0, #8
 800a954:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a958:	bf04      	itt	eq
 800a95a:	011b      	lsleq	r3, r3, #4
 800a95c:	3004      	addeq	r0, #4
 800a95e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a962:	bf04      	itt	eq
 800a964:	009b      	lsleq	r3, r3, #2
 800a966:	3002      	addeq	r0, #2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	db06      	blt.n	800a97a <__hi0bits+0x3c>
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	d503      	bpl.n	800a978 <__hi0bits+0x3a>
 800a970:	3001      	adds	r0, #1
 800a972:	4770      	bx	lr
 800a974:	2000      	movs	r0, #0
 800a976:	e7e8      	b.n	800a94a <__hi0bits+0xc>
 800a978:	2020      	movs	r0, #32
 800a97a:	4770      	bx	lr

0800a97c <__lo0bits>:
 800a97c:	6803      	ldr	r3, [r0, #0]
 800a97e:	4601      	mov	r1, r0
 800a980:	f013 0207 	ands.w	r2, r3, #7
 800a984:	d00b      	beq.n	800a99e <__lo0bits+0x22>
 800a986:	07da      	lsls	r2, r3, #31
 800a988:	d423      	bmi.n	800a9d2 <__lo0bits+0x56>
 800a98a:	0798      	lsls	r0, r3, #30
 800a98c:	bf49      	itett	mi
 800a98e:	085b      	lsrmi	r3, r3, #1
 800a990:	089b      	lsrpl	r3, r3, #2
 800a992:	2001      	movmi	r0, #1
 800a994:	600b      	strmi	r3, [r1, #0]
 800a996:	bf5c      	itt	pl
 800a998:	600b      	strpl	r3, [r1, #0]
 800a99a:	2002      	movpl	r0, #2
 800a99c:	4770      	bx	lr
 800a99e:	b298      	uxth	r0, r3
 800a9a0:	b9a8      	cbnz	r0, 800a9ce <__lo0bits+0x52>
 800a9a2:	2010      	movs	r0, #16
 800a9a4:	0c1b      	lsrs	r3, r3, #16
 800a9a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a9aa:	bf04      	itt	eq
 800a9ac:	0a1b      	lsreq	r3, r3, #8
 800a9ae:	3008      	addeq	r0, #8
 800a9b0:	071a      	lsls	r2, r3, #28
 800a9b2:	bf04      	itt	eq
 800a9b4:	091b      	lsreq	r3, r3, #4
 800a9b6:	3004      	addeq	r0, #4
 800a9b8:	079a      	lsls	r2, r3, #30
 800a9ba:	bf04      	itt	eq
 800a9bc:	089b      	lsreq	r3, r3, #2
 800a9be:	3002      	addeq	r0, #2
 800a9c0:	07da      	lsls	r2, r3, #31
 800a9c2:	d402      	bmi.n	800a9ca <__lo0bits+0x4e>
 800a9c4:	085b      	lsrs	r3, r3, #1
 800a9c6:	d006      	beq.n	800a9d6 <__lo0bits+0x5a>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	600b      	str	r3, [r1, #0]
 800a9cc:	4770      	bx	lr
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	e7e9      	b.n	800a9a6 <__lo0bits+0x2a>
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	4770      	bx	lr
 800a9d6:	2020      	movs	r0, #32
 800a9d8:	4770      	bx	lr

0800a9da <__i2b>:
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	460c      	mov	r4, r1
 800a9de:	2101      	movs	r1, #1
 800a9e0:	f7ff ff44 	bl	800a86c <_Balloc>
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	6144      	str	r4, [r0, #20]
 800a9e8:	6102      	str	r2, [r0, #16]
 800a9ea:	bd10      	pop	{r4, pc}

0800a9ec <__multiply>:
 800a9ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f0:	4614      	mov	r4, r2
 800a9f2:	690a      	ldr	r2, [r1, #16]
 800a9f4:	6923      	ldr	r3, [r4, #16]
 800a9f6:	4688      	mov	r8, r1
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	bfbe      	ittt	lt
 800a9fc:	460b      	movlt	r3, r1
 800a9fe:	46a0      	movlt	r8, r4
 800aa00:	461c      	movlt	r4, r3
 800aa02:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aa0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa12:	eb07 0609 	add.w	r6, r7, r9
 800aa16:	42b3      	cmp	r3, r6
 800aa18:	bfb8      	it	lt
 800aa1a:	3101      	addlt	r1, #1
 800aa1c:	f7ff ff26 	bl	800a86c <_Balloc>
 800aa20:	f100 0514 	add.w	r5, r0, #20
 800aa24:	462b      	mov	r3, r5
 800aa26:	2200      	movs	r2, #0
 800aa28:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800aa2c:	4573      	cmp	r3, lr
 800aa2e:	d316      	bcc.n	800aa5e <__multiply+0x72>
 800aa30:	f104 0214 	add.w	r2, r4, #20
 800aa34:	f108 0114 	add.w	r1, r8, #20
 800aa38:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aa3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	9b00      	ldr	r3, [sp, #0]
 800aa44:	9201      	str	r2, [sp, #4]
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d80c      	bhi.n	800aa64 <__multiply+0x78>
 800aa4a:	2e00      	cmp	r6, #0
 800aa4c:	dd03      	ble.n	800aa56 <__multiply+0x6a>
 800aa4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d05d      	beq.n	800ab12 <__multiply+0x126>
 800aa56:	6106      	str	r6, [r0, #16]
 800aa58:	b003      	add	sp, #12
 800aa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5e:	f843 2b04 	str.w	r2, [r3], #4
 800aa62:	e7e3      	b.n	800aa2c <__multiply+0x40>
 800aa64:	f8b2 b000 	ldrh.w	fp, [r2]
 800aa68:	f1bb 0f00 	cmp.w	fp, #0
 800aa6c:	d023      	beq.n	800aab6 <__multiply+0xca>
 800aa6e:	4689      	mov	r9, r1
 800aa70:	46ac      	mov	ip, r5
 800aa72:	f04f 0800 	mov.w	r8, #0
 800aa76:	f859 4b04 	ldr.w	r4, [r9], #4
 800aa7a:	f8dc a000 	ldr.w	sl, [ip]
 800aa7e:	b2a3      	uxth	r3, r4
 800aa80:	fa1f fa8a 	uxth.w	sl, sl
 800aa84:	fb0b a303 	mla	r3, fp, r3, sl
 800aa88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa8c:	f8dc 4000 	ldr.w	r4, [ip]
 800aa90:	4443      	add	r3, r8
 800aa92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa96:	fb0b 840a 	mla	r4, fp, sl, r8
 800aa9a:	46e2      	mov	sl, ip
 800aa9c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aaa6:	454f      	cmp	r7, r9
 800aaa8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aaac:	f84a 3b04 	str.w	r3, [sl], #4
 800aab0:	d82b      	bhi.n	800ab0a <__multiply+0x11e>
 800aab2:	f8cc 8004 	str.w	r8, [ip, #4]
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	3204      	adds	r2, #4
 800aaba:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aabe:	f1ba 0f00 	cmp.w	sl, #0
 800aac2:	d020      	beq.n	800ab06 <__multiply+0x11a>
 800aac4:	4689      	mov	r9, r1
 800aac6:	46a8      	mov	r8, r5
 800aac8:	f04f 0b00 	mov.w	fp, #0
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	f8b9 c000 	ldrh.w	ip, [r9]
 800aad2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	fb0a 440c 	mla	r4, sl, ip, r4
 800aadc:	46c4      	mov	ip, r8
 800aade:	445c      	add	r4, fp
 800aae0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aae4:	f84c 3b04 	str.w	r3, [ip], #4
 800aae8:	f859 3b04 	ldr.w	r3, [r9], #4
 800aaec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aaf0:	0c1b      	lsrs	r3, r3, #16
 800aaf2:	fb0a b303 	mla	r3, sl, r3, fp
 800aaf6:	454f      	cmp	r7, r9
 800aaf8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aafc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ab00:	d805      	bhi.n	800ab0e <__multiply+0x122>
 800ab02:	f8c8 3004 	str.w	r3, [r8, #4]
 800ab06:	3504      	adds	r5, #4
 800ab08:	e79b      	b.n	800aa42 <__multiply+0x56>
 800ab0a:	46d4      	mov	ip, sl
 800ab0c:	e7b3      	b.n	800aa76 <__multiply+0x8a>
 800ab0e:	46e0      	mov	r8, ip
 800ab10:	e7dd      	b.n	800aace <__multiply+0xe2>
 800ab12:	3e01      	subs	r6, #1
 800ab14:	e799      	b.n	800aa4a <__multiply+0x5e>
	...

0800ab18 <__pow5mult>:
 800ab18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	4615      	mov	r5, r2
 800ab1e:	f012 0203 	ands.w	r2, r2, #3
 800ab22:	4606      	mov	r6, r0
 800ab24:	460f      	mov	r7, r1
 800ab26:	d007      	beq.n	800ab38 <__pow5mult+0x20>
 800ab28:	4c1a      	ldr	r4, [pc, #104]	; (800ab94 <__pow5mult+0x7c>)
 800ab2a:	3a01      	subs	r2, #1
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab32:	f7ff fec9 	bl	800a8c8 <__multadd>
 800ab36:	4607      	mov	r7, r0
 800ab38:	10ad      	asrs	r5, r5, #2
 800ab3a:	d027      	beq.n	800ab8c <__pow5mult+0x74>
 800ab3c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800ab3e:	b944      	cbnz	r4, 800ab52 <__pow5mult+0x3a>
 800ab40:	f240 2171 	movw	r1, #625	; 0x271
 800ab44:	4630      	mov	r0, r6
 800ab46:	f7ff ff48 	bl	800a9da <__i2b>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	64b0      	str	r0, [r6, #72]	; 0x48
 800ab50:	6003      	str	r3, [r0, #0]
 800ab52:	f04f 0800 	mov.w	r8, #0
 800ab56:	07eb      	lsls	r3, r5, #31
 800ab58:	d50a      	bpl.n	800ab70 <__pow5mult+0x58>
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f7ff ff44 	bl	800a9ec <__multiply>
 800ab64:	4681      	mov	r9, r0
 800ab66:	4639      	mov	r1, r7
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7ff fea4 	bl	800a8b6 <_Bfree>
 800ab6e:	464f      	mov	r7, r9
 800ab70:	106d      	asrs	r5, r5, #1
 800ab72:	d00b      	beq.n	800ab8c <__pow5mult+0x74>
 800ab74:	6820      	ldr	r0, [r4, #0]
 800ab76:	b938      	cbnz	r0, 800ab88 <__pow5mult+0x70>
 800ab78:	4622      	mov	r2, r4
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f7ff ff35 	bl	800a9ec <__multiply>
 800ab82:	6020      	str	r0, [r4, #0]
 800ab84:	f8c0 8000 	str.w	r8, [r0]
 800ab88:	4604      	mov	r4, r0
 800ab8a:	e7e4      	b.n	800ab56 <__pow5mult+0x3e>
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab92:	bf00      	nop
 800ab94:	0800eaf0 	.word	0x0800eaf0

0800ab98 <__lshift>:
 800ab98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	4607      	mov	r7, r0
 800aba0:	4616      	mov	r6, r2
 800aba2:	6923      	ldr	r3, [r4, #16]
 800aba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aba8:	eb0a 0903 	add.w	r9, sl, r3
 800abac:	6849      	ldr	r1, [r1, #4]
 800abae:	68a3      	ldr	r3, [r4, #8]
 800abb0:	f109 0501 	add.w	r5, r9, #1
 800abb4:	42ab      	cmp	r3, r5
 800abb6:	db32      	blt.n	800ac1e <__lshift+0x86>
 800abb8:	4638      	mov	r0, r7
 800abba:	f7ff fe57 	bl	800a86c <_Balloc>
 800abbe:	2300      	movs	r3, #0
 800abc0:	4680      	mov	r8, r0
 800abc2:	461a      	mov	r2, r3
 800abc4:	f100 0114 	add.w	r1, r0, #20
 800abc8:	4553      	cmp	r3, sl
 800abca:	db2b      	blt.n	800ac24 <__lshift+0x8c>
 800abcc:	6920      	ldr	r0, [r4, #16]
 800abce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abd2:	f104 0314 	add.w	r3, r4, #20
 800abd6:	f016 021f 	ands.w	r2, r6, #31
 800abda:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abde:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abe2:	d025      	beq.n	800ac30 <__lshift+0x98>
 800abe4:	2000      	movs	r0, #0
 800abe6:	f1c2 0e20 	rsb	lr, r2, #32
 800abea:	468a      	mov	sl, r1
 800abec:	681e      	ldr	r6, [r3, #0]
 800abee:	4096      	lsls	r6, r2
 800abf0:	4330      	orrs	r0, r6
 800abf2:	f84a 0b04 	str.w	r0, [sl], #4
 800abf6:	f853 0b04 	ldr.w	r0, [r3], #4
 800abfa:	459c      	cmp	ip, r3
 800abfc:	fa20 f00e 	lsr.w	r0, r0, lr
 800ac00:	d814      	bhi.n	800ac2c <__lshift+0x94>
 800ac02:	6048      	str	r0, [r1, #4]
 800ac04:	b108      	cbz	r0, 800ac0a <__lshift+0x72>
 800ac06:	f109 0502 	add.w	r5, r9, #2
 800ac0a:	3d01      	subs	r5, #1
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	f8c8 5010 	str.w	r5, [r8, #16]
 800ac12:	4621      	mov	r1, r4
 800ac14:	f7ff fe4f 	bl	800a8b6 <_Bfree>
 800ac18:	4640      	mov	r0, r8
 800ac1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1e:	3101      	adds	r1, #1
 800ac20:	005b      	lsls	r3, r3, #1
 800ac22:	e7c7      	b.n	800abb4 <__lshift+0x1c>
 800ac24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	e7cd      	b.n	800abc8 <__lshift+0x30>
 800ac2c:	4651      	mov	r1, sl
 800ac2e:	e7dc      	b.n	800abea <__lshift+0x52>
 800ac30:	3904      	subs	r1, #4
 800ac32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac36:	459c      	cmp	ip, r3
 800ac38:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac3c:	d8f9      	bhi.n	800ac32 <__lshift+0x9a>
 800ac3e:	e7e4      	b.n	800ac0a <__lshift+0x72>

0800ac40 <__mcmp>:
 800ac40:	6903      	ldr	r3, [r0, #16]
 800ac42:	690a      	ldr	r2, [r1, #16]
 800ac44:	b530      	push	{r4, r5, lr}
 800ac46:	1a9b      	subs	r3, r3, r2
 800ac48:	d10c      	bne.n	800ac64 <__mcmp+0x24>
 800ac4a:	0092      	lsls	r2, r2, #2
 800ac4c:	3014      	adds	r0, #20
 800ac4e:	3114      	adds	r1, #20
 800ac50:	1884      	adds	r4, r0, r2
 800ac52:	4411      	add	r1, r2
 800ac54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac5c:	4295      	cmp	r5, r2
 800ac5e:	d003      	beq.n	800ac68 <__mcmp+0x28>
 800ac60:	d305      	bcc.n	800ac6e <__mcmp+0x2e>
 800ac62:	2301      	movs	r3, #1
 800ac64:	4618      	mov	r0, r3
 800ac66:	bd30      	pop	{r4, r5, pc}
 800ac68:	42a0      	cmp	r0, r4
 800ac6a:	d3f3      	bcc.n	800ac54 <__mcmp+0x14>
 800ac6c:	e7fa      	b.n	800ac64 <__mcmp+0x24>
 800ac6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac72:	e7f7      	b.n	800ac64 <__mcmp+0x24>

0800ac74 <__mdiff>:
 800ac74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac78:	460d      	mov	r5, r1
 800ac7a:	4607      	mov	r7, r0
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	4628      	mov	r0, r5
 800ac80:	4614      	mov	r4, r2
 800ac82:	f7ff ffdd 	bl	800ac40 <__mcmp>
 800ac86:	1e06      	subs	r6, r0, #0
 800ac88:	d108      	bne.n	800ac9c <__mdiff+0x28>
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	f7ff fded 	bl	800a86c <_Balloc>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ac98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9c:	bfa4      	itt	ge
 800ac9e:	4623      	movge	r3, r4
 800aca0:	462c      	movge	r4, r5
 800aca2:	4638      	mov	r0, r7
 800aca4:	6861      	ldr	r1, [r4, #4]
 800aca6:	bfa6      	itte	ge
 800aca8:	461d      	movge	r5, r3
 800acaa:	2600      	movge	r6, #0
 800acac:	2601      	movlt	r6, #1
 800acae:	f7ff fddd 	bl	800a86c <_Balloc>
 800acb2:	f04f 0e00 	mov.w	lr, #0
 800acb6:	60c6      	str	r6, [r0, #12]
 800acb8:	692b      	ldr	r3, [r5, #16]
 800acba:	6926      	ldr	r6, [r4, #16]
 800acbc:	f104 0214 	add.w	r2, r4, #20
 800acc0:	f105 0914 	add.w	r9, r5, #20
 800acc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800acc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800accc:	f100 0114 	add.w	r1, r0, #20
 800acd0:	f852 ab04 	ldr.w	sl, [r2], #4
 800acd4:	f859 5b04 	ldr.w	r5, [r9], #4
 800acd8:	fa1f f38a 	uxth.w	r3, sl
 800acdc:	4473      	add	r3, lr
 800acde:	b2ac      	uxth	r4, r5
 800ace0:	1b1b      	subs	r3, r3, r4
 800ace2:	0c2c      	lsrs	r4, r5, #16
 800ace4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800ace8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800acec:	b29b      	uxth	r3, r3
 800acee:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800acf2:	45c8      	cmp	r8, r9
 800acf4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800acf8:	4694      	mov	ip, r2
 800acfa:	f841 4b04 	str.w	r4, [r1], #4
 800acfe:	d8e7      	bhi.n	800acd0 <__mdiff+0x5c>
 800ad00:	45bc      	cmp	ip, r7
 800ad02:	d304      	bcc.n	800ad0e <__mdiff+0x9a>
 800ad04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ad08:	b183      	cbz	r3, 800ad2c <__mdiff+0xb8>
 800ad0a:	6106      	str	r6, [r0, #16]
 800ad0c:	e7c4      	b.n	800ac98 <__mdiff+0x24>
 800ad0e:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ad12:	b2a2      	uxth	r2, r4
 800ad14:	4472      	add	r2, lr
 800ad16:	1413      	asrs	r3, r2, #16
 800ad18:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ad1c:	b292      	uxth	r2, r2
 800ad1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad22:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ad26:	f841 2b04 	str.w	r2, [r1], #4
 800ad2a:	e7e9      	b.n	800ad00 <__mdiff+0x8c>
 800ad2c:	3e01      	subs	r6, #1
 800ad2e:	e7e9      	b.n	800ad04 <__mdiff+0x90>

0800ad30 <__d2b>:
 800ad30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ad34:	461c      	mov	r4, r3
 800ad36:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	4690      	mov	r8, r2
 800ad3e:	f7ff fd95 	bl	800a86c <_Balloc>
 800ad42:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800ad46:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ad4a:	4607      	mov	r7, r0
 800ad4c:	bb34      	cbnz	r4, 800ad9c <__d2b+0x6c>
 800ad4e:	9201      	str	r2, [sp, #4]
 800ad50:	f1b8 0200 	subs.w	r2, r8, #0
 800ad54:	d027      	beq.n	800ada6 <__d2b+0x76>
 800ad56:	a802      	add	r0, sp, #8
 800ad58:	f840 2d08 	str.w	r2, [r0, #-8]!
 800ad5c:	f7ff fe0e 	bl	800a97c <__lo0bits>
 800ad60:	9900      	ldr	r1, [sp, #0]
 800ad62:	b1f0      	cbz	r0, 800ada2 <__d2b+0x72>
 800ad64:	9a01      	ldr	r2, [sp, #4]
 800ad66:	f1c0 0320 	rsb	r3, r0, #32
 800ad6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	40c2      	lsrs	r2, r0
 800ad72:	617b      	str	r3, [r7, #20]
 800ad74:	9201      	str	r2, [sp, #4]
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bf14      	ite	ne
 800ad7c:	2102      	movne	r1, #2
 800ad7e:	2101      	moveq	r1, #1
 800ad80:	61bb      	str	r3, [r7, #24]
 800ad82:	6139      	str	r1, [r7, #16]
 800ad84:	b1c4      	cbz	r4, 800adb8 <__d2b+0x88>
 800ad86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ad8a:	4404      	add	r4, r0
 800ad8c:	6034      	str	r4, [r6, #0]
 800ad8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad92:	6028      	str	r0, [r5, #0]
 800ad94:	4638      	mov	r0, r7
 800ad96:	b002      	add	sp, #8
 800ad98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ada0:	e7d5      	b.n	800ad4e <__d2b+0x1e>
 800ada2:	6179      	str	r1, [r7, #20]
 800ada4:	e7e7      	b.n	800ad76 <__d2b+0x46>
 800ada6:	a801      	add	r0, sp, #4
 800ada8:	f7ff fde8 	bl	800a97c <__lo0bits>
 800adac:	2101      	movs	r1, #1
 800adae:	9b01      	ldr	r3, [sp, #4]
 800adb0:	6139      	str	r1, [r7, #16]
 800adb2:	617b      	str	r3, [r7, #20]
 800adb4:	3020      	adds	r0, #32
 800adb6:	e7e5      	b.n	800ad84 <__d2b+0x54>
 800adb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adbc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800adc0:	6030      	str	r0, [r6, #0]
 800adc2:	6918      	ldr	r0, [r3, #16]
 800adc4:	f7ff fdbb 	bl	800a93e <__hi0bits>
 800adc8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800adcc:	e7e1      	b.n	800ad92 <__d2b+0x62>
	...

0800add0 <_realloc_r>:
 800add0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	4682      	mov	sl, r0
 800add6:	460c      	mov	r4, r1
 800add8:	b929      	cbnz	r1, 800ade6 <_realloc_r+0x16>
 800adda:	4611      	mov	r1, r2
 800addc:	b003      	add	sp, #12
 800adde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade2:	f7ff bacf 	b.w	800a384 <_malloc_r>
 800ade6:	9201      	str	r2, [sp, #4]
 800ade8:	f7ff fd34 	bl	800a854 <__malloc_lock>
 800adec:	9a01      	ldr	r2, [sp, #4]
 800adee:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800adf2:	f102 080b 	add.w	r8, r2, #11
 800adf6:	f1b8 0f16 	cmp.w	r8, #22
 800adfa:	f1a4 0908 	sub.w	r9, r4, #8
 800adfe:	f025 0603 	bic.w	r6, r5, #3
 800ae02:	d90b      	bls.n	800ae1c <_realloc_r+0x4c>
 800ae04:	f038 0807 	bics.w	r8, r8, #7
 800ae08:	d50a      	bpl.n	800ae20 <_realloc_r+0x50>
 800ae0a:	230c      	movs	r3, #12
 800ae0c:	f04f 0b00 	mov.w	fp, #0
 800ae10:	f8ca 3000 	str.w	r3, [sl]
 800ae14:	4658      	mov	r0, fp
 800ae16:	b003      	add	sp, #12
 800ae18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1c:	f04f 0810 	mov.w	r8, #16
 800ae20:	4590      	cmp	r8, r2
 800ae22:	d3f2      	bcc.n	800ae0a <_realloc_r+0x3a>
 800ae24:	45b0      	cmp	r8, r6
 800ae26:	f340 8175 	ble.w	800b114 <_realloc_r+0x344>
 800ae2a:	49ab      	ldr	r1, [pc, #684]	; (800b0d8 <_realloc_r+0x308>)
 800ae2c:	eb09 0306 	add.w	r3, r9, r6
 800ae30:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ae34:	6858      	ldr	r0, [r3, #4]
 800ae36:	459c      	cmp	ip, r3
 800ae38:	9101      	str	r1, [sp, #4]
 800ae3a:	d005      	beq.n	800ae48 <_realloc_r+0x78>
 800ae3c:	f020 0101 	bic.w	r1, r0, #1
 800ae40:	4419      	add	r1, r3
 800ae42:	6849      	ldr	r1, [r1, #4]
 800ae44:	07cf      	lsls	r7, r1, #31
 800ae46:	d447      	bmi.n	800aed8 <_realloc_r+0x108>
 800ae48:	f020 0003 	bic.w	r0, r0, #3
 800ae4c:	459c      	cmp	ip, r3
 800ae4e:	eb06 0700 	add.w	r7, r6, r0
 800ae52:	d119      	bne.n	800ae88 <_realloc_r+0xb8>
 800ae54:	f108 0110 	add.w	r1, r8, #16
 800ae58:	42b9      	cmp	r1, r7
 800ae5a:	dc3f      	bgt.n	800aedc <_realloc_r+0x10c>
 800ae5c:	9a01      	ldr	r2, [sp, #4]
 800ae5e:	eba7 0708 	sub.w	r7, r7, r8
 800ae62:	eb09 0308 	add.w	r3, r9, r8
 800ae66:	f047 0701 	orr.w	r7, r7, #1
 800ae6a:	6093      	str	r3, [r2, #8]
 800ae6c:	605f      	str	r7, [r3, #4]
 800ae6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ae72:	4650      	mov	r0, sl
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	ea43 0308 	orr.w	r3, r3, r8
 800ae7c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae80:	f7ff fcee 	bl	800a860 <__malloc_unlock>
 800ae84:	46a3      	mov	fp, r4
 800ae86:	e7c5      	b.n	800ae14 <_realloc_r+0x44>
 800ae88:	45b8      	cmp	r8, r7
 800ae8a:	dc27      	bgt.n	800aedc <_realloc_r+0x10c>
 800ae8c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ae90:	60da      	str	r2, [r3, #12]
 800ae92:	6093      	str	r3, [r2, #8]
 800ae94:	eba7 0008 	sub.w	r0, r7, r8
 800ae98:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ae9c:	280f      	cmp	r0, #15
 800ae9e:	f002 0201 	and.w	r2, r2, #1
 800aea2:	eb09 0307 	add.w	r3, r9, r7
 800aea6:	f240 8137 	bls.w	800b118 <_realloc_r+0x348>
 800aeaa:	eb09 0108 	add.w	r1, r9, r8
 800aeae:	ea48 0202 	orr.w	r2, r8, r2
 800aeb2:	f040 0001 	orr.w	r0, r0, #1
 800aeb6:	f8c9 2004 	str.w	r2, [r9, #4]
 800aeba:	6048      	str	r0, [r1, #4]
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	3108      	adds	r1, #8
 800aec0:	f042 0201 	orr.w	r2, r2, #1
 800aec4:	605a      	str	r2, [r3, #4]
 800aec6:	4650      	mov	r0, sl
 800aec8:	f7fe ffae 	bl	8009e28 <_free_r>
 800aecc:	4650      	mov	r0, sl
 800aece:	f7ff fcc7 	bl	800a860 <__malloc_unlock>
 800aed2:	f109 0b08 	add.w	fp, r9, #8
 800aed6:	e79d      	b.n	800ae14 <_realloc_r+0x44>
 800aed8:	2000      	movs	r0, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	07e9      	lsls	r1, r5, #31
 800aede:	f100 80c9 	bmi.w	800b074 <_realloc_r+0x2a4>
 800aee2:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800aee6:	eba9 0505 	sub.w	r5, r9, r5
 800aeea:	6869      	ldr	r1, [r5, #4]
 800aeec:	f021 0103 	bic.w	r1, r1, #3
 800aef0:	eb01 0b06 	add.w	fp, r1, r6
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f000 8088 	beq.w	800b00a <_realloc_r+0x23a>
 800aefa:	459c      	cmp	ip, r3
 800aefc:	eb00 070b 	add.w	r7, r0, fp
 800af00:	d14a      	bne.n	800af98 <_realloc_r+0x1c8>
 800af02:	f108 0310 	add.w	r3, r8, #16
 800af06:	42bb      	cmp	r3, r7
 800af08:	dc7f      	bgt.n	800b00a <_realloc_r+0x23a>
 800af0a:	46ab      	mov	fp, r5
 800af0c:	68eb      	ldr	r3, [r5, #12]
 800af0e:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800af12:	60d3      	str	r3, [r2, #12]
 800af14:	609a      	str	r2, [r3, #8]
 800af16:	1f32      	subs	r2, r6, #4
 800af18:	2a24      	cmp	r2, #36	; 0x24
 800af1a:	d838      	bhi.n	800af8e <_realloc_r+0x1be>
 800af1c:	2a13      	cmp	r2, #19
 800af1e:	d934      	bls.n	800af8a <_realloc_r+0x1ba>
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	2a1b      	cmp	r2, #27
 800af24:	60ab      	str	r3, [r5, #8]
 800af26:	6863      	ldr	r3, [r4, #4]
 800af28:	60eb      	str	r3, [r5, #12]
 800af2a:	d81b      	bhi.n	800af64 <_realloc_r+0x194>
 800af2c:	3408      	adds	r4, #8
 800af2e:	f105 0310 	add.w	r3, r5, #16
 800af32:	6822      	ldr	r2, [r4, #0]
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	6862      	ldr	r2, [r4, #4]
 800af38:	605a      	str	r2, [r3, #4]
 800af3a:	68a2      	ldr	r2, [r4, #8]
 800af3c:	609a      	str	r2, [r3, #8]
 800af3e:	9a01      	ldr	r2, [sp, #4]
 800af40:	eba7 0708 	sub.w	r7, r7, r8
 800af44:	eb05 0308 	add.w	r3, r5, r8
 800af48:	f047 0701 	orr.w	r7, r7, #1
 800af4c:	6093      	str	r3, [r2, #8]
 800af4e:	605f      	str	r7, [r3, #4]
 800af50:	686b      	ldr	r3, [r5, #4]
 800af52:	f003 0301 	and.w	r3, r3, #1
 800af56:	ea43 0308 	orr.w	r3, r3, r8
 800af5a:	606b      	str	r3, [r5, #4]
 800af5c:	4650      	mov	r0, sl
 800af5e:	f7ff fc7f 	bl	800a860 <__malloc_unlock>
 800af62:	e757      	b.n	800ae14 <_realloc_r+0x44>
 800af64:	68a3      	ldr	r3, [r4, #8]
 800af66:	2a24      	cmp	r2, #36	; 0x24
 800af68:	612b      	str	r3, [r5, #16]
 800af6a:	68e3      	ldr	r3, [r4, #12]
 800af6c:	bf18      	it	ne
 800af6e:	3410      	addne	r4, #16
 800af70:	616b      	str	r3, [r5, #20]
 800af72:	bf09      	itett	eq
 800af74:	6923      	ldreq	r3, [r4, #16]
 800af76:	f105 0318 	addne.w	r3, r5, #24
 800af7a:	61ab      	streq	r3, [r5, #24]
 800af7c:	6962      	ldreq	r2, [r4, #20]
 800af7e:	bf02      	ittt	eq
 800af80:	f105 0320 	addeq.w	r3, r5, #32
 800af84:	61ea      	streq	r2, [r5, #28]
 800af86:	3418      	addeq	r4, #24
 800af88:	e7d3      	b.n	800af32 <_realloc_r+0x162>
 800af8a:	465b      	mov	r3, fp
 800af8c:	e7d1      	b.n	800af32 <_realloc_r+0x162>
 800af8e:	4621      	mov	r1, r4
 800af90:	4658      	mov	r0, fp
 800af92:	f7ff fc46 	bl	800a822 <memmove>
 800af96:	e7d2      	b.n	800af3e <_realloc_r+0x16e>
 800af98:	45b8      	cmp	r8, r7
 800af9a:	dc36      	bgt.n	800b00a <_realloc_r+0x23a>
 800af9c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800afa0:	4628      	mov	r0, r5
 800afa2:	60da      	str	r2, [r3, #12]
 800afa4:	6093      	str	r3, [r2, #8]
 800afa6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800afaa:	68eb      	ldr	r3, [r5, #12]
 800afac:	60d3      	str	r3, [r2, #12]
 800afae:	609a      	str	r2, [r3, #8]
 800afb0:	1f32      	subs	r2, r6, #4
 800afb2:	2a24      	cmp	r2, #36	; 0x24
 800afb4:	d825      	bhi.n	800b002 <_realloc_r+0x232>
 800afb6:	2a13      	cmp	r2, #19
 800afb8:	d908      	bls.n	800afcc <_realloc_r+0x1fc>
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	2a1b      	cmp	r2, #27
 800afbe:	60ab      	str	r3, [r5, #8]
 800afc0:	6863      	ldr	r3, [r4, #4]
 800afc2:	60eb      	str	r3, [r5, #12]
 800afc4:	d80a      	bhi.n	800afdc <_realloc_r+0x20c>
 800afc6:	3408      	adds	r4, #8
 800afc8:	f105 0010 	add.w	r0, r5, #16
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	6003      	str	r3, [r0, #0]
 800afd0:	6863      	ldr	r3, [r4, #4]
 800afd2:	6043      	str	r3, [r0, #4]
 800afd4:	68a3      	ldr	r3, [r4, #8]
 800afd6:	6083      	str	r3, [r0, #8]
 800afd8:	46a9      	mov	r9, r5
 800afda:	e75b      	b.n	800ae94 <_realloc_r+0xc4>
 800afdc:	68a3      	ldr	r3, [r4, #8]
 800afde:	2a24      	cmp	r2, #36	; 0x24
 800afe0:	612b      	str	r3, [r5, #16]
 800afe2:	68e3      	ldr	r3, [r4, #12]
 800afe4:	bf18      	it	ne
 800afe6:	f105 0018 	addne.w	r0, r5, #24
 800afea:	616b      	str	r3, [r5, #20]
 800afec:	bf09      	itett	eq
 800afee:	6923      	ldreq	r3, [r4, #16]
 800aff0:	3410      	addne	r4, #16
 800aff2:	61ab      	streq	r3, [r5, #24]
 800aff4:	6963      	ldreq	r3, [r4, #20]
 800aff6:	bf02      	ittt	eq
 800aff8:	f105 0020 	addeq.w	r0, r5, #32
 800affc:	61eb      	streq	r3, [r5, #28]
 800affe:	3418      	addeq	r4, #24
 800b000:	e7e4      	b.n	800afcc <_realloc_r+0x1fc>
 800b002:	4621      	mov	r1, r4
 800b004:	f7ff fc0d 	bl	800a822 <memmove>
 800b008:	e7e6      	b.n	800afd8 <_realloc_r+0x208>
 800b00a:	45d8      	cmp	r8, fp
 800b00c:	dc32      	bgt.n	800b074 <_realloc_r+0x2a4>
 800b00e:	4628      	mov	r0, r5
 800b010:	68eb      	ldr	r3, [r5, #12]
 800b012:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b016:	60d3      	str	r3, [r2, #12]
 800b018:	609a      	str	r2, [r3, #8]
 800b01a:	1f32      	subs	r2, r6, #4
 800b01c:	2a24      	cmp	r2, #36	; 0x24
 800b01e:	d825      	bhi.n	800b06c <_realloc_r+0x29c>
 800b020:	2a13      	cmp	r2, #19
 800b022:	d908      	bls.n	800b036 <_realloc_r+0x266>
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	2a1b      	cmp	r2, #27
 800b028:	60ab      	str	r3, [r5, #8]
 800b02a:	6863      	ldr	r3, [r4, #4]
 800b02c:	60eb      	str	r3, [r5, #12]
 800b02e:	d80a      	bhi.n	800b046 <_realloc_r+0x276>
 800b030:	3408      	adds	r4, #8
 800b032:	f105 0010 	add.w	r0, r5, #16
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	6003      	str	r3, [r0, #0]
 800b03a:	6863      	ldr	r3, [r4, #4]
 800b03c:	6043      	str	r3, [r0, #4]
 800b03e:	68a3      	ldr	r3, [r4, #8]
 800b040:	6083      	str	r3, [r0, #8]
 800b042:	465f      	mov	r7, fp
 800b044:	e7c8      	b.n	800afd8 <_realloc_r+0x208>
 800b046:	68a3      	ldr	r3, [r4, #8]
 800b048:	2a24      	cmp	r2, #36	; 0x24
 800b04a:	612b      	str	r3, [r5, #16]
 800b04c:	68e3      	ldr	r3, [r4, #12]
 800b04e:	bf18      	it	ne
 800b050:	f105 0018 	addne.w	r0, r5, #24
 800b054:	616b      	str	r3, [r5, #20]
 800b056:	bf09      	itett	eq
 800b058:	6923      	ldreq	r3, [r4, #16]
 800b05a:	3410      	addne	r4, #16
 800b05c:	61ab      	streq	r3, [r5, #24]
 800b05e:	6963      	ldreq	r3, [r4, #20]
 800b060:	bf02      	ittt	eq
 800b062:	f105 0020 	addeq.w	r0, r5, #32
 800b066:	61eb      	streq	r3, [r5, #28]
 800b068:	3418      	addeq	r4, #24
 800b06a:	e7e4      	b.n	800b036 <_realloc_r+0x266>
 800b06c:	4621      	mov	r1, r4
 800b06e:	f7ff fbd8 	bl	800a822 <memmove>
 800b072:	e7e6      	b.n	800b042 <_realloc_r+0x272>
 800b074:	4611      	mov	r1, r2
 800b076:	4650      	mov	r0, sl
 800b078:	f7ff f984 	bl	800a384 <_malloc_r>
 800b07c:	4683      	mov	fp, r0
 800b07e:	2800      	cmp	r0, #0
 800b080:	f43f af6c 	beq.w	800af5c <_realloc_r+0x18c>
 800b084:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b088:	f1a0 0208 	sub.w	r2, r0, #8
 800b08c:	f023 0301 	bic.w	r3, r3, #1
 800b090:	444b      	add	r3, r9
 800b092:	4293      	cmp	r3, r2
 800b094:	d105      	bne.n	800b0a2 <_realloc_r+0x2d2>
 800b096:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b09a:	f027 0703 	bic.w	r7, r7, #3
 800b09e:	4437      	add	r7, r6
 800b0a0:	e6f8      	b.n	800ae94 <_realloc_r+0xc4>
 800b0a2:	1f32      	subs	r2, r6, #4
 800b0a4:	2a24      	cmp	r2, #36	; 0x24
 800b0a6:	d831      	bhi.n	800b10c <_realloc_r+0x33c>
 800b0a8:	2a13      	cmp	r2, #19
 800b0aa:	d92c      	bls.n	800b106 <_realloc_r+0x336>
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	2a1b      	cmp	r2, #27
 800b0b0:	6003      	str	r3, [r0, #0]
 800b0b2:	6863      	ldr	r3, [r4, #4]
 800b0b4:	6043      	str	r3, [r0, #4]
 800b0b6:	d811      	bhi.n	800b0dc <_realloc_r+0x30c>
 800b0b8:	f104 0208 	add.w	r2, r4, #8
 800b0bc:	f100 0308 	add.w	r3, r0, #8
 800b0c0:	6811      	ldr	r1, [r2, #0]
 800b0c2:	6019      	str	r1, [r3, #0]
 800b0c4:	6851      	ldr	r1, [r2, #4]
 800b0c6:	6059      	str	r1, [r3, #4]
 800b0c8:	6892      	ldr	r2, [r2, #8]
 800b0ca:	609a      	str	r2, [r3, #8]
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	4650      	mov	r0, sl
 800b0d0:	f7fe feaa 	bl	8009e28 <_free_r>
 800b0d4:	e742      	b.n	800af5c <_realloc_r+0x18c>
 800b0d6:	bf00      	nop
 800b0d8:	20000474 	.word	0x20000474
 800b0dc:	68a3      	ldr	r3, [r4, #8]
 800b0de:	2a24      	cmp	r2, #36	; 0x24
 800b0e0:	6083      	str	r3, [r0, #8]
 800b0e2:	68e3      	ldr	r3, [r4, #12]
 800b0e4:	bf18      	it	ne
 800b0e6:	f104 0210 	addne.w	r2, r4, #16
 800b0ea:	60c3      	str	r3, [r0, #12]
 800b0ec:	bf09      	itett	eq
 800b0ee:	6923      	ldreq	r3, [r4, #16]
 800b0f0:	f100 0310 	addne.w	r3, r0, #16
 800b0f4:	6103      	streq	r3, [r0, #16]
 800b0f6:	6961      	ldreq	r1, [r4, #20]
 800b0f8:	bf02      	ittt	eq
 800b0fa:	f104 0218 	addeq.w	r2, r4, #24
 800b0fe:	f100 0318 	addeq.w	r3, r0, #24
 800b102:	6141      	streq	r1, [r0, #20]
 800b104:	e7dc      	b.n	800b0c0 <_realloc_r+0x2f0>
 800b106:	4603      	mov	r3, r0
 800b108:	4622      	mov	r2, r4
 800b10a:	e7d9      	b.n	800b0c0 <_realloc_r+0x2f0>
 800b10c:	4621      	mov	r1, r4
 800b10e:	f7ff fb88 	bl	800a822 <memmove>
 800b112:	e7db      	b.n	800b0cc <_realloc_r+0x2fc>
 800b114:	4637      	mov	r7, r6
 800b116:	e6bd      	b.n	800ae94 <_realloc_r+0xc4>
 800b118:	4317      	orrs	r7, r2
 800b11a:	f8c9 7004 	str.w	r7, [r9, #4]
 800b11e:	685a      	ldr	r2, [r3, #4]
 800b120:	f042 0201 	orr.w	r2, r2, #1
 800b124:	605a      	str	r2, [r3, #4]
 800b126:	e6d1      	b.n	800aecc <_realloc_r+0xfc>

0800b128 <frexp>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	4616      	mov	r6, r2
 800b12c:	2700      	movs	r7, #0
 800b12e:	6037      	str	r7, [r6, #0]
 800b130:	4f14      	ldr	r7, [pc, #80]	; (800b184 <frexp+0x5c>)
 800b132:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b136:	42bb      	cmp	r3, r7
 800b138:	4604      	mov	r4, r0
 800b13a:	460d      	mov	r5, r1
 800b13c:	460a      	mov	r2, r1
 800b13e:	dc1e      	bgt.n	800b17e <frexp+0x56>
 800b140:	4607      	mov	r7, r0
 800b142:	431f      	orrs	r7, r3
 800b144:	d01b      	beq.n	800b17e <frexp+0x56>
 800b146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b14a:	da0a      	bge.n	800b162 <frexp+0x3a>
 800b14c:	2200      	movs	r2, #0
 800b14e:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <frexp+0x60>)
 800b150:	f7f5 f9c2 	bl	80004d8 <__aeabi_dmul>
 800b154:	460a      	mov	r2, r1
 800b156:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b15a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800b15e:	4604      	mov	r4, r0
 800b160:	6031      	str	r1, [r6, #0]
 800b162:	6831      	ldr	r1, [r6, #0]
 800b164:	151b      	asrs	r3, r3, #20
 800b166:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b16a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b16e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800b172:	440b      	add	r3, r1
 800b174:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b178:	6033      	str	r3, [r6, #0]
 800b17a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800b17e:	4620      	mov	r0, r4
 800b180:	4629      	mov	r1, r5
 800b182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b184:	7fefffff 	.word	0x7fefffff
 800b188:	43500000 	.word	0x43500000

0800b18c <_sbrk_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	2300      	movs	r3, #0
 800b190:	4c05      	ldr	r4, [pc, #20]	; (800b1a8 <_sbrk_r+0x1c>)
 800b192:	4605      	mov	r5, r0
 800b194:	4608      	mov	r0, r1
 800b196:	6023      	str	r3, [r4, #0]
 800b198:	f7f8 ff18 	bl	8003fcc <_sbrk>
 800b19c:	1c43      	adds	r3, r0, #1
 800b19e:	d102      	bne.n	800b1a6 <_sbrk_r+0x1a>
 800b1a0:	6823      	ldr	r3, [r4, #0]
 800b1a2:	b103      	cbz	r3, 800b1a6 <_sbrk_r+0x1a>
 800b1a4:	602b      	str	r3, [r5, #0]
 800b1a6:	bd38      	pop	{r3, r4, r5, pc}
 800b1a8:	200010d0 	.word	0x200010d0

0800b1ac <__sread>:
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b4:	f000 fac6 	bl	800b744 <_read_r>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	bfab      	itete	ge
 800b1bc:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800b1be:	89a3      	ldrhlt	r3, [r4, #12]
 800b1c0:	181b      	addge	r3, r3, r0
 800b1c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1c6:	bfac      	ite	ge
 800b1c8:	6523      	strge	r3, [r4, #80]	; 0x50
 800b1ca:	81a3      	strhlt	r3, [r4, #12]
 800b1cc:	bd10      	pop	{r4, pc}

0800b1ce <__swrite>:
 800b1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d2:	461f      	mov	r7, r3
 800b1d4:	898b      	ldrh	r3, [r1, #12]
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	05db      	lsls	r3, r3, #23
 800b1da:	460c      	mov	r4, r1
 800b1dc:	4616      	mov	r6, r2
 800b1de:	d505      	bpl.n	800b1ec <__swrite+0x1e>
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e8:	f000 fa88 	bl	800b6fc <_lseek_r>
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	4632      	mov	r2, r6
 800b1f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1f4:	81a3      	strh	r3, [r4, #12]
 800b1f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1fa:	463b      	mov	r3, r7
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b202:	f000 b8e3 	b.w	800b3cc <_write_r>

0800b206 <__sseek>:
 800b206:	b510      	push	{r4, lr}
 800b208:	460c      	mov	r4, r1
 800b20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b20e:	f000 fa75 	bl	800b6fc <_lseek_r>
 800b212:	1c43      	adds	r3, r0, #1
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	bf15      	itete	ne
 800b218:	6520      	strne	r0, [r4, #80]	; 0x50
 800b21a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b21e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b222:	81a3      	strheq	r3, [r4, #12]
 800b224:	bf18      	it	ne
 800b226:	81a3      	strhne	r3, [r4, #12]
 800b228:	bd10      	pop	{r4, pc}

0800b22a <__sclose>:
 800b22a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b22e:	f000 b963 	b.w	800b4f8 <_close_r>

0800b232 <strncpy>:
 800b232:	b570      	push	{r4, r5, r6, lr}
 800b234:	4604      	mov	r4, r0
 800b236:	3901      	subs	r1, #1
 800b238:	b902      	cbnz	r2, 800b23c <strncpy+0xa>
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	4623      	mov	r3, r4
 800b23e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800b242:	1e56      	subs	r6, r2, #1
 800b244:	f803 5b01 	strb.w	r5, [r3], #1
 800b248:	b92d      	cbnz	r5, 800b256 <strncpy+0x24>
 800b24a:	4414      	add	r4, r2
 800b24c:	42a3      	cmp	r3, r4
 800b24e:	d0f4      	beq.n	800b23a <strncpy+0x8>
 800b250:	f803 5b01 	strb.w	r5, [r3], #1
 800b254:	e7fa      	b.n	800b24c <strncpy+0x1a>
 800b256:	461c      	mov	r4, r3
 800b258:	4632      	mov	r2, r6
 800b25a:	e7ed      	b.n	800b238 <strncpy+0x6>

0800b25c <__ssprint_r>:
 800b25c:	6893      	ldr	r3, [r2, #8]
 800b25e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b262:	4681      	mov	r9, r0
 800b264:	460c      	mov	r4, r1
 800b266:	4616      	mov	r6, r2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d05e      	beq.n	800b32a <__ssprint_r+0xce>
 800b26c:	f04f 0b00 	mov.w	fp, #0
 800b270:	465f      	mov	r7, fp
 800b272:	f8d2 a000 	ldr.w	sl, [r2]
 800b276:	b357      	cbz	r7, 800b2ce <__ssprint_r+0x72>
 800b278:	68a3      	ldr	r3, [r4, #8]
 800b27a:	429f      	cmp	r7, r3
 800b27c:	d340      	bcc.n	800b300 <__ssprint_r+0xa4>
 800b27e:	89a2      	ldrh	r2, [r4, #12]
 800b280:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b284:	d03c      	beq.n	800b300 <__ssprint_r+0xa4>
 800b286:	2302      	movs	r3, #2
 800b288:	6825      	ldr	r5, [r4, #0]
 800b28a:	6921      	ldr	r1, [r4, #16]
 800b28c:	eba5 0801 	sub.w	r8, r5, r1
 800b290:	6965      	ldr	r5, [r4, #20]
 800b292:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b296:	fb95 f5f3 	sdiv	r5, r5, r3
 800b29a:	f108 0301 	add.w	r3, r8, #1
 800b29e:	443b      	add	r3, r7
 800b2a0:	429d      	cmp	r5, r3
 800b2a2:	bf38      	it	cc
 800b2a4:	461d      	movcc	r5, r3
 800b2a6:	0553      	lsls	r3, r2, #21
 800b2a8:	d544      	bpl.n	800b334 <__ssprint_r+0xd8>
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	4648      	mov	r0, r9
 800b2ae:	f7ff f869 	bl	800a384 <_malloc_r>
 800b2b2:	b988      	cbnz	r0, 800b2d8 <__ssprint_r+0x7c>
 800b2b4:	230c      	movs	r3, #12
 800b2b6:	f8c9 3000 	str.w	r3, [r9]
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c4:	81a3      	strh	r3, [r4, #12]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800b2cc:	e02f      	b.n	800b32e <__ssprint_r+0xd2>
 800b2ce:	e9da b700 	ldrd	fp, r7, [sl]
 800b2d2:	f10a 0a08 	add.w	sl, sl, #8
 800b2d6:	e7ce      	b.n	800b276 <__ssprint_r+0x1a>
 800b2d8:	4642      	mov	r2, r8
 800b2da:	6921      	ldr	r1, [r4, #16]
 800b2dc:	9001      	str	r0, [sp, #4]
 800b2de:	f7ff fa95 	bl	800a80c <memcpy>
 800b2e2:	89a2      	ldrh	r2, [r4, #12]
 800b2e4:	9b01      	ldr	r3, [sp, #4]
 800b2e6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b2ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b2ee:	81a2      	strh	r2, [r4, #12]
 800b2f0:	6123      	str	r3, [r4, #16]
 800b2f2:	4443      	add	r3, r8
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	463b      	mov	r3, r7
 800b2f8:	6165      	str	r5, [r4, #20]
 800b2fa:	eba5 0508 	sub.w	r5, r5, r8
 800b2fe:	60a5      	str	r5, [r4, #8]
 800b300:	42bb      	cmp	r3, r7
 800b302:	bf28      	it	cs
 800b304:	463b      	movcs	r3, r7
 800b306:	4659      	mov	r1, fp
 800b308:	461a      	mov	r2, r3
 800b30a:	6820      	ldr	r0, [r4, #0]
 800b30c:	9301      	str	r3, [sp, #4]
 800b30e:	f7ff fa88 	bl	800a822 <memmove>
 800b312:	68a2      	ldr	r2, [r4, #8]
 800b314:	9b01      	ldr	r3, [sp, #4]
 800b316:	1ad2      	subs	r2, r2, r3
 800b318:	60a2      	str	r2, [r4, #8]
 800b31a:	6822      	ldr	r2, [r4, #0]
 800b31c:	4413      	add	r3, r2
 800b31e:	6023      	str	r3, [r4, #0]
 800b320:	68b3      	ldr	r3, [r6, #8]
 800b322:	1bdf      	subs	r7, r3, r7
 800b324:	60b7      	str	r7, [r6, #8]
 800b326:	2f00      	cmp	r7, #0
 800b328:	d1d1      	bne.n	800b2ce <__ssprint_r+0x72>
 800b32a:	2000      	movs	r0, #0
 800b32c:	6070      	str	r0, [r6, #4]
 800b32e:	b003      	add	sp, #12
 800b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	462a      	mov	r2, r5
 800b336:	4648      	mov	r0, r9
 800b338:	f7ff fd4a 	bl	800add0 <_realloc_r>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2800      	cmp	r0, #0
 800b340:	d1d6      	bne.n	800b2f0 <__ssprint_r+0x94>
 800b342:	6921      	ldr	r1, [r4, #16]
 800b344:	4648      	mov	r0, r9
 800b346:	f7fe fd6f 	bl	8009e28 <_free_r>
 800b34a:	e7b3      	b.n	800b2b4 <__ssprint_r+0x58>

0800b34c <sysconf>:
 800b34c:	2808      	cmp	r0, #8
 800b34e:	b508      	push	{r3, lr}
 800b350:	d006      	beq.n	800b360 <sysconf+0x14>
 800b352:	f7fa ff1b 	bl	800618c <__errno>
 800b356:	2316      	movs	r3, #22
 800b358:	6003      	str	r3, [r0, #0]
 800b35a:	f04f 30ff 	mov.w	r0, #4294967295
 800b35e:	bd08      	pop	{r3, pc}
 800b360:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b364:	e7fb      	b.n	800b35e <sysconf+0x12>

0800b366 <__sprint_r>:
 800b366:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36a:	6893      	ldr	r3, [r2, #8]
 800b36c:	4680      	mov	r8, r0
 800b36e:	460f      	mov	r7, r1
 800b370:	4614      	mov	r4, r2
 800b372:	b91b      	cbnz	r3, 800b37c <__sprint_r+0x16>
 800b374:	4618      	mov	r0, r3
 800b376:	6053      	str	r3, [r2, #4]
 800b378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b37e:	049d      	lsls	r5, r3, #18
 800b380:	d520      	bpl.n	800b3c4 <__sprint_r+0x5e>
 800b382:	6815      	ldr	r5, [r2, #0]
 800b384:	68a0      	ldr	r0, [r4, #8]
 800b386:	3508      	adds	r5, #8
 800b388:	b918      	cbnz	r0, 800b392 <__sprint_r+0x2c>
 800b38a:	2300      	movs	r3, #0
 800b38c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800b390:	e7f2      	b.n	800b378 <__sprint_r+0x12>
 800b392:	f04f 0900 	mov.w	r9, #0
 800b396:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800b39a:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800b39e:	45ca      	cmp	sl, r9
 800b3a0:	dc05      	bgt.n	800b3ae <__sprint_r+0x48>
 800b3a2:	68a3      	ldr	r3, [r4, #8]
 800b3a4:	f026 0603 	bic.w	r6, r6, #3
 800b3a8:	1b9e      	subs	r6, r3, r6
 800b3aa:	60a6      	str	r6, [r4, #8]
 800b3ac:	e7ea      	b.n	800b384 <__sprint_r+0x1e>
 800b3ae:	463a      	mov	r2, r7
 800b3b0:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	f000 f947 	bl	800b648 <_fputwc_r>
 800b3ba:	1c43      	adds	r3, r0, #1
 800b3bc:	d0e5      	beq.n	800b38a <__sprint_r+0x24>
 800b3be:	f109 0901 	add.w	r9, r9, #1
 800b3c2:	e7ec      	b.n	800b39e <__sprint_r+0x38>
 800b3c4:	f7fe fdec 	bl	8009fa0 <__sfvwrite_r>
 800b3c8:	e7df      	b.n	800b38a <__sprint_r+0x24>
	...

0800b3cc <_write_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	4608      	mov	r0, r1
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	4c05      	ldr	r4, [pc, #20]	; (800b3ec <_write_r+0x20>)
 800b3d8:	6022      	str	r2, [r4, #0]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	f7f8 fd1e 	bl	8003e1c <_write>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d102      	bne.n	800b3ea <_write_r+0x1e>
 800b3e4:	6823      	ldr	r3, [r4, #0]
 800b3e6:	b103      	cbz	r3, 800b3ea <_write_r+0x1e>
 800b3e8:	602b      	str	r3, [r5, #0]
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	200010d0 	.word	0x200010d0

0800b3f0 <__register_exitproc>:
 800b3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f4:	4c26      	ldr	r4, [pc, #152]	; (800b490 <__register_exitproc+0xa0>)
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	6820      	ldr	r0, [r4, #0]
 800b3fa:	4698      	mov	r8, r3
 800b3fc:	460f      	mov	r7, r1
 800b3fe:	4691      	mov	r9, r2
 800b400:	f7fe ff4a 	bl	800a298 <__retarget_lock_acquire_recursive>
 800b404:	4b23      	ldr	r3, [pc, #140]	; (800b494 <__register_exitproc+0xa4>)
 800b406:	681d      	ldr	r5, [r3, #0]
 800b408:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800b40c:	b918      	cbnz	r0, 800b416 <__register_exitproc+0x26>
 800b40e:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800b412:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800b416:	6843      	ldr	r3, [r0, #4]
 800b418:	2b1f      	cmp	r3, #31
 800b41a:	dd19      	ble.n	800b450 <__register_exitproc+0x60>
 800b41c:	4b1e      	ldr	r3, [pc, #120]	; (800b498 <__register_exitproc+0xa8>)
 800b41e:	b933      	cbnz	r3, 800b42e <__register_exitproc+0x3e>
 800b420:	6820      	ldr	r0, [r4, #0]
 800b422:	f7fe ff3a 	bl	800a29a <__retarget_lock_release_recursive>
 800b426:	f04f 30ff 	mov.w	r0, #4294967295
 800b42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b42e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b432:	f7fe ff9f 	bl	800a374 <malloc>
 800b436:	2800      	cmp	r0, #0
 800b438:	d0f2      	beq.n	800b420 <__register_exitproc+0x30>
 800b43a:	2200      	movs	r2, #0
 800b43c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800b440:	6042      	str	r2, [r0, #4]
 800b442:	6003      	str	r3, [r0, #0]
 800b444:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800b448:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800b44c:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800b450:	6843      	ldr	r3, [r0, #4]
 800b452:	b19e      	cbz	r6, 800b47c <__register_exitproc+0x8c>
 800b454:	2201      	movs	r2, #1
 800b456:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800b45a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800b45e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800b462:	409a      	lsls	r2, r3
 800b464:	4311      	orrs	r1, r2
 800b466:	2e02      	cmp	r6, #2
 800b468:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800b46c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800b470:	bf02      	ittt	eq
 800b472:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800b476:	430a      	orreq	r2, r1
 800b478:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	3302      	adds	r3, #2
 800b480:	6042      	str	r2, [r0, #4]
 800b482:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800b486:	6820      	ldr	r0, [r4, #0]
 800b488:	f7fe ff07 	bl	800a29a <__retarget_lock_release_recursive>
 800b48c:	2000      	movs	r0, #0
 800b48e:	e7cc      	b.n	800b42a <__register_exitproc+0x3a>
 800b490:	20000470 	.word	0x20000470
 800b494:	0800e978 	.word	0x0800e978
 800b498:	0800a375 	.word	0x0800a375

0800b49c <_calloc_r>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	4351      	muls	r1, r2
 800b4a0:	f7fe ff70 	bl	800a384 <_malloc_r>
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	b198      	cbz	r0, 800b4d0 <_calloc_r+0x34>
 800b4a8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b4ac:	f022 0203 	bic.w	r2, r2, #3
 800b4b0:	3a04      	subs	r2, #4
 800b4b2:	2a24      	cmp	r2, #36	; 0x24
 800b4b4:	d81b      	bhi.n	800b4ee <_calloc_r+0x52>
 800b4b6:	2a13      	cmp	r2, #19
 800b4b8:	d917      	bls.n	800b4ea <_calloc_r+0x4e>
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	2a1b      	cmp	r2, #27
 800b4be:	e9c0 1100 	strd	r1, r1, [r0]
 800b4c2:	d807      	bhi.n	800b4d4 <_calloc_r+0x38>
 800b4c4:	f100 0308 	add.w	r3, r0, #8
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	e9c3 2200 	strd	r2, r2, [r3]
 800b4ce:	609a      	str	r2, [r3, #8]
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	bd10      	pop	{r4, pc}
 800b4d4:	2a24      	cmp	r2, #36	; 0x24
 800b4d6:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800b4da:	bf11      	iteee	ne
 800b4dc:	f100 0310 	addne.w	r3, r0, #16
 800b4e0:	6101      	streq	r1, [r0, #16]
 800b4e2:	f100 0318 	addeq.w	r3, r0, #24
 800b4e6:	6141      	streq	r1, [r0, #20]
 800b4e8:	e7ee      	b.n	800b4c8 <_calloc_r+0x2c>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	e7ec      	b.n	800b4c8 <_calloc_r+0x2c>
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	f7fa fe85 	bl	80061fe <memset>
 800b4f4:	e7ec      	b.n	800b4d0 <_calloc_r+0x34>
	...

0800b4f8 <_close_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	4c05      	ldr	r4, [pc, #20]	; (800b514 <_close_r+0x1c>)
 800b4fe:	4605      	mov	r5, r0
 800b500:	4608      	mov	r0, r1
 800b502:	6023      	str	r3, [r4, #0]
 800b504:	f7f8 fca4 	bl	8003e50 <_close>
 800b508:	1c43      	adds	r3, r0, #1
 800b50a:	d102      	bne.n	800b512 <_close_r+0x1a>
 800b50c:	6823      	ldr	r3, [r4, #0]
 800b50e:	b103      	cbz	r3, 800b512 <_close_r+0x1a>
 800b510:	602b      	str	r3, [r5, #0]
 800b512:	bd38      	pop	{r3, r4, r5, pc}
 800b514:	200010d0 	.word	0x200010d0

0800b518 <_fclose_r>:
 800b518:	b570      	push	{r4, r5, r6, lr}
 800b51a:	4606      	mov	r6, r0
 800b51c:	460c      	mov	r4, r1
 800b51e:	b911      	cbnz	r1, 800b526 <_fclose_r+0xe>
 800b520:	2500      	movs	r5, #0
 800b522:	4628      	mov	r0, r5
 800b524:	bd70      	pop	{r4, r5, r6, pc}
 800b526:	b118      	cbz	r0, 800b530 <_fclose_r+0x18>
 800b528:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b52a:	b90b      	cbnz	r3, 800b530 <_fclose_r+0x18>
 800b52c:	f7fe fbec 	bl	8009d08 <__sinit>
 800b530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b532:	07d8      	lsls	r0, r3, #31
 800b534:	d405      	bmi.n	800b542 <_fclose_r+0x2a>
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	0599      	lsls	r1, r3, #22
 800b53a:	d402      	bmi.n	800b542 <_fclose_r+0x2a>
 800b53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b53e:	f7fe feab 	bl	800a298 <__retarget_lock_acquire_recursive>
 800b542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b546:	b93b      	cbnz	r3, 800b558 <_fclose_r+0x40>
 800b548:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b54a:	f015 0501 	ands.w	r5, r5, #1
 800b54e:	d1e7      	bne.n	800b520 <_fclose_r+0x8>
 800b550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b552:	f7fe fea2 	bl	800a29a <__retarget_lock_release_recursive>
 800b556:	e7e4      	b.n	800b522 <_fclose_r+0xa>
 800b558:	4621      	mov	r1, r4
 800b55a:	4630      	mov	r0, r6
 800b55c:	f7fe fada 	bl	8009b14 <__sflush_r>
 800b560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b562:	4605      	mov	r5, r0
 800b564:	b133      	cbz	r3, 800b574 <_fclose_r+0x5c>
 800b566:	69e1      	ldr	r1, [r4, #28]
 800b568:	4630      	mov	r0, r6
 800b56a:	4798      	blx	r3
 800b56c:	2800      	cmp	r0, #0
 800b56e:	bfb8      	it	lt
 800b570:	f04f 35ff 	movlt.w	r5, #4294967295
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	061a      	lsls	r2, r3, #24
 800b578:	d503      	bpl.n	800b582 <_fclose_r+0x6a>
 800b57a:	6921      	ldr	r1, [r4, #16]
 800b57c:	4630      	mov	r0, r6
 800b57e:	f7fe fc53 	bl	8009e28 <_free_r>
 800b582:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b584:	b141      	cbz	r1, 800b598 <_fclose_r+0x80>
 800b586:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b58a:	4299      	cmp	r1, r3
 800b58c:	d002      	beq.n	800b594 <_fclose_r+0x7c>
 800b58e:	4630      	mov	r0, r6
 800b590:	f7fe fc4a 	bl	8009e28 <_free_r>
 800b594:	2300      	movs	r3, #0
 800b596:	6323      	str	r3, [r4, #48]	; 0x30
 800b598:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b59a:	b121      	cbz	r1, 800b5a6 <_fclose_r+0x8e>
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7fe fc43 	bl	8009e28 <_free_r>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	6463      	str	r3, [r4, #68]	; 0x44
 800b5a6:	f7fe fb97 	bl	8009cd8 <__sfp_lock_acquire>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	81a3      	strh	r3, [r4, #12]
 800b5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5b0:	07db      	lsls	r3, r3, #31
 800b5b2:	d402      	bmi.n	800b5ba <_fclose_r+0xa2>
 800b5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5b6:	f7fe fe70 	bl	800a29a <__retarget_lock_release_recursive>
 800b5ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5bc:	f7fe fe6b 	bl	800a296 <__retarget_lock_close_recursive>
 800b5c0:	f7fe fb90 	bl	8009ce4 <__sfp_lock_release>
 800b5c4:	e7ad      	b.n	800b522 <_fclose_r+0xa>

0800b5c6 <__fputwc>:
 800b5c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5ca:	4680      	mov	r8, r0
 800b5cc:	460e      	mov	r6, r1
 800b5ce:	4614      	mov	r4, r2
 800b5d0:	f000 f886 	bl	800b6e0 <__locale_mb_cur_max>
 800b5d4:	2801      	cmp	r0, #1
 800b5d6:	d11c      	bne.n	800b612 <__fputwc+0x4c>
 800b5d8:	1e73      	subs	r3, r6, #1
 800b5da:	2bfe      	cmp	r3, #254	; 0xfe
 800b5dc:	d819      	bhi.n	800b612 <__fputwc+0x4c>
 800b5de:	4605      	mov	r5, r0
 800b5e0:	f88d 6004 	strb.w	r6, [sp, #4]
 800b5e4:	2700      	movs	r7, #0
 800b5e6:	f10d 0904 	add.w	r9, sp, #4
 800b5ea:	42af      	cmp	r7, r5
 800b5ec:	d020      	beq.n	800b630 <__fputwc+0x6a>
 800b5ee:	68a3      	ldr	r3, [r4, #8]
 800b5f0:	f817 1009 	ldrb.w	r1, [r7, r9]
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	60a3      	str	r3, [r4, #8]
 800b5fa:	da04      	bge.n	800b606 <__fputwc+0x40>
 800b5fc:	69a2      	ldr	r2, [r4, #24]
 800b5fe:	4293      	cmp	r3, r2
 800b600:	db1a      	blt.n	800b638 <__fputwc+0x72>
 800b602:	290a      	cmp	r1, #10
 800b604:	d018      	beq.n	800b638 <__fputwc+0x72>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	1c5a      	adds	r2, r3, #1
 800b60a:	6022      	str	r2, [r4, #0]
 800b60c:	7019      	strb	r1, [r3, #0]
 800b60e:	3701      	adds	r7, #1
 800b610:	e7eb      	b.n	800b5ea <__fputwc+0x24>
 800b612:	4632      	mov	r2, r6
 800b614:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800b618:	a901      	add	r1, sp, #4
 800b61a:	4640      	mov	r0, r8
 800b61c:	f000 f8ee 	bl	800b7fc <_wcrtomb_r>
 800b620:	1c42      	adds	r2, r0, #1
 800b622:	4605      	mov	r5, r0
 800b624:	d1de      	bne.n	800b5e4 <__fputwc+0x1e>
 800b626:	4606      	mov	r6, r0
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b62e:	81a3      	strh	r3, [r4, #12]
 800b630:	4630      	mov	r0, r6
 800b632:	b003      	add	sp, #12
 800b634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b638:	4622      	mov	r2, r4
 800b63a:	4640      	mov	r0, r8
 800b63c:	f000 f894 	bl	800b768 <__swbuf_r>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d1e4      	bne.n	800b60e <__fputwc+0x48>
 800b644:	4606      	mov	r6, r0
 800b646:	e7f3      	b.n	800b630 <__fputwc+0x6a>

0800b648 <_fputwc_r>:
 800b648:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800b64a:	b570      	push	{r4, r5, r6, lr}
 800b64c:	07db      	lsls	r3, r3, #31
 800b64e:	4605      	mov	r5, r0
 800b650:	460e      	mov	r6, r1
 800b652:	4614      	mov	r4, r2
 800b654:	d405      	bmi.n	800b662 <_fputwc_r+0x1a>
 800b656:	8993      	ldrh	r3, [r2, #12]
 800b658:	0598      	lsls	r0, r3, #22
 800b65a:	d402      	bmi.n	800b662 <_fputwc_r+0x1a>
 800b65c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800b65e:	f7fe fe1b 	bl	800a298 <__retarget_lock_acquire_recursive>
 800b662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b666:	0499      	lsls	r1, r3, #18
 800b668:	d406      	bmi.n	800b678 <_fputwc_r+0x30>
 800b66a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b66e:	81a3      	strh	r3, [r4, #12]
 800b670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b672:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b676:	6663      	str	r3, [r4, #100]	; 0x64
 800b678:	4622      	mov	r2, r4
 800b67a:	4628      	mov	r0, r5
 800b67c:	4631      	mov	r1, r6
 800b67e:	f7ff ffa2 	bl	800b5c6 <__fputwc>
 800b682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b684:	4605      	mov	r5, r0
 800b686:	07da      	lsls	r2, r3, #31
 800b688:	d405      	bmi.n	800b696 <_fputwc_r+0x4e>
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	059b      	lsls	r3, r3, #22
 800b68e:	d402      	bmi.n	800b696 <_fputwc_r+0x4e>
 800b690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b692:	f7fe fe02 	bl	800a29a <__retarget_lock_release_recursive>
 800b696:	4628      	mov	r0, r5
 800b698:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b69c <_fstat_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	2300      	movs	r3, #0
 800b6a0:	4c06      	ldr	r4, [pc, #24]	; (800b6bc <_fstat_r+0x20>)
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	4611      	mov	r1, r2
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	f7f8 fbfd 	bl	8003ea8 <_fstat>
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	d102      	bne.n	800b6b8 <_fstat_r+0x1c>
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	b103      	cbz	r3, 800b6b8 <_fstat_r+0x1c>
 800b6b6:	602b      	str	r3, [r5, #0]
 800b6b8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ba:	bf00      	nop
 800b6bc:	200010d0 	.word	0x200010d0

0800b6c0 <_isatty_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	4c05      	ldr	r4, [pc, #20]	; (800b6dc <_isatty_r+0x1c>)
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	4608      	mov	r0, r1
 800b6ca:	6023      	str	r3, [r4, #0]
 800b6cc:	f7f8 fb9a 	bl	8003e04 <_isatty>
 800b6d0:	1c43      	adds	r3, r0, #1
 800b6d2:	d102      	bne.n	800b6da <_isatty_r+0x1a>
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	b103      	cbz	r3, 800b6da <_isatty_r+0x1a>
 800b6d8:	602b      	str	r3, [r5, #0]
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	200010d0 	.word	0x200010d0

0800b6e0 <__locale_mb_cur_max>:
 800b6e0:	4b04      	ldr	r3, [pc, #16]	; (800b6f4 <__locale_mb_cur_max+0x14>)
 800b6e2:	4a05      	ldr	r2, [pc, #20]	; (800b6f8 <__locale_mb_cur_max+0x18>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	bf08      	it	eq
 800b6ec:	4613      	moveq	r3, r2
 800b6ee:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800b6f2:	4770      	bx	lr
 800b6f4:	20000044 	.word	0x20000044
 800b6f8:	20000884 	.word	0x20000884

0800b6fc <_lseek_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4605      	mov	r5, r0
 800b700:	4608      	mov	r0, r1
 800b702:	4611      	mov	r1, r2
 800b704:	2200      	movs	r2, #0
 800b706:	4c05      	ldr	r4, [pc, #20]	; (800b71c <_lseek_r+0x20>)
 800b708:	6022      	str	r2, [r4, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	f7f8 fbac 	bl	8003e68 <_lseek>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d102      	bne.n	800b71a <_lseek_r+0x1e>
 800b714:	6823      	ldr	r3, [r4, #0]
 800b716:	b103      	cbz	r3, 800b71a <_lseek_r+0x1e>
 800b718:	602b      	str	r3, [r5, #0]
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	200010d0 	.word	0x200010d0

0800b720 <__ascii_mbtowc>:
 800b720:	b082      	sub	sp, #8
 800b722:	b901      	cbnz	r1, 800b726 <__ascii_mbtowc+0x6>
 800b724:	a901      	add	r1, sp, #4
 800b726:	b142      	cbz	r2, 800b73a <__ascii_mbtowc+0x1a>
 800b728:	b14b      	cbz	r3, 800b73e <__ascii_mbtowc+0x1e>
 800b72a:	7813      	ldrb	r3, [r2, #0]
 800b72c:	600b      	str	r3, [r1, #0]
 800b72e:	7812      	ldrb	r2, [r2, #0]
 800b730:	1c10      	adds	r0, r2, #0
 800b732:	bf18      	it	ne
 800b734:	2001      	movne	r0, #1
 800b736:	b002      	add	sp, #8
 800b738:	4770      	bx	lr
 800b73a:	4610      	mov	r0, r2
 800b73c:	e7fb      	b.n	800b736 <__ascii_mbtowc+0x16>
 800b73e:	f06f 0001 	mvn.w	r0, #1
 800b742:	e7f8      	b.n	800b736 <__ascii_mbtowc+0x16>

0800b744 <_read_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4605      	mov	r5, r0
 800b748:	4608      	mov	r0, r1
 800b74a:	4611      	mov	r1, r2
 800b74c:	2200      	movs	r2, #0
 800b74e:	4c05      	ldr	r4, [pc, #20]	; (800b764 <_read_r+0x20>)
 800b750:	6022      	str	r2, [r4, #0]
 800b752:	461a      	mov	r2, r3
 800b754:	f7f8 fb90 	bl	8003e78 <_read>
 800b758:	1c43      	adds	r3, r0, #1
 800b75a:	d102      	bne.n	800b762 <_read_r+0x1e>
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	b103      	cbz	r3, 800b762 <_read_r+0x1e>
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	bd38      	pop	{r3, r4, r5, pc}
 800b764:	200010d0 	.word	0x200010d0

0800b768 <__swbuf_r>:
 800b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b76a:	460d      	mov	r5, r1
 800b76c:	4614      	mov	r4, r2
 800b76e:	4606      	mov	r6, r0
 800b770:	b118      	cbz	r0, 800b77a <__swbuf_r+0x12>
 800b772:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b774:	b90b      	cbnz	r3, 800b77a <__swbuf_r+0x12>
 800b776:	f7fe fac7 	bl	8009d08 <__sinit>
 800b77a:	69a3      	ldr	r3, [r4, #24]
 800b77c:	60a3      	str	r3, [r4, #8]
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	0719      	lsls	r1, r3, #28
 800b782:	d528      	bpl.n	800b7d6 <__swbuf_r+0x6e>
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	b333      	cbz	r3, 800b7d6 <__swbuf_r+0x6e>
 800b788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b78c:	b2ed      	uxtb	r5, r5
 800b78e:	049a      	lsls	r2, r3, #18
 800b790:	462f      	mov	r7, r5
 800b792:	d52a      	bpl.n	800b7ea <__swbuf_r+0x82>
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	6820      	ldr	r0, [r4, #0]
 800b798:	1ac0      	subs	r0, r0, r3
 800b79a:	6963      	ldr	r3, [r4, #20]
 800b79c:	4283      	cmp	r3, r0
 800b79e:	dc04      	bgt.n	800b7aa <__swbuf_r+0x42>
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	f7fe fa44 	bl	8009c30 <_fflush_r>
 800b7a8:	b9d8      	cbnz	r0, 800b7e2 <__swbuf_r+0x7a>
 800b7aa:	68a3      	ldr	r3, [r4, #8]
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	60a3      	str	r3, [r4, #8]
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	1c5a      	adds	r2, r3, #1
 800b7b6:	6022      	str	r2, [r4, #0]
 800b7b8:	701d      	strb	r5, [r3, #0]
 800b7ba:	6963      	ldr	r3, [r4, #20]
 800b7bc:	4283      	cmp	r3, r0
 800b7be:	d004      	beq.n	800b7ca <__swbuf_r+0x62>
 800b7c0:	89a3      	ldrh	r3, [r4, #12]
 800b7c2:	07db      	lsls	r3, r3, #31
 800b7c4:	d50f      	bpl.n	800b7e6 <__swbuf_r+0x7e>
 800b7c6:	2d0a      	cmp	r5, #10
 800b7c8:	d10d      	bne.n	800b7e6 <__swbuf_r+0x7e>
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f7fe fa2f 	bl	8009c30 <_fflush_r>
 800b7d2:	b140      	cbz	r0, 800b7e6 <__swbuf_r+0x7e>
 800b7d4:	e005      	b.n	800b7e2 <__swbuf_r+0x7a>
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f7fd fb01 	bl	8008de0 <__swsetup_r>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d0d2      	beq.n	800b788 <__swbuf_r+0x20>
 800b7e2:	f04f 37ff 	mov.w	r7, #4294967295
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b7ee:	81a3      	strh	r3, [r4, #12]
 800b7f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7f6:	6663      	str	r3, [r4, #100]	; 0x64
 800b7f8:	e7cc      	b.n	800b794 <__swbuf_r+0x2c>
	...

0800b7fc <_wcrtomb_r>:
 800b7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7fe:	4c0f      	ldr	r4, [pc, #60]	; (800b83c <_wcrtomb_r+0x40>)
 800b800:	b085      	sub	sp, #20
 800b802:	6824      	ldr	r4, [r4, #0]
 800b804:	4605      	mov	r5, r0
 800b806:	461e      	mov	r6, r3
 800b808:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800b80a:	b981      	cbnz	r1, 800b82e <_wcrtomb_r+0x32>
 800b80c:	4a0c      	ldr	r2, [pc, #48]	; (800b840 <_wcrtomb_r+0x44>)
 800b80e:	2c00      	cmp	r4, #0
 800b810:	bf08      	it	eq
 800b812:	4614      	moveq	r4, r2
 800b814:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800b818:	460a      	mov	r2, r1
 800b81a:	a901      	add	r1, sp, #4
 800b81c:	47a0      	blx	r4
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	bf01      	itttt	eq
 800b822:	2300      	moveq	r3, #0
 800b824:	6033      	streq	r3, [r6, #0]
 800b826:	238a      	moveq	r3, #138	; 0x8a
 800b828:	602b      	streq	r3, [r5, #0]
 800b82a:	b005      	add	sp, #20
 800b82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b82e:	4f04      	ldr	r7, [pc, #16]	; (800b840 <_wcrtomb_r+0x44>)
 800b830:	2c00      	cmp	r4, #0
 800b832:	bf08      	it	eq
 800b834:	463c      	moveq	r4, r7
 800b836:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800b83a:	e7ef      	b.n	800b81c <_wcrtomb_r+0x20>
 800b83c:	20000044 	.word	0x20000044
 800b840:	20000884 	.word	0x20000884

0800b844 <__ascii_wctomb>:
 800b844:	b149      	cbz	r1, 800b85a <__ascii_wctomb+0x16>
 800b846:	2aff      	cmp	r2, #255	; 0xff
 800b848:	bf8b      	itete	hi
 800b84a:	238a      	movhi	r3, #138	; 0x8a
 800b84c:	700a      	strbls	r2, [r1, #0]
 800b84e:	6003      	strhi	r3, [r0, #0]
 800b850:	2001      	movls	r0, #1
 800b852:	bf88      	it	hi
 800b854:	f04f 30ff 	movhi.w	r0, #4294967295
 800b858:	4770      	bx	lr
 800b85a:	4608      	mov	r0, r1
 800b85c:	4770      	bx	lr
	...

0800b860 <asin>:
 800b860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b864:	b08b      	sub	sp, #44	; 0x2c
 800b866:	4604      	mov	r4, r0
 800b868:	460d      	mov	r5, r1
 800b86a:	f000 f851 	bl	800b910 <__ieee754_asin>
 800b86e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800b904 <asin+0xa4>
 800b872:	4606      	mov	r6, r0
 800b874:	f998 3000 	ldrsb.w	r3, [r8]
 800b878:	460f      	mov	r7, r1
 800b87a:	3301      	adds	r3, #1
 800b87c:	d036      	beq.n	800b8ec <asin+0x8c>
 800b87e:	4622      	mov	r2, r4
 800b880:	462b      	mov	r3, r5
 800b882:	4620      	mov	r0, r4
 800b884:	4629      	mov	r1, r5
 800b886:	f7f5 f8c1 	bl	8000a0c <__aeabi_dcmpun>
 800b88a:	4681      	mov	r9, r0
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d12d      	bne.n	800b8ec <asin+0x8c>
 800b890:	4620      	mov	r0, r4
 800b892:	4629      	mov	r1, r5
 800b894:	f000 fd4e 	bl	800c334 <fabs>
 800b898:	2200      	movs	r2, #0
 800b89a:	4b17      	ldr	r3, [pc, #92]	; (800b8f8 <asin+0x98>)
 800b89c:	f7f5 f8ac 	bl	80009f8 <__aeabi_dcmpgt>
 800b8a0:	b320      	cbz	r0, 800b8ec <asin+0x8c>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	4b15      	ldr	r3, [pc, #84]	; (800b8fc <asin+0x9c>)
 800b8a8:	4815      	ldr	r0, [pc, #84]	; (800b900 <asin+0xa0>)
 800b8aa:	9301      	str	r3, [sp, #4]
 800b8ac:	f8cd 9020 	str.w	r9, [sp, #32]
 800b8b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b8b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b8b8:	f000 fd42 	bl	800c340 <nan>
 800b8bc:	f998 3000 	ldrsb.w	r3, [r8]
 800b8c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d104      	bne.n	800b8d2 <asin+0x72>
 800b8c8:	f7fa fc60 	bl	800618c <__errno>
 800b8cc:	2321      	movs	r3, #33	; 0x21
 800b8ce:	6003      	str	r3, [r0, #0]
 800b8d0:	e004      	b.n	800b8dc <asin+0x7c>
 800b8d2:	4668      	mov	r0, sp
 800b8d4:	f000 fd32 	bl	800c33c <matherr>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d0f5      	beq.n	800b8c8 <asin+0x68>
 800b8dc:	9b08      	ldr	r3, [sp, #32]
 800b8de:	b11b      	cbz	r3, 800b8e8 <asin+0x88>
 800b8e0:	f7fa fc54 	bl	800618c <__errno>
 800b8e4:	9b08      	ldr	r3, [sp, #32]
 800b8e6:	6003      	str	r3, [r0, #0]
 800b8e8:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	4639      	mov	r1, r7
 800b8f0:	b00b      	add	sp, #44	; 0x2c
 800b8f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8f6:	bf00      	nop
 800b8f8:	3ff00000 	.word	0x3ff00000
 800b8fc:	0800ec05 	.word	0x0800ec05
 800b900:	0800e959 	.word	0x0800e959
 800b904:	200009f0 	.word	0x200009f0

0800b908 <atan2>:
 800b908:	f000 b9fe 	b.w	800bd08 <__ieee754_atan2>
 800b90c:	0000      	movs	r0, r0
	...

0800b910 <__ieee754_asin>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	4bc4      	ldr	r3, [pc, #784]	; (800bc28 <__ieee754_asin+0x318>)
 800b916:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b91a:	b087      	sub	sp, #28
 800b91c:	429f      	cmp	r7, r3
 800b91e:	4604      	mov	r4, r0
 800b920:	460d      	mov	r5, r1
 800b922:	9103      	str	r1, [sp, #12]
 800b924:	dd2a      	ble.n	800b97c <__ieee754_asin+0x6c>
 800b926:	4603      	mov	r3, r0
 800b928:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800b92c:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800b930:	433b      	orrs	r3, r7
 800b932:	d114      	bne.n	800b95e <__ieee754_asin+0x4e>
 800b934:	a3a2      	add	r3, pc, #648	; (adr r3, 800bbc0 <__ieee754_asin+0x2b0>)
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	f7f4 fdcd 	bl	80004d8 <__aeabi_dmul>
 800b93e:	a3a2      	add	r3, pc, #648	; (adr r3, 800bbc8 <__ieee754_asin+0x2b8>)
 800b940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b944:	4606      	mov	r6, r0
 800b946:	460f      	mov	r7, r1
 800b948:	4620      	mov	r0, r4
 800b94a:	4629      	mov	r1, r5
 800b94c:	f7f4 fdc4 	bl	80004d8 <__aeabi_dmul>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f7f4 fc08 	bl	800016c <__adddf3>
 800b95c:	e007      	b.n	800b96e <__ieee754_asin+0x5e>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	f7f4 fc01 	bl	8000168 <__aeabi_dsub>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	f7f4 fedf 	bl	800072c <__aeabi_ddiv>
 800b96e:	4604      	mov	r4, r0
 800b970:	460d      	mov	r5, r1
 800b972:	4620      	mov	r0, r4
 800b974:	4629      	mov	r1, r5
 800b976:	b007      	add	sp, #28
 800b978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97c:	4bab      	ldr	r3, [pc, #684]	; (800bc2c <__ieee754_asin+0x31c>)
 800b97e:	429f      	cmp	r7, r3
 800b980:	dc0e      	bgt.n	800b9a0 <__ieee754_asin+0x90>
 800b982:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800b986:	f280 80ab 	bge.w	800bae0 <__ieee754_asin+0x1d0>
 800b98a:	a391      	add	r3, pc, #580	; (adr r3, 800bbd0 <__ieee754_asin+0x2c0>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 fbec 	bl	800016c <__adddf3>
 800b994:	2200      	movs	r2, #0
 800b996:	4ba6      	ldr	r3, [pc, #664]	; (800bc30 <__ieee754_asin+0x320>)
 800b998:	f7f5 f82e 	bl	80009f8 <__aeabi_dcmpgt>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d1e8      	bne.n	800b972 <__ieee754_asin+0x62>
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	f000 fcc6 	bl	800c334 <fabs>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	49a0      	ldr	r1, [pc, #640]	; (800bc30 <__ieee754_asin+0x320>)
 800b9b0:	f7f4 fbda 	bl	8000168 <__aeabi_dsub>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	4b9f      	ldr	r3, [pc, #636]	; (800bc34 <__ieee754_asin+0x324>)
 800b9b8:	f7f4 fd8e 	bl	80004d8 <__aeabi_dmul>
 800b9bc:	a386      	add	r3, pc, #536	; (adr r3, 800bbd8 <__ieee754_asin+0x2c8>)
 800b9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	460d      	mov	r5, r1
 800b9c6:	f7f4 fd87 	bl	80004d8 <__aeabi_dmul>
 800b9ca:	a385      	add	r3, pc, #532	; (adr r3, 800bbe0 <__ieee754_asin+0x2d0>)
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f7f4 fbcc 	bl	800016c <__adddf3>
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	462b      	mov	r3, r5
 800b9d8:	f7f4 fd7e 	bl	80004d8 <__aeabi_dmul>
 800b9dc:	a382      	add	r3, pc, #520	; (adr r3, 800bbe8 <__ieee754_asin+0x2d8>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f7f4 fbc1 	bl	8000168 <__aeabi_dsub>
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	462b      	mov	r3, r5
 800b9ea:	f7f4 fd75 	bl	80004d8 <__aeabi_dmul>
 800b9ee:	a380      	add	r3, pc, #512	; (adr r3, 800bbf0 <__ieee754_asin+0x2e0>)
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f7f4 fbba 	bl	800016c <__adddf3>
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	462b      	mov	r3, r5
 800b9fc:	f7f4 fd6c 	bl	80004d8 <__aeabi_dmul>
 800ba00:	a37d      	add	r3, pc, #500	; (adr r3, 800bbf8 <__ieee754_asin+0x2e8>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	f7f4 fbaf 	bl	8000168 <__aeabi_dsub>
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	462b      	mov	r3, r5
 800ba0e:	f7f4 fd63 	bl	80004d8 <__aeabi_dmul>
 800ba12:	a37b      	add	r3, pc, #492	; (adr r3, 800bc00 <__ieee754_asin+0x2f0>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f7f4 fba8 	bl	800016c <__adddf3>
 800ba1c:	4622      	mov	r2, r4
 800ba1e:	462b      	mov	r3, r5
 800ba20:	f7f4 fd5a 	bl	80004d8 <__aeabi_dmul>
 800ba24:	a378      	add	r3, pc, #480	; (adr r3, 800bc08 <__ieee754_asin+0x2f8>)
 800ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2a:	4680      	mov	r8, r0
 800ba2c:	4689      	mov	r9, r1
 800ba2e:	4620      	mov	r0, r4
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7f4 fd51 	bl	80004d8 <__aeabi_dmul>
 800ba36:	a376      	add	r3, pc, #472	; (adr r3, 800bc10 <__ieee754_asin+0x300>)
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	f7f4 fb94 	bl	8000168 <__aeabi_dsub>
 800ba40:	4622      	mov	r2, r4
 800ba42:	462b      	mov	r3, r5
 800ba44:	f7f4 fd48 	bl	80004d8 <__aeabi_dmul>
 800ba48:	a373      	add	r3, pc, #460	; (adr r3, 800bc18 <__ieee754_asin+0x308>)
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	f7f4 fb8d 	bl	800016c <__adddf3>
 800ba52:	4622      	mov	r2, r4
 800ba54:	462b      	mov	r3, r5
 800ba56:	f7f4 fd3f 	bl	80004d8 <__aeabi_dmul>
 800ba5a:	a371      	add	r3, pc, #452	; (adr r3, 800bc20 <__ieee754_asin+0x310>)
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	f7f4 fb82 	bl	8000168 <__aeabi_dsub>
 800ba64:	4622      	mov	r2, r4
 800ba66:	462b      	mov	r3, r5
 800ba68:	f7f4 fd36 	bl	80004d8 <__aeabi_dmul>
 800ba6c:	4b70      	ldr	r3, [pc, #448]	; (800bc30 <__ieee754_asin+0x320>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f7f4 fb7c 	bl	800016c <__adddf3>
 800ba74:	e9cd 0100 	strd	r0, r1, [sp]
 800ba78:	4620      	mov	r0, r4
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	f000 fa22 	bl	800bec4 <__ieee754_sqrt>
 800ba80:	4b6d      	ldr	r3, [pc, #436]	; (800bc38 <__ieee754_asin+0x328>)
 800ba82:	4682      	mov	sl, r0
 800ba84:	429f      	cmp	r7, r3
 800ba86:	468b      	mov	fp, r1
 800ba88:	f340 80d8 	ble.w	800bc3c <__ieee754_asin+0x32c>
 800ba8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba90:	4640      	mov	r0, r8
 800ba92:	4649      	mov	r1, r9
 800ba94:	f7f4 fe4a 	bl	800072c <__aeabi_ddiv>
 800ba98:	4652      	mov	r2, sl
 800ba9a:	465b      	mov	r3, fp
 800ba9c:	f7f4 fd1c 	bl	80004d8 <__aeabi_dmul>
 800baa0:	4652      	mov	r2, sl
 800baa2:	465b      	mov	r3, fp
 800baa4:	f7f4 fb62 	bl	800016c <__adddf3>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	f7f4 fb5e 	bl	800016c <__adddf3>
 800bab0:	a345      	add	r3, pc, #276	; (adr r3, 800bbc8 <__ieee754_asin+0x2b8>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f7f4 fb57 	bl	8000168 <__aeabi_dsub>
 800baba:	4602      	mov	r2, r0
 800babc:	460b      	mov	r3, r1
 800babe:	a140      	add	r1, pc, #256	; (adr r1, 800bbc0 <__ieee754_asin+0x2b0>)
 800bac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bac4:	f7f4 fb50 	bl	8000168 <__aeabi_dsub>
 800bac8:	9b03      	ldr	r3, [sp, #12]
 800baca:	4604      	mov	r4, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	bfdc      	itt	le
 800bad0:	4602      	movle	r2, r0
 800bad2:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800bad6:	460d      	mov	r5, r1
 800bad8:	bfdc      	itt	le
 800bada:	4614      	movle	r4, r2
 800badc:	461d      	movle	r5, r3
 800bade:	e748      	b.n	800b972 <__ieee754_asin+0x62>
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	f7f4 fcf8 	bl	80004d8 <__aeabi_dmul>
 800bae8:	a33b      	add	r3, pc, #236	; (adr r3, 800bbd8 <__ieee754_asin+0x2c8>)
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	4606      	mov	r6, r0
 800baf0:	460f      	mov	r7, r1
 800baf2:	f7f4 fcf1 	bl	80004d8 <__aeabi_dmul>
 800baf6:	a33a      	add	r3, pc, #232	; (adr r3, 800bbe0 <__ieee754_asin+0x2d0>)
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	f7f4 fb36 	bl	800016c <__adddf3>
 800bb00:	4632      	mov	r2, r6
 800bb02:	463b      	mov	r3, r7
 800bb04:	f7f4 fce8 	bl	80004d8 <__aeabi_dmul>
 800bb08:	a337      	add	r3, pc, #220	; (adr r3, 800bbe8 <__ieee754_asin+0x2d8>)
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f7f4 fb2b 	bl	8000168 <__aeabi_dsub>
 800bb12:	4632      	mov	r2, r6
 800bb14:	463b      	mov	r3, r7
 800bb16:	f7f4 fcdf 	bl	80004d8 <__aeabi_dmul>
 800bb1a:	a335      	add	r3, pc, #212	; (adr r3, 800bbf0 <__ieee754_asin+0x2e0>)
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	f7f4 fb24 	bl	800016c <__adddf3>
 800bb24:	4632      	mov	r2, r6
 800bb26:	463b      	mov	r3, r7
 800bb28:	f7f4 fcd6 	bl	80004d8 <__aeabi_dmul>
 800bb2c:	a332      	add	r3, pc, #200	; (adr r3, 800bbf8 <__ieee754_asin+0x2e8>)
 800bb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb32:	f7f4 fb19 	bl	8000168 <__aeabi_dsub>
 800bb36:	4632      	mov	r2, r6
 800bb38:	463b      	mov	r3, r7
 800bb3a:	f7f4 fccd 	bl	80004d8 <__aeabi_dmul>
 800bb3e:	a330      	add	r3, pc, #192	; (adr r3, 800bc00 <__ieee754_asin+0x2f0>)
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	f7f4 fb12 	bl	800016c <__adddf3>
 800bb48:	4632      	mov	r2, r6
 800bb4a:	463b      	mov	r3, r7
 800bb4c:	f7f4 fcc4 	bl	80004d8 <__aeabi_dmul>
 800bb50:	a32d      	add	r3, pc, #180	; (adr r3, 800bc08 <__ieee754_asin+0x2f8>)
 800bb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb56:	4680      	mov	r8, r0
 800bb58:	4689      	mov	r9, r1
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	f7f4 fcbb 	bl	80004d8 <__aeabi_dmul>
 800bb62:	a32b      	add	r3, pc, #172	; (adr r3, 800bc10 <__ieee754_asin+0x300>)
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	f7f4 fafe 	bl	8000168 <__aeabi_dsub>
 800bb6c:	4632      	mov	r2, r6
 800bb6e:	463b      	mov	r3, r7
 800bb70:	f7f4 fcb2 	bl	80004d8 <__aeabi_dmul>
 800bb74:	a328      	add	r3, pc, #160	; (adr r3, 800bc18 <__ieee754_asin+0x308>)
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	f7f4 faf7 	bl	800016c <__adddf3>
 800bb7e:	4632      	mov	r2, r6
 800bb80:	463b      	mov	r3, r7
 800bb82:	f7f4 fca9 	bl	80004d8 <__aeabi_dmul>
 800bb86:	a326      	add	r3, pc, #152	; (adr r3, 800bc20 <__ieee754_asin+0x310>)
 800bb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8c:	f7f4 faec 	bl	8000168 <__aeabi_dsub>
 800bb90:	4632      	mov	r2, r6
 800bb92:	463b      	mov	r3, r7
 800bb94:	f7f4 fca0 	bl	80004d8 <__aeabi_dmul>
 800bb98:	2200      	movs	r2, #0
 800bb9a:	4b25      	ldr	r3, [pc, #148]	; (800bc30 <__ieee754_asin+0x320>)
 800bb9c:	f7f4 fae6 	bl	800016c <__adddf3>
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	4640      	mov	r0, r8
 800bba6:	4649      	mov	r1, r9
 800bba8:	f7f4 fdc0 	bl	800072c <__aeabi_ddiv>
 800bbac:	4622      	mov	r2, r4
 800bbae:	462b      	mov	r3, r5
 800bbb0:	f7f4 fc92 	bl	80004d8 <__aeabi_dmul>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4620      	mov	r0, r4
 800bbba:	4629      	mov	r1, r5
 800bbbc:	e6cc      	b.n	800b958 <__ieee754_asin+0x48>
 800bbbe:	bf00      	nop
 800bbc0:	54442d18 	.word	0x54442d18
 800bbc4:	3ff921fb 	.word	0x3ff921fb
 800bbc8:	33145c07 	.word	0x33145c07
 800bbcc:	3c91a626 	.word	0x3c91a626
 800bbd0:	8800759c 	.word	0x8800759c
 800bbd4:	7e37e43c 	.word	0x7e37e43c
 800bbd8:	0dfdf709 	.word	0x0dfdf709
 800bbdc:	3f023de1 	.word	0x3f023de1
 800bbe0:	7501b288 	.word	0x7501b288
 800bbe4:	3f49efe0 	.word	0x3f49efe0
 800bbe8:	b5688f3b 	.word	0xb5688f3b
 800bbec:	3fa48228 	.word	0x3fa48228
 800bbf0:	0e884455 	.word	0x0e884455
 800bbf4:	3fc9c155 	.word	0x3fc9c155
 800bbf8:	03eb6f7d 	.word	0x03eb6f7d
 800bbfc:	3fd4d612 	.word	0x3fd4d612
 800bc00:	55555555 	.word	0x55555555
 800bc04:	3fc55555 	.word	0x3fc55555
 800bc08:	b12e9282 	.word	0xb12e9282
 800bc0c:	3fb3b8c5 	.word	0x3fb3b8c5
 800bc10:	1b8d0159 	.word	0x1b8d0159
 800bc14:	3fe6066c 	.word	0x3fe6066c
 800bc18:	9c598ac8 	.word	0x9c598ac8
 800bc1c:	40002ae5 	.word	0x40002ae5
 800bc20:	1c8a2d4b 	.word	0x1c8a2d4b
 800bc24:	40033a27 	.word	0x40033a27
 800bc28:	3fefffff 	.word	0x3fefffff
 800bc2c:	3fdfffff 	.word	0x3fdfffff
 800bc30:	3ff00000 	.word	0x3ff00000
 800bc34:	3fe00000 	.word	0x3fe00000
 800bc38:	3fef3332 	.word	0x3fef3332
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	460f      	mov	r7, r1
 800bc42:	f7f4 fa93 	bl	800016c <__adddf3>
 800bc46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc4e:	4640      	mov	r0, r8
 800bc50:	4649      	mov	r1, r9
 800bc52:	f7f4 fd6b 	bl	800072c <__aeabi_ddiv>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc5e:	f7f4 fc3b 	bl	80004d8 <__aeabi_dmul>
 800bc62:	2600      	movs	r6, #0
 800bc64:	4680      	mov	r8, r0
 800bc66:	4689      	mov	r9, r1
 800bc68:	4632      	mov	r2, r6
 800bc6a:	465b      	mov	r3, fp
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	4659      	mov	r1, fp
 800bc70:	f7f4 fc32 	bl	80004d8 <__aeabi_dmul>
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	4620      	mov	r0, r4
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	f7f4 fa74 	bl	8000168 <__aeabi_dsub>
 800bc80:	4632      	mov	r2, r6
 800bc82:	4604      	mov	r4, r0
 800bc84:	460d      	mov	r5, r1
 800bc86:	465b      	mov	r3, fp
 800bc88:	4650      	mov	r0, sl
 800bc8a:	4659      	mov	r1, fp
 800bc8c:	f7f4 fa6e 	bl	800016c <__adddf3>
 800bc90:	4602      	mov	r2, r0
 800bc92:	460b      	mov	r3, r1
 800bc94:	4620      	mov	r0, r4
 800bc96:	4629      	mov	r1, r5
 800bc98:	f7f4 fd48 	bl	800072c <__aeabi_ddiv>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	f7f4 fa64 	bl	800016c <__adddf3>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	a113      	add	r1, pc, #76	; (adr r1, 800bcf8 <__ieee754_asin+0x3e8>)
 800bcaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcae:	f7f4 fa5b 	bl	8000168 <__aeabi_dsub>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	4649      	mov	r1, r9
 800bcba:	f7f4 fa55 	bl	8000168 <__aeabi_dsub>
 800bcbe:	4632      	mov	r2, r6
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	460d      	mov	r5, r1
 800bcc4:	465b      	mov	r3, fp
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	4639      	mov	r1, r7
 800bcca:	f7f4 fa4f 	bl	800016c <__adddf3>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	a10b      	add	r1, pc, #44	; (adr r1, 800bd00 <__ieee754_asin+0x3f0>)
 800bcd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd8:	f7f4 fa46 	bl	8000168 <__aeabi_dsub>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4620      	mov	r0, r4
 800bce2:	4629      	mov	r1, r5
 800bce4:	f7f4 fa40 	bl	8000168 <__aeabi_dsub>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	a104      	add	r1, pc, #16	; (adr r1, 800bd00 <__ieee754_asin+0x3f0>)
 800bcee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcf2:	e6e7      	b.n	800bac4 <__ieee754_asin+0x1b4>
 800bcf4:	f3af 8000 	nop.w
 800bcf8:	33145c07 	.word	0x33145c07
 800bcfc:	3c91a626 	.word	0x3c91a626
 800bd00:	54442d18 	.word	0x54442d18
 800bd04:	3fe921fb 	.word	0x3fe921fb

0800bd08 <__ieee754_atan2>:
 800bd08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	4256      	negs	r6, r2
 800bd0e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800bd12:	4316      	orrs	r6, r2
 800bd14:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800bec0 <__ieee754_atan2+0x1b8>
 800bd18:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800bd1c:	454e      	cmp	r6, r9
 800bd1e:	4604      	mov	r4, r0
 800bd20:	460d      	mov	r5, r1
 800bd22:	469e      	mov	lr, r3
 800bd24:	d808      	bhi.n	800bd38 <__ieee754_atan2+0x30>
 800bd26:	4246      	negs	r6, r0
 800bd28:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800bd2c:	4306      	orrs	r6, r0
 800bd2e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800bd32:	454e      	cmp	r6, r9
 800bd34:	4688      	mov	r8, r1
 800bd36:	d906      	bls.n	800bd46 <__ieee754_atan2+0x3e>
 800bd38:	4620      	mov	r0, r4
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	f7f4 fa16 	bl	800016c <__adddf3>
 800bd40:	4604      	mov	r4, r0
 800bd42:	460d      	mov	r5, r1
 800bd44:	e030      	b.n	800bda8 <__ieee754_atan2+0xa0>
 800bd46:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800bd4a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800bd4e:	4316      	orrs	r6, r2
 800bd50:	d103      	bne.n	800bd5a <__ieee754_atan2+0x52>
 800bd52:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd56:	f000 b963 	b.w	800c020 <atan>
 800bd5a:	179e      	asrs	r6, r3, #30
 800bd5c:	f006 0602 	and.w	r6, r6, #2
 800bd60:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800bd64:	ea57 0100 	orrs.w	r1, r7, r0
 800bd68:	d107      	bne.n	800bd7a <__ieee754_atan2+0x72>
 800bd6a:	2e02      	cmp	r6, #2
 800bd6c:	d079      	beq.n	800be62 <__ieee754_atan2+0x15a>
 800bd6e:	2e03      	cmp	r6, #3
 800bd70:	d11a      	bne.n	800bda8 <__ieee754_atan2+0xa0>
 800bd72:	a541      	add	r5, pc, #260	; (adr r5, 800be78 <__ieee754_atan2+0x170>)
 800bd74:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd78:	e016      	b.n	800bda8 <__ieee754_atan2+0xa0>
 800bd7a:	ea5c 0102 	orrs.w	r1, ip, r2
 800bd7e:	d106      	bne.n	800bd8e <__ieee754_atan2+0x86>
 800bd80:	f1b8 0f00 	cmp.w	r8, #0
 800bd84:	da71      	bge.n	800be6a <__ieee754_atan2+0x162>
 800bd86:	a53e      	add	r5, pc, #248	; (adr r5, 800be80 <__ieee754_atan2+0x178>)
 800bd88:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd8c:	e00c      	b.n	800bda8 <__ieee754_atan2+0xa0>
 800bd8e:	45cc      	cmp	ip, r9
 800bd90:	d123      	bne.n	800bdda <__ieee754_atan2+0xd2>
 800bd92:	4567      	cmp	r7, ip
 800bd94:	d114      	bne.n	800bdc0 <__ieee754_atan2+0xb8>
 800bd96:	2e02      	cmp	r6, #2
 800bd98:	d00a      	beq.n	800bdb0 <__ieee754_atan2+0xa8>
 800bd9a:	2e03      	cmp	r6, #3
 800bd9c:	d00c      	beq.n	800bdb8 <__ieee754_atan2+0xb0>
 800bd9e:	2e01      	cmp	r6, #1
 800bda0:	d15b      	bne.n	800be5a <__ieee754_atan2+0x152>
 800bda2:	a539      	add	r5, pc, #228	; (adr r5, 800be88 <__ieee754_atan2+0x180>)
 800bda4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bda8:	4620      	mov	r0, r4
 800bdaa:	4629      	mov	r1, r5
 800bdac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb0:	a537      	add	r5, pc, #220	; (adr r5, 800be90 <__ieee754_atan2+0x188>)
 800bdb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bdb6:	e7f7      	b.n	800bda8 <__ieee754_atan2+0xa0>
 800bdb8:	a537      	add	r5, pc, #220	; (adr r5, 800be98 <__ieee754_atan2+0x190>)
 800bdba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bdbe:	e7f3      	b.n	800bda8 <__ieee754_atan2+0xa0>
 800bdc0:	2e02      	cmp	r6, #2
 800bdc2:	d04e      	beq.n	800be62 <__ieee754_atan2+0x15a>
 800bdc4:	2e03      	cmp	r6, #3
 800bdc6:	d0d4      	beq.n	800bd72 <__ieee754_atan2+0x6a>
 800bdc8:	2e01      	cmp	r6, #1
 800bdca:	f04f 0400 	mov.w	r4, #0
 800bdce:	d102      	bne.n	800bdd6 <__ieee754_atan2+0xce>
 800bdd0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800bdd4:	e7e8      	b.n	800bda8 <__ieee754_atan2+0xa0>
 800bdd6:	2500      	movs	r5, #0
 800bdd8:	e7e6      	b.n	800bda8 <__ieee754_atan2+0xa0>
 800bdda:	454f      	cmp	r7, r9
 800bddc:	d0d0      	beq.n	800bd80 <__ieee754_atan2+0x78>
 800bdde:	eba7 070c 	sub.w	r7, r7, ip
 800bde2:	153f      	asrs	r7, r7, #20
 800bde4:	2f3c      	cmp	r7, #60	; 0x3c
 800bde6:	dc1e      	bgt.n	800be26 <__ieee754_atan2+0x11e>
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	da01      	bge.n	800bdf0 <__ieee754_atan2+0xe8>
 800bdec:	373c      	adds	r7, #60	; 0x3c
 800bdee:	db1e      	blt.n	800be2e <__ieee754_atan2+0x126>
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	f7f4 fc9a 	bl	800072c <__aeabi_ddiv>
 800bdf8:	f000 fa9c 	bl	800c334 <fabs>
 800bdfc:	f000 f910 	bl	800c020 <atan>
 800be00:	4604      	mov	r4, r0
 800be02:	460d      	mov	r5, r1
 800be04:	2e01      	cmp	r6, #1
 800be06:	d015      	beq.n	800be34 <__ieee754_atan2+0x12c>
 800be08:	2e02      	cmp	r6, #2
 800be0a:	d017      	beq.n	800be3c <__ieee754_atan2+0x134>
 800be0c:	2e00      	cmp	r6, #0
 800be0e:	d0cb      	beq.n	800bda8 <__ieee754_atan2+0xa0>
 800be10:	a323      	add	r3, pc, #140	; (adr r3, 800bea0 <__ieee754_atan2+0x198>)
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	4620      	mov	r0, r4
 800be18:	4629      	mov	r1, r5
 800be1a:	f7f4 f9a5 	bl	8000168 <__aeabi_dsub>
 800be1e:	a322      	add	r3, pc, #136	; (adr r3, 800bea8 <__ieee754_atan2+0x1a0>)
 800be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be24:	e016      	b.n	800be54 <__ieee754_atan2+0x14c>
 800be26:	a522      	add	r5, pc, #136	; (adr r5, 800beb0 <__ieee754_atan2+0x1a8>)
 800be28:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be2c:	e7ea      	b.n	800be04 <__ieee754_atan2+0xfc>
 800be2e:	2400      	movs	r4, #0
 800be30:	2500      	movs	r5, #0
 800be32:	e7e7      	b.n	800be04 <__ieee754_atan2+0xfc>
 800be34:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800be38:	461d      	mov	r5, r3
 800be3a:	e7b5      	b.n	800bda8 <__ieee754_atan2+0xa0>
 800be3c:	a318      	add	r3, pc, #96	; (adr r3, 800bea0 <__ieee754_atan2+0x198>)
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	4620      	mov	r0, r4
 800be44:	4629      	mov	r1, r5
 800be46:	f7f4 f98f 	bl	8000168 <__aeabi_dsub>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	a116      	add	r1, pc, #88	; (adr r1, 800bea8 <__ieee754_atan2+0x1a0>)
 800be50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be54:	f7f4 f988 	bl	8000168 <__aeabi_dsub>
 800be58:	e772      	b.n	800bd40 <__ieee754_atan2+0x38>
 800be5a:	a517      	add	r5, pc, #92	; (adr r5, 800beb8 <__ieee754_atan2+0x1b0>)
 800be5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be60:	e7a2      	b.n	800bda8 <__ieee754_atan2+0xa0>
 800be62:	a511      	add	r5, pc, #68	; (adr r5, 800bea8 <__ieee754_atan2+0x1a0>)
 800be64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be68:	e79e      	b.n	800bda8 <__ieee754_atan2+0xa0>
 800be6a:	a511      	add	r5, pc, #68	; (adr r5, 800beb0 <__ieee754_atan2+0x1a8>)
 800be6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be70:	e79a      	b.n	800bda8 <__ieee754_atan2+0xa0>
 800be72:	bf00      	nop
 800be74:	f3af 8000 	nop.w
 800be78:	54442d18 	.word	0x54442d18
 800be7c:	c00921fb 	.word	0xc00921fb
 800be80:	54442d18 	.word	0x54442d18
 800be84:	bff921fb 	.word	0xbff921fb
 800be88:	54442d18 	.word	0x54442d18
 800be8c:	bfe921fb 	.word	0xbfe921fb
 800be90:	7f3321d2 	.word	0x7f3321d2
 800be94:	4002d97c 	.word	0x4002d97c
 800be98:	7f3321d2 	.word	0x7f3321d2
 800be9c:	c002d97c 	.word	0xc002d97c
 800bea0:	33145c07 	.word	0x33145c07
 800bea4:	3ca1a626 	.word	0x3ca1a626
 800bea8:	54442d18 	.word	0x54442d18
 800beac:	400921fb 	.word	0x400921fb
 800beb0:	54442d18 	.word	0x54442d18
 800beb4:	3ff921fb 	.word	0x3ff921fb
 800beb8:	54442d18 	.word	0x54442d18
 800bebc:	3fe921fb 	.word	0x3fe921fb
 800bec0:	7ff00000 	.word	0x7ff00000

0800bec4 <__ieee754_sqrt>:
 800bec4:	4b54      	ldr	r3, [pc, #336]	; (800c018 <__ieee754_sqrt+0x154>)
 800bec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beca:	438b      	bics	r3, r1
 800becc:	4606      	mov	r6, r0
 800bece:	460d      	mov	r5, r1
 800bed0:	460a      	mov	r2, r1
 800bed2:	460c      	mov	r4, r1
 800bed4:	d10f      	bne.n	800bef6 <__ieee754_sqrt+0x32>
 800bed6:	4602      	mov	r2, r0
 800bed8:	460b      	mov	r3, r1
 800beda:	f7f4 fafd 	bl	80004d8 <__aeabi_dmul>
 800bede:	4602      	mov	r2, r0
 800bee0:	460b      	mov	r3, r1
 800bee2:	4630      	mov	r0, r6
 800bee4:	4629      	mov	r1, r5
 800bee6:	f7f4 f941 	bl	800016c <__adddf3>
 800beea:	4606      	mov	r6, r0
 800beec:	460d      	mov	r5, r1
 800beee:	4630      	mov	r0, r6
 800bef0:	4629      	mov	r1, r5
 800bef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef6:	2900      	cmp	r1, #0
 800bef8:	4607      	mov	r7, r0
 800befa:	4603      	mov	r3, r0
 800befc:	dc0e      	bgt.n	800bf1c <__ieee754_sqrt+0x58>
 800befe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bf02:	ea5c 0707 	orrs.w	r7, ip, r7
 800bf06:	d0f2      	beq.n	800beee <__ieee754_sqrt+0x2a>
 800bf08:	b141      	cbz	r1, 800bf1c <__ieee754_sqrt+0x58>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	f7f4 f92b 	bl	8000168 <__aeabi_dsub>
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	f7f4 fc09 	bl	800072c <__aeabi_ddiv>
 800bf1a:	e7e6      	b.n	800beea <__ieee754_sqrt+0x26>
 800bf1c:	1512      	asrs	r2, r2, #20
 800bf1e:	d074      	beq.n	800c00a <__ieee754_sqrt+0x146>
 800bf20:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bf24:	07d5      	lsls	r5, r2, #31
 800bf26:	f04f 0500 	mov.w	r5, #0
 800bf2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bf2e:	bf48      	it	mi
 800bf30:	0fd9      	lsrmi	r1, r3, #31
 800bf32:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800bf36:	bf44      	itt	mi
 800bf38:	005b      	lslmi	r3, r3, #1
 800bf3a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800bf3e:	1051      	asrs	r1, r2, #1
 800bf40:	0fda      	lsrs	r2, r3, #31
 800bf42:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800bf46:	4628      	mov	r0, r5
 800bf48:	2216      	movs	r2, #22
 800bf4a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800bf4e:	005b      	lsls	r3, r3, #1
 800bf50:	1987      	adds	r7, r0, r6
 800bf52:	42a7      	cmp	r7, r4
 800bf54:	bfde      	ittt	le
 800bf56:	19b8      	addle	r0, r7, r6
 800bf58:	1be4      	suble	r4, r4, r7
 800bf5a:	19ad      	addle	r5, r5, r6
 800bf5c:	0fdf      	lsrs	r7, r3, #31
 800bf5e:	3a01      	subs	r2, #1
 800bf60:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800bf64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bf6c:	d1f0      	bne.n	800bf50 <__ieee754_sqrt+0x8c>
 800bf6e:	f04f 0c20 	mov.w	ip, #32
 800bf72:	4696      	mov	lr, r2
 800bf74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bf78:	4284      	cmp	r4, r0
 800bf7a:	eb06 070e 	add.w	r7, r6, lr
 800bf7e:	dc02      	bgt.n	800bf86 <__ieee754_sqrt+0xc2>
 800bf80:	d112      	bne.n	800bfa8 <__ieee754_sqrt+0xe4>
 800bf82:	429f      	cmp	r7, r3
 800bf84:	d810      	bhi.n	800bfa8 <__ieee754_sqrt+0xe4>
 800bf86:	2f00      	cmp	r7, #0
 800bf88:	eb07 0e06 	add.w	lr, r7, r6
 800bf8c:	da42      	bge.n	800c014 <__ieee754_sqrt+0x150>
 800bf8e:	f1be 0f00 	cmp.w	lr, #0
 800bf92:	db3f      	blt.n	800c014 <__ieee754_sqrt+0x150>
 800bf94:	f100 0801 	add.w	r8, r0, #1
 800bf98:	1a24      	subs	r4, r4, r0
 800bf9a:	4640      	mov	r0, r8
 800bf9c:	429f      	cmp	r7, r3
 800bf9e:	bf88      	it	hi
 800bfa0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800bfa4:	1bdb      	subs	r3, r3, r7
 800bfa6:	4432      	add	r2, r6
 800bfa8:	0064      	lsls	r4, r4, #1
 800bfaa:	f1bc 0c01 	subs.w	ip, ip, #1
 800bfae:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800bfb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bfb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bfba:	d1dd      	bne.n	800bf78 <__ieee754_sqrt+0xb4>
 800bfbc:	4323      	orrs	r3, r4
 800bfbe:	d006      	beq.n	800bfce <__ieee754_sqrt+0x10a>
 800bfc0:	1c54      	adds	r4, r2, #1
 800bfc2:	bf0b      	itete	eq
 800bfc4:	4662      	moveq	r2, ip
 800bfc6:	3201      	addne	r2, #1
 800bfc8:	3501      	addeq	r5, #1
 800bfca:	f022 0201 	bicne.w	r2, r2, #1
 800bfce:	106b      	asrs	r3, r5, #1
 800bfd0:	0852      	lsrs	r2, r2, #1
 800bfd2:	07e8      	lsls	r0, r5, #31
 800bfd4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bfd8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bfdc:	bf48      	it	mi
 800bfde:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bfe2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800bfe6:	4616      	mov	r6, r2
 800bfe8:	e781      	b.n	800beee <__ieee754_sqrt+0x2a>
 800bfea:	0adc      	lsrs	r4, r3, #11
 800bfec:	3915      	subs	r1, #21
 800bfee:	055b      	lsls	r3, r3, #21
 800bff0:	2c00      	cmp	r4, #0
 800bff2:	d0fa      	beq.n	800bfea <__ieee754_sqrt+0x126>
 800bff4:	02e6      	lsls	r6, r4, #11
 800bff6:	d50a      	bpl.n	800c00e <__ieee754_sqrt+0x14a>
 800bff8:	f1c2 0020 	rsb	r0, r2, #32
 800bffc:	fa23 f000 	lsr.w	r0, r3, r0
 800c000:	1e55      	subs	r5, r2, #1
 800c002:	4093      	lsls	r3, r2
 800c004:	4304      	orrs	r4, r0
 800c006:	1b4a      	subs	r2, r1, r5
 800c008:	e78a      	b.n	800bf20 <__ieee754_sqrt+0x5c>
 800c00a:	4611      	mov	r1, r2
 800c00c:	e7f0      	b.n	800bff0 <__ieee754_sqrt+0x12c>
 800c00e:	0064      	lsls	r4, r4, #1
 800c010:	3201      	adds	r2, #1
 800c012:	e7ef      	b.n	800bff4 <__ieee754_sqrt+0x130>
 800c014:	4680      	mov	r8, r0
 800c016:	e7bf      	b.n	800bf98 <__ieee754_sqrt+0xd4>
 800c018:	7ff00000 	.word	0x7ff00000
 800c01c:	00000000 	.word	0x00000000

0800c020 <atan>:
 800c020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	4bb6      	ldr	r3, [pc, #728]	; (800c300 <atan+0x2e0>)
 800c026:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c02a:	429e      	cmp	r6, r3
 800c02c:	4604      	mov	r4, r0
 800c02e:	460d      	mov	r5, r1
 800c030:	468b      	mov	fp, r1
 800c032:	dd17      	ble.n	800c064 <atan+0x44>
 800c034:	4bb3      	ldr	r3, [pc, #716]	; (800c304 <atan+0x2e4>)
 800c036:	429e      	cmp	r6, r3
 800c038:	dc01      	bgt.n	800c03e <atan+0x1e>
 800c03a:	d109      	bne.n	800c050 <atan+0x30>
 800c03c:	b140      	cbz	r0, 800c050 <atan+0x30>
 800c03e:	4622      	mov	r2, r4
 800c040:	462b      	mov	r3, r5
 800c042:	4620      	mov	r0, r4
 800c044:	4629      	mov	r1, r5
 800c046:	f7f4 f891 	bl	800016c <__adddf3>
 800c04a:	4604      	mov	r4, r0
 800c04c:	460d      	mov	r5, r1
 800c04e:	e005      	b.n	800c05c <atan+0x3c>
 800c050:	f1bb 0f00 	cmp.w	fp, #0
 800c054:	4cac      	ldr	r4, [pc, #688]	; (800c308 <atan+0x2e8>)
 800c056:	f340 8121 	ble.w	800c29c <atan+0x27c>
 800c05a:	4dac      	ldr	r5, [pc, #688]	; (800c30c <atan+0x2ec>)
 800c05c:	4620      	mov	r0, r4
 800c05e:	4629      	mov	r1, r5
 800c060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c064:	4baa      	ldr	r3, [pc, #680]	; (800c310 <atan+0x2f0>)
 800c066:	429e      	cmp	r6, r3
 800c068:	dc11      	bgt.n	800c08e <atan+0x6e>
 800c06a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c06e:	429e      	cmp	r6, r3
 800c070:	dc0a      	bgt.n	800c088 <atan+0x68>
 800c072:	a38b      	add	r3, pc, #556	; (adr r3, 800c2a0 <atan+0x280>)
 800c074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c078:	f7f4 f878 	bl	800016c <__adddf3>
 800c07c:	2200      	movs	r2, #0
 800c07e:	4ba5      	ldr	r3, [pc, #660]	; (800c314 <atan+0x2f4>)
 800c080:	f7f4 fcba 	bl	80009f8 <__aeabi_dcmpgt>
 800c084:	2800      	cmp	r0, #0
 800c086:	d1e9      	bne.n	800c05c <atan+0x3c>
 800c088:	f04f 3aff 	mov.w	sl, #4294967295
 800c08c:	e027      	b.n	800c0de <atan+0xbe>
 800c08e:	f000 f951 	bl	800c334 <fabs>
 800c092:	4ba1      	ldr	r3, [pc, #644]	; (800c318 <atan+0x2f8>)
 800c094:	4604      	mov	r4, r0
 800c096:	429e      	cmp	r6, r3
 800c098:	460d      	mov	r5, r1
 800c09a:	f300 80b8 	bgt.w	800c20e <atan+0x1ee>
 800c09e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c0a2:	429e      	cmp	r6, r3
 800c0a4:	f300 809c 	bgt.w	800c1e0 <atan+0x1c0>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	f7f4 f85e 	bl	800016c <__adddf3>
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4b98      	ldr	r3, [pc, #608]	; (800c314 <atan+0x2f4>)
 800c0b4:	f7f4 f858 	bl	8000168 <__aeabi_dsub>
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	460f      	mov	r7, r1
 800c0be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	f7f4 f851 	bl	800016c <__adddf3>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	4639      	mov	r1, r7
 800c0d2:	f7f4 fb2b 	bl	800072c <__aeabi_ddiv>
 800c0d6:	f04f 0a00 	mov.w	sl, #0
 800c0da:	4604      	mov	r4, r0
 800c0dc:	460d      	mov	r5, r1
 800c0de:	4622      	mov	r2, r4
 800c0e0:	462b      	mov	r3, r5
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	f7f4 f9f7 	bl	80004d8 <__aeabi_dmul>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4680      	mov	r8, r0
 800c0f0:	4689      	mov	r9, r1
 800c0f2:	f7f4 f9f1 	bl	80004d8 <__aeabi_dmul>
 800c0f6:	a36c      	add	r3, pc, #432	; (adr r3, 800c2a8 <atan+0x288>)
 800c0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	460f      	mov	r7, r1
 800c100:	f7f4 f9ea 	bl	80004d8 <__aeabi_dmul>
 800c104:	a36a      	add	r3, pc, #424	; (adr r3, 800c2b0 <atan+0x290>)
 800c106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10a:	f7f4 f82f 	bl	800016c <__adddf3>
 800c10e:	4632      	mov	r2, r6
 800c110:	463b      	mov	r3, r7
 800c112:	f7f4 f9e1 	bl	80004d8 <__aeabi_dmul>
 800c116:	a368      	add	r3, pc, #416	; (adr r3, 800c2b8 <atan+0x298>)
 800c118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11c:	f7f4 f826 	bl	800016c <__adddf3>
 800c120:	4632      	mov	r2, r6
 800c122:	463b      	mov	r3, r7
 800c124:	f7f4 f9d8 	bl	80004d8 <__aeabi_dmul>
 800c128:	a365      	add	r3, pc, #404	; (adr r3, 800c2c0 <atan+0x2a0>)
 800c12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12e:	f7f4 f81d 	bl	800016c <__adddf3>
 800c132:	4632      	mov	r2, r6
 800c134:	463b      	mov	r3, r7
 800c136:	f7f4 f9cf 	bl	80004d8 <__aeabi_dmul>
 800c13a:	a363      	add	r3, pc, #396	; (adr r3, 800c2c8 <atan+0x2a8>)
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	f7f4 f814 	bl	800016c <__adddf3>
 800c144:	4632      	mov	r2, r6
 800c146:	463b      	mov	r3, r7
 800c148:	f7f4 f9c6 	bl	80004d8 <__aeabi_dmul>
 800c14c:	a360      	add	r3, pc, #384	; (adr r3, 800c2d0 <atan+0x2b0>)
 800c14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c152:	f7f4 f80b 	bl	800016c <__adddf3>
 800c156:	4642      	mov	r2, r8
 800c158:	464b      	mov	r3, r9
 800c15a:	f7f4 f9bd 	bl	80004d8 <__aeabi_dmul>
 800c15e:	a35e      	add	r3, pc, #376	; (adr r3, 800c2d8 <atan+0x2b8>)
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	4680      	mov	r8, r0
 800c166:	4689      	mov	r9, r1
 800c168:	4630      	mov	r0, r6
 800c16a:	4639      	mov	r1, r7
 800c16c:	f7f4 f9b4 	bl	80004d8 <__aeabi_dmul>
 800c170:	a35b      	add	r3, pc, #364	; (adr r3, 800c2e0 <atan+0x2c0>)
 800c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c176:	f7f3 fff7 	bl	8000168 <__aeabi_dsub>
 800c17a:	4632      	mov	r2, r6
 800c17c:	463b      	mov	r3, r7
 800c17e:	f7f4 f9ab 	bl	80004d8 <__aeabi_dmul>
 800c182:	a359      	add	r3, pc, #356	; (adr r3, 800c2e8 <atan+0x2c8>)
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	f7f3 ffee 	bl	8000168 <__aeabi_dsub>
 800c18c:	4632      	mov	r2, r6
 800c18e:	463b      	mov	r3, r7
 800c190:	f7f4 f9a2 	bl	80004d8 <__aeabi_dmul>
 800c194:	a356      	add	r3, pc, #344	; (adr r3, 800c2f0 <atan+0x2d0>)
 800c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19a:	f7f3 ffe5 	bl	8000168 <__aeabi_dsub>
 800c19e:	4632      	mov	r2, r6
 800c1a0:	463b      	mov	r3, r7
 800c1a2:	f7f4 f999 	bl	80004d8 <__aeabi_dmul>
 800c1a6:	a354      	add	r3, pc, #336	; (adr r3, 800c2f8 <atan+0x2d8>)
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	f7f3 ffdc 	bl	8000168 <__aeabi_dsub>
 800c1b0:	4632      	mov	r2, r6
 800c1b2:	463b      	mov	r3, r7
 800c1b4:	f7f4 f990 	bl	80004d8 <__aeabi_dmul>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4640      	mov	r0, r8
 800c1be:	4649      	mov	r1, r9
 800c1c0:	f7f3 ffd4 	bl	800016c <__adddf3>
 800c1c4:	4622      	mov	r2, r4
 800c1c6:	462b      	mov	r3, r5
 800c1c8:	f7f4 f986 	bl	80004d8 <__aeabi_dmul>
 800c1cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	d144      	bne.n	800c260 <atan+0x240>
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	4629      	mov	r1, r5
 800c1da:	f7f3 ffc5 	bl	8000168 <__aeabi_dsub>
 800c1de:	e734      	b.n	800c04a <atan+0x2a>
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	4b4c      	ldr	r3, [pc, #304]	; (800c314 <atan+0x2f4>)
 800c1e4:	f7f3 ffc0 	bl	8000168 <__aeabi_dsub>
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	460f      	mov	r7, r1
 800c1ee:	4b49      	ldr	r3, [pc, #292]	; (800c314 <atan+0x2f4>)
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	f7f3 ffba 	bl	800016c <__adddf3>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	4639      	mov	r1, r7
 800c200:	f7f4 fa94 	bl	800072c <__aeabi_ddiv>
 800c204:	f04f 0a01 	mov.w	sl, #1
 800c208:	4604      	mov	r4, r0
 800c20a:	460d      	mov	r5, r1
 800c20c:	e767      	b.n	800c0de <atan+0xbe>
 800c20e:	4b43      	ldr	r3, [pc, #268]	; (800c31c <atan+0x2fc>)
 800c210:	429e      	cmp	r6, r3
 800c212:	dc1a      	bgt.n	800c24a <atan+0x22a>
 800c214:	2200      	movs	r2, #0
 800c216:	4b42      	ldr	r3, [pc, #264]	; (800c320 <atan+0x300>)
 800c218:	f7f3 ffa6 	bl	8000168 <__aeabi_dsub>
 800c21c:	2200      	movs	r2, #0
 800c21e:	4606      	mov	r6, r0
 800c220:	460f      	mov	r7, r1
 800c222:	4b3f      	ldr	r3, [pc, #252]	; (800c320 <atan+0x300>)
 800c224:	4620      	mov	r0, r4
 800c226:	4629      	mov	r1, r5
 800c228:	f7f4 f956 	bl	80004d8 <__aeabi_dmul>
 800c22c:	2200      	movs	r2, #0
 800c22e:	4b39      	ldr	r3, [pc, #228]	; (800c314 <atan+0x2f4>)
 800c230:	f7f3 ff9c 	bl	800016c <__adddf3>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	4630      	mov	r0, r6
 800c23a:	4639      	mov	r1, r7
 800c23c:	f7f4 fa76 	bl	800072c <__aeabi_ddiv>
 800c240:	f04f 0a02 	mov.w	sl, #2
 800c244:	4604      	mov	r4, r0
 800c246:	460d      	mov	r5, r1
 800c248:	e749      	b.n	800c0de <atan+0xbe>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	2000      	movs	r0, #0
 800c250:	4934      	ldr	r1, [pc, #208]	; (800c324 <atan+0x304>)
 800c252:	f7f4 fa6b 	bl	800072c <__aeabi_ddiv>
 800c256:	f04f 0a03 	mov.w	sl, #3
 800c25a:	4604      	mov	r4, r0
 800c25c:	460d      	mov	r5, r1
 800c25e:	e73e      	b.n	800c0de <atan+0xbe>
 800c260:	4b31      	ldr	r3, [pc, #196]	; (800c328 <atan+0x308>)
 800c262:	4e32      	ldr	r6, [pc, #200]	; (800c32c <atan+0x30c>)
 800c264:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c268:	4456      	add	r6, sl
 800c26a:	449a      	add	sl, r3
 800c26c:	e9da 2300 	ldrd	r2, r3, [sl]
 800c270:	f7f3 ff7a 	bl	8000168 <__aeabi_dsub>
 800c274:	4622      	mov	r2, r4
 800c276:	462b      	mov	r3, r5
 800c278:	f7f3 ff76 	bl	8000168 <__aeabi_dsub>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c284:	f7f3 ff70 	bl	8000168 <__aeabi_dsub>
 800c288:	f1bb 0f00 	cmp.w	fp, #0
 800c28c:	4604      	mov	r4, r0
 800c28e:	460d      	mov	r5, r1
 800c290:	f6bf aee4 	bge.w	800c05c <atan+0x3c>
 800c294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c298:	461d      	mov	r5, r3
 800c29a:	e6df      	b.n	800c05c <atan+0x3c>
 800c29c:	4d24      	ldr	r5, [pc, #144]	; (800c330 <atan+0x310>)
 800c29e:	e6dd      	b.n	800c05c <atan+0x3c>
 800c2a0:	8800759c 	.word	0x8800759c
 800c2a4:	7e37e43c 	.word	0x7e37e43c
 800c2a8:	e322da11 	.word	0xe322da11
 800c2ac:	3f90ad3a 	.word	0x3f90ad3a
 800c2b0:	24760deb 	.word	0x24760deb
 800c2b4:	3fa97b4b 	.word	0x3fa97b4b
 800c2b8:	a0d03d51 	.word	0xa0d03d51
 800c2bc:	3fb10d66 	.word	0x3fb10d66
 800c2c0:	c54c206e 	.word	0xc54c206e
 800c2c4:	3fb745cd 	.word	0x3fb745cd
 800c2c8:	920083ff 	.word	0x920083ff
 800c2cc:	3fc24924 	.word	0x3fc24924
 800c2d0:	5555550d 	.word	0x5555550d
 800c2d4:	3fd55555 	.word	0x3fd55555
 800c2d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c2dc:	bfa2b444 	.word	0xbfa2b444
 800c2e0:	52defd9a 	.word	0x52defd9a
 800c2e4:	3fadde2d 	.word	0x3fadde2d
 800c2e8:	af749a6d 	.word	0xaf749a6d
 800c2ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800c2f0:	fe231671 	.word	0xfe231671
 800c2f4:	3fbc71c6 	.word	0x3fbc71c6
 800c2f8:	9998ebc4 	.word	0x9998ebc4
 800c2fc:	3fc99999 	.word	0x3fc99999
 800c300:	440fffff 	.word	0x440fffff
 800c304:	7ff00000 	.word	0x7ff00000
 800c308:	54442d18 	.word	0x54442d18
 800c30c:	3ff921fb 	.word	0x3ff921fb
 800c310:	3fdbffff 	.word	0x3fdbffff
 800c314:	3ff00000 	.word	0x3ff00000
 800c318:	3ff2ffff 	.word	0x3ff2ffff
 800c31c:	40037fff 	.word	0x40037fff
 800c320:	3ff80000 	.word	0x3ff80000
 800c324:	bff00000 	.word	0xbff00000
 800c328:	0800ec30 	.word	0x0800ec30
 800c32c:	0800ec10 	.word	0x0800ec10
 800c330:	bff921fb 	.word	0xbff921fb

0800c334 <fabs>:
 800c334:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c338:	4619      	mov	r1, r3
 800c33a:	4770      	bx	lr

0800c33c <matherr>:
 800c33c:	2000      	movs	r0, #0
 800c33e:	4770      	bx	lr

0800c340 <nan>:
 800c340:	2000      	movs	r0, #0
 800c342:	4901      	ldr	r1, [pc, #4]	; (800c348 <nan+0x8>)
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	7ff80000 	.word	0x7ff80000

0800c34c <_init>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	bf00      	nop
 800c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c352:	bc08      	pop	{r3}
 800c354:	469e      	mov	lr, r3
 800c356:	4770      	bx	lr

0800c358 <_fini>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	bf00      	nop
 800c35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c35e:	bc08      	pop	{r3}
 800c360:	469e      	mov	lr, r3
 800c362:	4770      	bx	lr
